{
  "type": "RootDirectory",
  "name": "conversational_codebase",
  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase",
  "text": "conversational_codebase/\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 adjusted_output.svg\n\u251c\u2500\u2500 dag.py\n\u251c\u2500\u2500 embedding/\n\u251c\u2500\u2500 entities/\n\u251c\u2500\u2500 explanation/\n\u251c\u2500\u2500 github_repo_downloader/\n\u251c\u2500\u2500 knowledge/\n\u251c\u2500\u2500 line.svg\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 nested.py\n\u251c\u2500\u2500 output.svg\n\u251c\u2500\u2500 parser/\n\u251c\u2500\u2500 pythonest.py\n\u251c\u2500\u2500 temp_plot.html\n\u2514\u2500\u2500 tinker.ipynb\n",
  "uuid": "50206252-a034-45ed-944d-480be9d60b30",
  "contents": [
    {
      "type": "Directory",
      "name": "explanation",
      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/explanation",
      "text": "explanation/\n\u251c\u2500\u2500 __init__.py\n\u2514\u2500\u2500 __pycache__/\n",
      "uuid": "74276121-acc9-4c7a-bb32-4557bf58f0a7",
      "contents": [
        {
          "type": "PythonEntity",
          "name": "__init__.py",
          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/explanation/__init__.py",
          "text": "",
          "uuid": "7bbe0fb5-c44f-4a42-bf86-6b1fec96b463",
          "contents": [
            {
              "type": "PythonEntity",
              "name": "__init__.py.Explanation",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/explanation/__init__.py.Explanation",
              "text": "",
              "uuid": "89718f83-0056-460a-8031-7294013a6969",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "__init__.py.Explanation.__init__",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/explanation/__init__.py.Explanation.__init__",
                  "text": "",
                  "uuid": "2560bd93-a1d0-495e-86f5-c9ecc1a8157d",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "__init__.py.Explanation.__init__.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/explanation/__init__.py.Explanation.__init__.top_level_function_definition_code",
                      "text": "",
                      "uuid": "36dd8e33-c56a-4fb3-9796-6a7446a57d64",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "2560bd93-a1d0-495e-86f5-c9ecc1a8157d",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "self.prompt_template = prompt_template\n\nself.model = explanation_model\n\nself.text = explaination\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "89718f83-0056-460a-8031-7294013a6969",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def __init__(self, explaination: str, prompt_template: str, explanation_model: str in VALID_COMPLETION_MODELS): \n        # if validate_prompt_template(explaination_prompt, get_prompt_field_names(explaination_prompt))\n        self.prompt_template = prompt_template\n        self.model = explanation_model\n        self.text = explaination"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "7bbe0fb5-c44f-4a42-bf86-6b1fec96b463",
              "node_type": "class_definition",
              "decorator": null,
              "imports": [],
              "source": "class Explanation():\n    def __init__(self, explaination: str, prompt_template: str, explanation_model: str in VALID_COMPLETION_MODELS): \n        # if validate_prompt_template(explaination_prompt, get_prompt_field_names(explaination_prompt))\n        self.prompt_template = prompt_template\n        self.model = explanation_model\n        self.text = explaination"
            },
            {
              "type": "PythonEntity",
              "name": "__init__.py.create_explanation",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/explanation/__init__.py.create_explanation",
              "text": "",
              "uuid": "4cf68a8a-58a5-43ff-b5f8-72f0c27a916e",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "__init__.py.create_explanation.top_level_decorated_definition_code",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/explanation/__init__.py.create_explanation.top_level_decorated_definition_code",
                  "text": "",
                  "uuid": "c2201ea2-2c9c-41c5-8ed3-4f3702ec471d",
                  "contents": [],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "4cf68a8a-58a5-43ff-b5f8-72f0c27a916e",
                  "node_type": "top_level_code",
                  "decorator": null,
                  "imports": [],
                  "source": "explanation = None\n\nif model in OPEN_AI_MODELS:\n        response = client.completions.create(\n            model=model,\n            prompt=explanation_prompt,\n            max_tokens=explanation_tok_length,\n        )\n        explanation = response.choices[0].text # TODO: could handle be multiple choices\n    else:\n        raise BaseException(\"Model type not supported\") # TODO: better error, maybe add model enumerations\n\nreturn Explanation(explanation, explanation_prompt, model)\n\n"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab107d0>",
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x177371c50>",
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x177ad23d0>"
              ],
              "expanded_state": "unexpanded",
              "parent_uuid": "7bbe0fb5-c44f-4a42-bf86-6b1fec96b463",
              "node_type": "decorated_definition",
              "decorator": "<Node type=decorator, start_point=(25, 0), end_point=(25, 24)>",
              "imports": [],
              "source": "@lru_cache(maxsize=1000)\ndef create_explanation(explanation_prompt: str, model: str = \"text-embedding-ada-002\", explanation_tok_length = DEFAULT_EXPLANATION_LENGTH) -> Explanation:\n    # explaination_prompt = format_explaination_prompt(prompt_template, text)\n    explanation = None\n    \n    if model in OPEN_AI_MODELS:\n        response = client.completions.create(\n            model=model,\n            prompt=explanation_prompt,\n            max_tokens=explanation_tok_length,\n        )\n        explanation = response.choices[0].text # TODO: could handle be multiple choices\n    else:\n        raise BaseException(\"Model type not supported\") # TODO: better error, maybe add model enumerations\n    \n    return Explanation(explanation, explanation_prompt, model)"
            },
            {
              "type": "PythonEntity",
              "name": "__init__.py.LLM",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/explanation/__init__.py.LLM",
              "text": "",
              "uuid": "3380d7b9-9ea1-4541-b2b0-0876fe869394",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "__init__.py.LLM.top_level_function_definition_code",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/explanation/__init__.py.LLM.top_level_function_definition_code",
                  "text": "",
                  "uuid": "71a4a6e0-0862-4a0c-8dea-72451be13269",
                  "contents": [],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "3380d7b9-9ea1-4541-b2b0-0876fe869394",
                  "node_type": "top_level_code",
                  "decorator": null,
                  "imports": [],
                  "source": "if explanation_model not in VALID_COMPLETION_MODELS:\n            raise ValueError(f\"Invalid explanation model. Valid options are: {VALID_COMPLETION_MODELS}\")\n\n# TODO: handle context length\n\nreturn create_explanation(explanation_prompt, explanation_model, explanation_tok_length)\n\n"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab10850>",
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab10890>"
              ],
              "expanded_state": "unexpanded",
              "parent_uuid": "7bbe0fb5-c44f-4a42-bf86-6b1fec96b463",
              "node_type": "function_definition",
              "decorator": null,
              "imports": [],
              "source": "def LLM(explanation_prompt: str = DEFAULT_PROMPT_TEMPLATE, explanation_model: str = VALID_COMPLETION_MODELS[0], explanation_tok_length = DEFAULT_EXPLANATION_LENGTH) -> Explanation:\n        if explanation_model not in VALID_COMPLETION_MODELS:\n            raise ValueError(f\"Invalid explanation model. Valid options are: {VALID_COMPLETION_MODELS}\")\n        # TODO: handle context length\n        return create_explanation(explanation_prompt, explanation_model, explanation_tok_length)"
            },
            {
              "type": "PythonEntity",
              "name": "__init__.py.top_level_module_code",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/explanation/__init__.py.top_level_module_code",
              "text": "",
              "uuid": "9f057932-a5a0-419c-a93b-7f227b757f77",
              "contents": [],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "7bbe0fb5-c44f-4a42-bf86-6b1fec96b463",
              "node_type": "top_level_code",
              "decorator": null,
              "imports": [],
              "source": "from typing import Callable\n\nfrom openai import OpenAI\n\nfrom dotenv import load_dotenv\n\nimport os\n\nfrom conversational_codebase.knowledge.utils.helpers.prompt import validate_prompt_template, get_prompt_field_names, format_explaination_prompt\n\nfrom functools import lru_cache\n\nload_dotenv()\n\nclient = OpenAI(\n    api_key=os.getenv(\"OPENAI_KEY\"),\n)\n\nVALID_COMPLETION_MODELS = ['gpt-4-1106-preview', 'gpt-3.5-turbo-1106']\n\n# Add all valid model names here\n\nDEFAULT_PROMPT_TEMPLATE = \"This is a test prompt. {text_to_be_explained}\"\n\nOPEN_AI_MODELS = set([\"gpt-4-1106-preview\", \"gpt-3.5-turbo-1106\"])\n\nDEFAULT_EXPLANATION_LENGTH = 150\n\n# Function to get embeddings from text\n\n# def explain(text_to_be_explained: str, explaination_model: str in VALID_COMPLETION_MODELS = VALID_COMPLETION_MODELS[0], explaination_prompt: str = DEFAULT_PROMPT_TEMPLATE) -> Explaination:\n\n#         # TODO: handle context length\n\n#         return create_explanation(text_to_be_explained, explaination_model, explaination_prompt)\n\n"
            }
          ],
          "explanation": null,
          "preliminary_context": "",
          "metadata": {},
          "dependencies": [
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab14510>",
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab14550>",
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab14590>",
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab145d0>"
          ],
          "expanded_state": "unexpanded",
          "parent_uuid": "74276121-acc9-4c7a-bb32-4557bf58f0a7",
          "node_type": "module",
          "decorator": null,
          "imports": [
            "<Node type=module, start_point=(0, 0), end_point=(50, 98)>",
            "<Node type=module, start_point=(0, 0), end_point=(50, 98)>",
            "<Node type=module, start_point=(0, 0), end_point=(50, 98)>",
            "<Node type=module, start_point=(0, 0), end_point=(50, 98)>",
            "<Node type=module, start_point=(0, 0), end_point=(50, 98)>",
            "<Node type=module, start_point=(0, 0), end_point=(50, 98)>"
          ],
          "source": "from typing import Callable\nfrom openai import OpenAI\nfrom dotenv import load_dotenv\nimport os\nfrom conversational_codebase.knowledge.utils.helpers.prompt import validate_prompt_template, get_prompt_field_names, format_explaination_prompt\nfrom functools import lru_cache\n\nload_dotenv()\nclient = OpenAI(\n    api_key=os.getenv(\"OPENAI_KEY\"),\n)\n\nVALID_COMPLETION_MODELS = ['gpt-4-1106-preview', 'gpt-3.5-turbo-1106']  # Add all valid model names here\nDEFAULT_PROMPT_TEMPLATE = \"This is a test prompt. {text_to_be_explained}\"\nOPEN_AI_MODELS = set([\"gpt-4-1106-preview\", \"gpt-3.5-turbo-1106\"])\nDEFAULT_EXPLANATION_LENGTH = 150\n\nclass Explanation():\n    def __init__(self, explaination: str, prompt_template: str, explanation_model: str in VALID_COMPLETION_MODELS): \n        # if validate_prompt_template(explaination_prompt, get_prompt_field_names(explaination_prompt))\n        self.prompt_template = prompt_template\n        self.model = explanation_model\n        self.text = explaination\n\n# Function to get embeddings from text\n@lru_cache(maxsize=1000)\ndef create_explanation(explanation_prompt: str, model: str = \"text-embedding-ada-002\", explanation_tok_length = DEFAULT_EXPLANATION_LENGTH) -> Explanation:\n    # explaination_prompt = format_explaination_prompt(prompt_template, text)\n    explanation = None\n    \n    if model in OPEN_AI_MODELS:\n        response = client.completions.create(\n            model=model,\n            prompt=explanation_prompt,\n            max_tokens=explanation_tok_length,\n        )\n        explanation = response.choices[0].text # TODO: could handle be multiple choices\n    else:\n        raise BaseException(\"Model type not supported\") # TODO: better error, maybe add model enumerations\n    \n    return Explanation(explanation, explanation_prompt, model)\n\ndef LLM(explanation_prompt: str = DEFAULT_PROMPT_TEMPLATE, explanation_model: str = VALID_COMPLETION_MODELS[0], explanation_tok_length = DEFAULT_EXPLANATION_LENGTH) -> Explanation:\n        if explanation_model not in VALID_COMPLETION_MODELS:\n            raise ValueError(f\"Invalid explanation model. Valid options are: {VALID_COMPLETION_MODELS}\")\n        # TODO: handle context length\n        return create_explanation(explanation_prompt, explanation_model, explanation_tok_length)\n\n# def explain(text_to_be_explained: str, explaination_model: str in VALID_COMPLETION_MODELS = VALID_COMPLETION_MODELS[0], explaination_prompt: str = DEFAULT_PROMPT_TEMPLATE) -> Explaination:\n#         # TODO: handle context length\n#         return create_explanation(text_to_be_explained, explaination_model, explaination_prompt)"
        },
        {
          "type": "Directory",
          "name": "__pycache__",
          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/explanation/__pycache__",
          "text": "__pycache__/\n\u2514\u2500\u2500 __init__.cpython-311.pyc\n",
          "uuid": "6bc88f9f-4555-4157-80e1-c664f52b2807",
          "contents": [
            {
              "type": "UnsupportedFile",
              "name": "__init__.cpython-311.pyc",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/explanation/__pycache__/__init__.cpython-311.pyc",
              "text": "",
              "uuid": "cdd0247e-3fe7-4822-a78f-77e93f781a55",
              "contents": [],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {
                "file_size": 2952
              },
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "6bc88f9f-4555-4157-80e1-c664f52b2807"
            }
          ],
          "explanation": null,
          "preliminary_context": "",
          "metadata": {
            "num_files": 1
          },
          "dependencies": [],
          "expanded_state": "expanded",
          "parent_uuid": "74276121-acc9-4c7a-bb32-4557bf58f0a7"
        }
      ],
      "explanation": null,
      "preliminary_context": "",
      "metadata": {
        "num_files": 1,
        "num_folders": 1
      },
      "dependencies": [],
      "expanded_state": "expanded",
      "parent_uuid": "50206252-a034-45ed-944d-480be9d60b30"
    },
    {
      "type": "UnsupportedFile",
      "name": "tinker.ipynb",
      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/tinker.ipynb",
      "text": "",
      "uuid": "e81a0748-c7ce-4de6-a8de-f62242b901fd",
      "contents": [],
      "explanation": null,
      "preliminary_context": "",
      "metadata": {
        "file_size": 233342
      },
      "dependencies": [],
      "expanded_state": "unexpanded",
      "parent_uuid": "50206252-a034-45ed-944d-480be9d60b30"
    },
    {
      "type": "PythonEntity",
      "name": "pythonest.py",
      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/pythonest.py",
      "text": "",
      "uuid": "97ac471d-fb15-4ff5-abeb-31c68b00ee1a",
      "contents": [],
      "explanation": null,
      "preliminary_context": "",
      "metadata": {},
      "dependencies": [],
      "expanded_state": "unexpanded",
      "parent_uuid": "50206252-a034-45ed-944d-480be9d60b30",
      "node_type": "module",
      "decorator": null,
      "imports": [],
      "source": ""
    },
    {
      "type": "Directory",
      "name": "embedding",
      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/embedding",
      "text": "embedding/\n\u2514\u2500\u2500 __init__.py\n",
      "uuid": "5b073191-8de8-4c41-be97-8d3fa0ef117f",
      "contents": [
        {
          "type": "PythonEntity",
          "name": "__init__.py",
          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/embedding/__init__.py",
          "text": "",
          "uuid": "94912b30-ed96-40a4-8264-12728e622745",
          "contents": [
            {
              "type": "PythonEntity",
              "name": "__init__.py.Yo",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/embedding/__init__.py.Yo",
              "text": "",
              "uuid": "e748d28c-86c3-4244-8919-3a394ad7e80f",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "__init__.py.Yo.__init__",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/embedding/__init__.py.Yo.__init__",
                  "text": "",
                  "uuid": "9a680fb4-681f-4acc-af8c-72f809cd52bf",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "__init__.py.Yo.__init__.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/embedding/__init__.py.Yo.__init__.top_level_function_definition_code",
                      "text": "",
                      "uuid": "6377ff78-9fd3-45da-8dbe-4820720fd705",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "9a680fb4-681f-4acc-af8c-72f809cd52bf",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "self.yo = yo\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "e748d28c-86c3-4244-8919-3a394ad7e80f",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def __init__(self, yo: str):\n        self.yo = yo"
                },
                {
                  "type": "PythonEntity",
                  "name": "__init__.py.Yo.another",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/embedding/__init__.py.Yo.another",
                  "text": "",
                  "uuid": "ca898cfc-4982-41fe-a028-e5a1fcc69234",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "__init__.py.Yo.another.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/embedding/__init__.py.Yo.another.top_level_function_definition_code",
                      "text": "",
                      "uuid": "fb0cfd5b-8de2-427b-9c4b-d18ab9bba7d3",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "ca898cfc-4982-41fe-a028-e5a1fcc69234",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "return self.yo\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "e748d28c-86c3-4244-8919-3a394ad7e80f",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def another(self):\n        return self.yo"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "94912b30-ed96-40a4-8264-12728e622745",
              "node_type": "class_definition",
              "decorator": null,
              "imports": [],
              "source": "class Yo:\n    def __init__(self, yo: str):\n        self.yo = yo\n\n    def another(self):\n        return self.yo"
            },
            {
              "type": "PythonEntity",
              "name": "__init__.py.Embedding",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/embedding/__init__.py.Embedding",
              "text": "",
              "uuid": "ae28c933-17b9-4bf0-af58-2f0e3aabea7d",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "__init__.py.Embedding.__init__",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/embedding/__init__.py.Embedding.__init__",
                  "text": "",
                  "uuid": "cafab66b-dad4-4e48-86b2-a7f152cd4497",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "__init__.py.Embedding.__init__.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/embedding/__init__.py.Embedding.__init__.top_level_function_definition_code",
                      "text": "",
                      "uuid": "3e088cf9-52ad-41fe-ad48-060fcd2abb71",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "cafab66b-dad4-4e48-86b2-a7f152cd4497",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "self.embedding = embedding\n\nself.model = model\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "ae28c933-17b9-4bf0-af58-2f0e3aabea7d",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def __init__(self, embedding: [float],  model: str in VALID_EMBEDDING_MODELS):\n        self.embedding = embedding\n        self.model = model"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "94912b30-ed96-40a4-8264-12728e622745",
              "node_type": "class_definition",
              "decorator": null,
              "imports": [],
              "source": "class Embedding(Yo):\n    def __init__(self, embedding: [float],  model: str in VALID_EMBEDDING_MODELS):\n        self.embedding = embedding\n        self.model = model"
            },
            {
              "type": "PythonEntity",
              "name": "__init__.py.embed",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/embedding/__init__.py.embed",
              "text": "",
              "uuid": "99c52c27-e554-4fb3-ad43-d5a4b8f1ca18",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "__init__.py.embed.top_level_decorated_definition_code",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/embedding/__init__.py.embed.top_level_decorated_definition_code",
                  "text": "",
                  "uuid": "4e7d7df8-69a2-4e0f-84cd-feb8085c9621",
                  "contents": [],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "99c52c27-e554-4fb3-ad43-d5a4b8f1ca18",
                  "node_type": "top_level_code",
                  "decorator": null,
                  "imports": [],
                  "source": "embedding = None\n\nif model == \"text-embedding-ada-002\":\n        response = client.embeddings.create(\n            input=text, \n            model=\"text-embedding-ada-002\"\n        )\n        embedding = Embedding(tuple(response.data[0].embedding), \"text-embedding-ada-002\")\n    else:\n        raise BaseException(\"Model type not supported\") # TODO: better error, maybe add model enumerations\n\nreturn embedding\n\n"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab25750>",
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab25790>",
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab257d0>",
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab25850>"
              ],
              "expanded_state": "unexpanded",
              "parent_uuid": "94912b30-ed96-40a4-8264-12728e622745",
              "node_type": "decorated_definition",
              "decorator": "<Node type=decorator, start_point=(28, 0), end_point=(28, 24)>",
              "imports": [],
              "source": "@lru_cache(maxsize=1000)\ndef embed(text: str, model: str = \"text-embedding-ada-002\") -> Embedding:\n    embedding = None\n    \n    if model == \"text-embedding-ada-002\":\n        response = client.embeddings.create(\n            input=text, \n            model=\"text-embedding-ada-002\"\n        )\n        embedding = Embedding(tuple(response.data[0].embedding), \"text-embedding-ada-002\")\n    else:\n        raise BaseException(\"Model type not supported\") # TODO: better error, maybe add model enumerations\n\n    return embedding"
            },
            {
              "type": "PythonEntity",
              "name": "__init__.py.compare_embeddings",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/embedding/__init__.py.compare_embeddings",
              "text": "",
              "uuid": "09b9cb4e-fe0a-4c27-91ac-837f7ad3d401",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "__init__.py.compare_embeddings.top_level_decorated_definition_code",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/embedding/__init__.py.compare_embeddings.top_level_decorated_definition_code",
                  "text": "",
                  "uuid": "cf213b3e-b5f8-40c7-a57c-fe6a4f589b0b",
                  "contents": [],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "09b9cb4e-fe0a-4c27-91ac-837f7ad3d401",
                  "node_type": "top_level_code",
                  "decorator": null,
                  "imports": [],
                  "source": "if embedding1.model != embedding2.model:\n        raise BaseException(\"Embeddings comparison must be from the same model\")\n\nreturn np.dot(embedding1, embedding2) / (np.linalg.norm(embedding1) * np.linalg.norm(embedding2))\n\n"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab26f50>",
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab26f90>",
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab27010>",
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab27090>"
              ],
              "expanded_state": "unexpanded",
              "parent_uuid": "94912b30-ed96-40a4-8264-12728e622745",
              "node_type": "decorated_definition",
              "decorator": "<Node type=decorator, start_point=(46, 0), end_point=(46, 24)>",
              "imports": [],
              "source": "@lru_cache(maxsize=1000)\ndef compare_embeddings(embedding1: Embedding, embedding2: Embedding):\n    if embedding1.model != embedding2.model:\n        raise BaseException(\"Embeddings comparison must be from the same model\")\n    return np.dot(embedding1, embedding2) / (np.linalg.norm(embedding1) * np.linalg.norm(embedding2))"
            },
            {
              "type": "PythonEntity",
              "name": "__init__.py.top_level_module_code",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/embedding/__init__.py.top_level_module_code",
              "text": "",
              "uuid": "26cf7758-ef0f-4eef-bb93-da806e273f14",
              "contents": [],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "94912b30-ed96-40a4-8264-12728e622745",
              "node_type": "top_level_code",
              "decorator": null,
              "imports": [],
              "source": "from openai import OpenAI\n\nfrom dotenv import load_dotenv\n\nimport os\n\nimport numpy as np\n\nfrom typing import Callable\n\nfrom functools import lru_cache\n\nload_dotenv()\n\nclient = OpenAI(\n    api_key=os.getenv(\"OPENAI_KEY\"),\n)\n\nVALID_EMBEDDING_MODELS = ['text-embedding-ada-002']\n\n# Function to get embeddings from text\n\n# Function to compare embeddings and return similarity\n\n"
            }
          ],
          "explanation": null,
          "preliminary_context": "",
          "metadata": {},
          "dependencies": [
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab28c90>",
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab28cd0>",
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab28d50>"
          ],
          "expanded_state": "unexpanded",
          "parent_uuid": "5b073191-8de8-4c41-be97-8d3fa0ef117f",
          "node_type": "module",
          "decorator": null,
          "imports": [
            "<Node type=module, start_point=(0, 0), end_point=(53, 0)>",
            "<Node type=module, start_point=(0, 0), end_point=(53, 0)>",
            "<Node type=module, start_point=(0, 0), end_point=(53, 0)>",
            "<Node type=module, start_point=(0, 0), end_point=(53, 0)>",
            "<Node type=module, start_point=(0, 0), end_point=(53, 0)>",
            "<Node type=module, start_point=(0, 0), end_point=(53, 0)>"
          ],
          "source": "from openai import OpenAI\nfrom dotenv import load_dotenv\nimport os\nimport numpy as np\nfrom typing import Callable\nfrom functools import lru_cache\n\nload_dotenv()\nclient = OpenAI(\n    api_key=os.getenv(\"OPENAI_KEY\"),\n)\n\nVALID_EMBEDDING_MODELS = ['text-embedding-ada-002']\n\nclass Yo:\n    def __init__(self, yo: str):\n        self.yo = yo\n\n    def another(self):\n        return self.yo\n\nclass Embedding(Yo):\n    def __init__(self, embedding: [float],  model: str in VALID_EMBEDDING_MODELS):\n        self.embedding = embedding\n        self.model = model\n\n\n# Function to get embeddings from text\n@lru_cache(maxsize=1000)\ndef embed(text: str, model: str = \"text-embedding-ada-002\") -> Embedding:\n    embedding = None\n    \n    if model == \"text-embedding-ada-002\":\n        response = client.embeddings.create(\n            input=text, \n            model=\"text-embedding-ada-002\"\n        )\n        embedding = Embedding(tuple(response.data[0].embedding), \"text-embedding-ada-002\")\n    else:\n        raise BaseException(\"Model type not supported\") # TODO: better error, maybe add model enumerations\n\n    return embedding\n\n\n\n# Function to compare embeddings and return similarity\n@lru_cache(maxsize=1000)\ndef compare_embeddings(embedding1: Embedding, embedding2: Embedding):\n    if embedding1.model != embedding2.model:\n        raise BaseException(\"Embeddings comparison must be from the same model\")\n    return np.dot(embedding1, embedding2) / (np.linalg.norm(embedding1) * np.linalg.norm(embedding2))\n\n    \n"
        }
      ],
      "explanation": null,
      "preliminary_context": "",
      "metadata": {
        "num_files": 1
      },
      "dependencies": [],
      "expanded_state": "expanded",
      "parent_uuid": "50206252-a034-45ed-944d-480be9d60b30"
    },
    {
      "type": "PythonEntity",
      "name": "dag.py",
      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/dag.py",
      "text": "",
      "uuid": "46385aba-46dc-4dab-acc0-c19e8eb7043c",
      "contents": [
        {
          "type": "PythonEntity",
          "name": "dag.py.Node",
          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/dag.py.Node",
          "text": "",
          "uuid": "444e339c-81c5-4bd7-88a5-018c0c2057b7",
          "contents": [
            {
              "type": "PythonEntity",
              "name": "dag.py.Node.__init__",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/dag.py.Node.__init__",
              "text": "",
              "uuid": "55d5510b-2110-45d1-b382-d1e3e0d0a536",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "dag.py.Node.__init__.top_level_function_definition_code",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/dag.py.Node.__init__.top_level_function_definition_code",
                  "text": "",
                  "uuid": "6cbe1386-4a1a-421c-a154-2d1957ee80cb",
                  "contents": [],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "55d5510b-2110-45d1-b382-d1e3e0d0a536",
                  "node_type": "top_level_code",
                  "decorator": null,
                  "imports": [],
                  "source": "self.name = name\n\nself.contents = []\n\n# Child nodes\n\nself.dependencies = []\n\n# Dependency nodes\n\nself.execution_group = []\n\n"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "444e339c-81c5-4bd7-88a5-018c0c2057b7",
              "node_type": "function_definition",
              "decorator": null,
              "imports": [],
              "source": "def __init__(self, name):\n        self.name = name\n        self.contents = []  # Child nodes\n        self.dependencies = []  # Dependency nodes\n        self.execution_group = []"
            }
          ],
          "explanation": null,
          "preliminary_context": "",
          "metadata": {},
          "dependencies": [],
          "expanded_state": "unexpanded",
          "parent_uuid": "46385aba-46dc-4dab-acc0-c19e8eb7043c",
          "node_type": "class_definition",
          "decorator": null,
          "imports": [],
          "source": "class Node:\n    def __init__(self, name):\n        self.name = name\n        self.contents = []  # Child nodes\n        self.dependencies = []  # Dependency nodes\n        self.execution_group = []"
        },
        {
          "type": "PythonEntity",
          "name": "dag.py.assign_execution_groups_bfs",
          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/dag.py.assign_execution_groups_bfs",
          "text": "",
          "uuid": "42b79002-dd48-4b15-bdcf-26350693d482",
          "contents": [
            {
              "type": "PythonEntity",
              "name": "dag.py.assign_execution_groups_bfs.top_level_function_definition_code",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/dag.py.assign_execution_groups_bfs.top_level_function_definition_code",
              "text": "",
              "uuid": "63eed3d4-d3fb-4b42-a523-03e07a8974cc",
              "contents": [],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "42b79002-dd48-4b15-bdcf-26350693d482",
              "node_type": "top_level_code",
              "decorator": null,
              "imports": [],
              "source": "queue = deque([(root, 0)])\n\nvisited = set()\n\nwhile queue:\n        node, group = queue.popleft()\n\n        visited.add(node)\n        node.execution_group.append(group)\n        next_group = group + 1\n        \n\n        for child in node.contents + node.dependencies:\n            queue.append((child, next_group))\n\n"
            }
          ],
          "explanation": null,
          "preliminary_context": "",
          "metadata": {},
          "dependencies": [
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab2de90>",
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab2ded0>",
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab2df50>",
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab2dfd0>",
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab2e090>",
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab2e190>"
          ],
          "expanded_state": "unexpanded",
          "parent_uuid": "46385aba-46dc-4dab-acc0-c19e8eb7043c",
          "node_type": "function_definition",
          "decorator": null,
          "imports": [],
          "source": "def assign_execution_groups_bfs(root):\n    queue = deque([(root, 0)])\n    visited = set()\n    while queue:\n        node, group = queue.popleft()\n\n        visited.add(node)\n        node.execution_group.append(group)\n        next_group = group + 1\n        \n\n        for child in node.contents + node.dependencies:\n            queue.append((child, next_group))"
        },
        {
          "type": "PythonEntity",
          "name": "dag.py.get_grouped_nodes",
          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/dag.py.get_grouped_nodes",
          "text": "",
          "uuid": "44143cf0-5b1e-4414-93c2-e39b726c7263",
          "contents": [
            {
              "type": "PythonEntity",
              "name": "dag.py.get_grouped_nodes.top_level_function_definition_code",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/dag.py.get_grouped_nodes.top_level_function_definition_code",
              "text": "",
              "uuid": "4dfdc5fe-8ef0-41da-8ad3-4ee11e377a14",
              "contents": [],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "44143cf0-5b1e-4414-93c2-e39b726c7263",
              "node_type": "top_level_code",
              "decorator": null,
              "imports": [],
              "source": "for node in root.contents:\n        grouped_nodes[max(node.execution_group)] = grouped_nodes.get(max(node.execution_group), []) + [node.name]\n        get_grouped_nodes(node, grouped_nodes)\n\nreturn grouped_nodes\n\n"
            }
          ],
          "explanation": null,
          "preliminary_context": "",
          "metadata": {},
          "dependencies": [
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab2f050>",
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab2f0d0>",
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab2f190>",
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab2f250>"
          ],
          "expanded_state": "unexpanded",
          "parent_uuid": "46385aba-46dc-4dab-acc0-c19e8eb7043c",
          "node_type": "function_definition",
          "decorator": null,
          "imports": [],
          "source": "def get_grouped_nodes(root, grouped_nodes = {}):\n    for node in root.contents:\n        grouped_nodes[max(node.execution_group)] = grouped_nodes.get(max(node.execution_group), []) + [node.name]\n        get_grouped_nodes(node, grouped_nodes)\n    \n    return grouped_nodes"
        },
        {
          "type": "PythonEntity",
          "name": "dag.py.top_level_module_code",
          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/dag.py.top_level_module_code",
          "text": "",
          "uuid": "a73f5259-def2-44b0-8ae3-1691a4e7ad31",
          "contents": [],
          "explanation": null,
          "preliminary_context": "",
          "metadata": {},
          "dependencies": [],
          "expanded_state": "unexpanded",
          "parent_uuid": "46385aba-46dc-4dab-acc0-c19e8eb7043c",
          "node_type": "top_level_code",
          "decorator": null,
          "imports": [],
          "source": "import networkx as nx\n\nimport matplotlib.pyplot as plt\n\nfrom collections import deque\n\n# Create a sample graph\n\nroot = Node(\"root\")\n\nnode_a = Node(\"A\")\n\nnode_b = Node(\"B\")\n\nnode_c = Node(\"C\")\n\nnode_d = Node(\"D\")\n\nnode_e = Node(\"E\")\n\nnode_f = Node(\"F\")\n\nnode_g = Node(\"G\")\n\nnode_h = Node(\"H\")\n\nnode_i = Node(\"I\")\n\nnode_j = Node(\"J\")\n\nnode_k = Node(\"K\")\n\nnode_l = Node(\"L\")\n\nnode_m = Node(\"M\")\n\n# define tree structure\n\nroot.contents = [node_a, node_b, node_c]\n\nnode_a.contents = [node_d, node_e]\n\nnode_b.contents = [node_f, node_g]\n\nnode_c.contents = [node_h, node_i]\n\nnode_d.contents = [node_j, node_k]\n\nnode_e.contents = [node_l, node_m]\n\n# define dependencies\n\nnode_a.dependencies = [node_b, node_c]\n\nnode_b.dependencies = [node_c]\n\nnode_d.dependencies = [node_e]\n\nnode_e.dependencies = [node_f]\n\nnode_g.dependencies = [node_h]\n\nnode_h.dependencies = [node_i]\n\nnodes = [root, node_a, node_b, node_c, node_d, node_e, node_f, node_g, node_h, node_i, node_j, node_k, node_l, node_m]\n\n# BFS to assign execution groups\n\nassign_execution_groups_bfs(root)\n\nexecution_groups = get_grouped_nodes(root)\n\nprint(execution_groups)\n\n# Create a directed graph\n\nG = nx.DiGraph()\n\n# Add nodes and edges with different styles for contents and dependencies\n\nfor node in nodes:\n    G.add_node(node.name, execution_group=node.execution_group)\n    for content in node.contents:\n        G.add_edge(node.name, content.name, color='blue')  # Content edges in blue\n    for dependency in node.dependencies:\n        G.add_edge(node.name, dependency.name, color='red')  # Dependency edges in red\n\n# Draw the graph\n\ncolors = nx.get_edge_attributes(G, 'color').values()\n\nlabels = nx.get_node_attributes(G, 'execution_group')\n\npos = nx.spring_layout(G)\n\n# You can choose different layouts\n\nnx.draw(G, pos, edge_color=colors, with_labels=True, connectionstyle='arc3,rad=0.1')\n\noffset = {k: [v[0], v[1] + 0.1] for k, v in pos.items()}\n\n# Adjust 0.1 as needed\n\nnx.draw_networkx_labels(G, offset, labels, font_size=12)\n\nplt.show()\n\n"
        }
      ],
      "explanation": null,
      "preliminary_context": "",
      "metadata": {},
      "dependencies": [
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab43390>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab43410>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab434d0>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab43590>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab43650>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab43750>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab43810>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab438d0>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab43990>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab43710>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab43ad0>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab43b90>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab43c50>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab43d10>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab43dd0>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab43e90>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab43f50>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab44050>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab44110>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab441d0>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab44290>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab44350>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab44410>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab444d0>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab44590>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab44650>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab44710>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab447d0>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab44890>"
      ],
      "expanded_state": "unexpanded",
      "parent_uuid": "50206252-a034-45ed-944d-480be9d60b30",
      "node_type": "module",
      "decorator": null,
      "imports": [
        "<Node type=module, start_point=(0, 0), end_point=(93, 10)>",
        "<Node type=module, start_point=(0, 0), end_point=(93, 10)>",
        "<Node type=module, start_point=(0, 0), end_point=(93, 10)>"
      ],
      "source": "import networkx as nx\nimport matplotlib.pyplot as plt\nfrom collections import deque\n\nclass Node:\n    def __init__(self, name):\n        self.name = name\n        self.contents = []  # Child nodes\n        self.dependencies = []  # Dependency nodes\n        self.execution_group = []\n\n# Create a sample graph\nroot = Node(\"root\")\nnode_a = Node(\"A\")\nnode_b = Node(\"B\")\nnode_c = Node(\"C\")\nnode_d = Node(\"D\")\nnode_e = Node(\"E\")\nnode_f = Node(\"F\")\nnode_g = Node(\"G\")\nnode_h = Node(\"H\")\nnode_i = Node(\"I\")\nnode_j = Node(\"J\")\nnode_k = Node(\"K\")\nnode_l = Node(\"L\")\nnode_m = Node(\"M\")\n\n# define tree structure\nroot.contents = [node_a, node_b, node_c]\nnode_a.contents = [node_d, node_e]\nnode_b.contents = [node_f, node_g]\nnode_c.contents = [node_h, node_i]\nnode_d.contents = [node_j, node_k]\nnode_e.contents = [node_l, node_m]\n\n# define dependencies\nnode_a.dependencies = [node_b, node_c]\nnode_b.dependencies = [node_c]\nnode_d.dependencies = [node_e]\nnode_e.dependencies = [node_f]\nnode_g.dependencies = [node_h]\nnode_h.dependencies = [node_i]\n\n\nnodes = [root, node_a, node_b, node_c, node_d, node_e, node_f, node_g, node_h, node_i, node_j, node_k, node_l, node_m]\n\n\n# BFS to assign execution groups\ndef assign_execution_groups_bfs(root):\n    queue = deque([(root, 0)])\n    visited = set()\n    while queue:\n        node, group = queue.popleft()\n\n        visited.add(node)\n        node.execution_group.append(group)\n        next_group = group + 1\n        \n\n        for child in node.contents + node.dependencies:\n            queue.append((child, next_group))\n\ndef get_grouped_nodes(root, grouped_nodes = {}):\n    for node in root.contents:\n        grouped_nodes[max(node.execution_group)] = grouped_nodes.get(max(node.execution_group), []) + [node.name]\n        get_grouped_nodes(node, grouped_nodes)\n    \n    return grouped_nodes\n\n\nassign_execution_groups_bfs(root)\n\nexecution_groups = get_grouped_nodes(root)\nprint(execution_groups)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add nodes and edges with different styles for contents and dependencies\nfor node in nodes:\n    G.add_node(node.name, execution_group=node.execution_group)\n    for content in node.contents:\n        G.add_edge(node.name, content.name, color='blue')  # Content edges in blue\n    for dependency in node.dependencies:\n        G.add_edge(node.name, dependency.name, color='red')  # Dependency edges in red\n\n# Draw the graph\ncolors = nx.get_edge_attributes(G, 'color').values()\nlabels = nx.get_node_attributes(G, 'execution_group')\npos = nx.spring_layout(G)  # You can choose different layouts\nnx.draw(G, pos, edge_color=colors, with_labels=True, connectionstyle='arc3,rad=0.1')\noffset = {k: [v[0], v[1] + 0.1] for k, v in pos.items()}  # Adjust 0.1 as needed\nnx.draw_networkx_labels(G, offset, labels, font_size=12)\nplt.show()"
    },
    {
      "type": "Directory",
      "name": "parser",
      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/parser",
      "text": "parser/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 __pycache__/\n\u251c\u2500\u2500 _build_library.py\n\u251c\u2500\u2500 build/\n\u251c\u2500\u2500 conversational_codebase/\n\u251c\u2500\u2500 grammar.py\n\u251c\u2500\u2500 tree-sitter/\n\u2514\u2500\u2500 vendor/\n",
      "uuid": "58a2c53d-883d-43c9-be71-bb4998b57f98",
      "contents": [
        {
          "type": "PythonEntity",
          "name": "__init__.py",
          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/parser/__init__.py",
          "text": "",
          "uuid": "3ac18eed-687c-4aec-8b4e-1657cd55e9bf",
          "contents": [
            {
              "type": "PythonEntity",
              "name": "__init__.py.top_level_module_code",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/parser/__init__.py.top_level_module_code",
              "text": "",
              "uuid": "d693719c-a48a-40bc-8ee9-9c82f8efc359",
              "contents": [],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "3ac18eed-687c-4aec-8b4e-1657cd55e9bf",
              "node_type": "top_level_code",
              "decorator": null,
              "imports": [],
              "source": "from tree_sitter import Language\n\nfrom dotenv import dotenv_values\n\nimport os\n\nconfig = dotenv_values(\".env\")\n\ntry:\n    TREE_SITTER_BUILD_PATH = config.get(\"TREE_SITTER_BUILD_PATH\")\nexcept:\n    raise ValueError(\"TREE_SITTER_BUILD_PATH not found in .env file\")\n\nso_file = os.path.join(TREE_SITTER_BUILD_PATH, \"my-languages.so\")\n\nPY_LANGUAGE = Language(so_file, \"python\")\n\nJS_LANGUAGE = Language(so_file, \"javascript\")\n\nTS_LANGUAGE = Language(so_file, \"typescript\")\n\nTSX_LANGUAGE = Language(so_file, \"tsx\")\n\nC_LANGUAGE = Language(so_file, \"c\")\n\n"
            }
          ],
          "explanation": null,
          "preliminary_context": "",
          "metadata": {},
          "dependencies": [
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab47490>",
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab4a3d0>",
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab4a450>",
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab4a510>",
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab4a5d0>",
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab4a6d0>",
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab4a790>",
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab4a850>",
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab4a910>"
          ],
          "expanded_state": "unexpanded",
          "parent_uuid": "58a2c53d-883d-43c9-be71-bb4998b57f98",
          "node_type": "module",
          "decorator": null,
          "imports": [
            "<Node type=module, start_point=(0, 0), end_point=(21, 0)>",
            "<Node type=module, start_point=(0, 0), end_point=(21, 0)>",
            "<Node type=module, start_point=(0, 0), end_point=(21, 0)>"
          ],
          "source": "from tree_sitter import Language\nfrom dotenv import dotenv_values\nimport os\n\nconfig = dotenv_values(\".env\")\n\ntry:\n    TREE_SITTER_BUILD_PATH = config.get(\"TREE_SITTER_BUILD_PATH\")\nexcept:\n    raise ValueError(\"TREE_SITTER_BUILD_PATH not found in .env file\")\n\nso_file = os.path.join(TREE_SITTER_BUILD_PATH, \"my-languages.so\")\n\n\nPY_LANGUAGE = Language(so_file, \"python\")\nJS_LANGUAGE = Language(so_file, \"javascript\")\nTS_LANGUAGE = Language(so_file, \"typescript\")\nTSX_LANGUAGE = Language(so_file, \"tsx\")\nC_LANGUAGE = Language(so_file, \"c\")\n\n\n"
        },
        {
          "type": "Directory",
          "name": "__pycache__",
          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/parser/__pycache__",
          "text": "__pycache__/\n\u251c\u2500\u2500 __init__.cpython-311.pyc\n\u2514\u2500\u2500 grammar.cpython-311.pyc\n",
          "uuid": "29460c8a-6acd-4ec8-9938-23e04854877a",
          "contents": [
            {
              "type": "UnsupportedFile",
              "name": "grammar.cpython-311.pyc",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/parser/__pycache__/grammar.cpython-311.pyc",
              "text": "",
              "uuid": "3dd97a87-b007-419f-8abc-8da8c162f57d",
              "contents": [],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {
                "file_size": 4476
              },
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "29460c8a-6acd-4ec8-9938-23e04854877a"
            },
            {
              "type": "UnsupportedFile",
              "name": "__init__.cpython-311.pyc",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/parser/__pycache__/__init__.cpython-311.pyc",
              "text": "",
              "uuid": "d4aa149b-1e9f-4433-8b89-0162a3ddccf9",
              "contents": [],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {
                "file_size": 1053
              },
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "29460c8a-6acd-4ec8-9938-23e04854877a"
            }
          ],
          "explanation": null,
          "preliminary_context": "",
          "metadata": {
            "num_files": 2
          },
          "dependencies": [],
          "expanded_state": "expanded",
          "parent_uuid": "58a2c53d-883d-43c9-be71-bb4998b57f98"
        },
        {
          "type": "PythonEntity",
          "name": "grammar.py",
          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/parser/grammar.py",
          "text": "",
          "uuid": "34f07125-08ae-4b65-bcde-fe4e5ae27cea",
          "contents": [
            {
              "type": "PythonEntity",
              "name": "grammar.py.collect_child_fields_from_loaded_grammar",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/parser/grammar.py.collect_child_fields_from_loaded_grammar",
              "text": "",
              "uuid": "a0fe2cc0-38d9-4d94-b62d-68988efe565f",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "grammar.py.collect_child_fields_from_loaded_grammar.recurse_rules",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/parser/grammar.py.collect_child_fields_from_loaded_grammar.recurse_rules",
                  "text": "",
                  "uuid": "e722d90a-48f4-4295-8c23-590bce4cd403",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "grammar.py.collect_child_fields_from_loaded_grammar.recurse_rules.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/parser/grammar.py.collect_child_fields_from_loaded_grammar.recurse_rules.top_level_function_definition_code",
                      "text": "",
                      "uuid": "f5eec857-b5c6-4e20-96bb-005cadecedef",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "e722d90a-48f4-4295-8c23-590bce4cd403",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "if isinstance(rule, dict):\n            rule_type = rule.get('type')\n            # If the rule is a field, it could represent a child node\n            if rule_type == 'FIELD' and 'name' in rule:\n                if rule_name not in child_fields:\n                    child_fields[rule_name] = []\n                child_fields[rule_name].append(rule['name'])\n            # Recursively navigate through the rule structure\n            for key, value in rule.items():\n                if isinstance(value, (dict, list)):\n                    recurse_rules(value, rule_name)\n        elif isinstance(rule, list):\n            for item in rule:\n                recurse_rules(item, rule_name)\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab4db10>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab50cd0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab50d50>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab50e10>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab50ed0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab50fd0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab51090>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab51150>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "a0fe2cc0-38d9-4d94-b62d-68988efe565f",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def recurse_rules(rule, rule_name=None):\n        if isinstance(rule, dict):\n            rule_type = rule.get('type')\n            # If the rule is a field, it could represent a child node\n            if rule_type == 'FIELD' and 'name' in rule:\n                if rule_name not in child_fields:\n                    child_fields[rule_name] = []\n                child_fields[rule_name].append(rule['name'])\n            # Recursively navigate through the rule structure\n            for key, value in rule.items():\n                if isinstance(value, (dict, list)):\n                    recurse_rules(value, rule_name)\n        elif isinstance(rule, list):\n            for item in rule:\n                recurse_rules(item, rule_name)"
                },
                {
                  "type": "PythonEntity",
                  "name": "grammar.py.collect_child_fields_from_loaded_grammar.top_level_function_definition_code",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/parser/grammar.py.collect_child_fields_from_loaded_grammar.top_level_function_definition_code",
                  "text": "",
                  "uuid": "42bb867a-a83e-4988-bda3-94d022b0959f",
                  "contents": [],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "a0fe2cc0-38d9-4d94-b62d-68988efe565f",
                  "node_type": "top_level_code",
                  "decorator": null,
                  "imports": [],
                  "source": "child_fields = {}\n\nfor name, rule in grammar['rules'].items():\n        recurse_rules(rule, name)\n\nreturn child_fields\n\n"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab4f610>",
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab4eed0>"
              ],
              "expanded_state": "unexpanded",
              "parent_uuid": "34f07125-08ae-4b65-bcde-fe4e5ae27cea",
              "node_type": "function_definition",
              "decorator": null,
              "imports": [],
              "source": "def collect_child_fields_from_loaded_grammar(grammar):\n    child_fields = {}\n\n    def recurse_rules(rule, rule_name=None):\n        if isinstance(rule, dict):\n            rule_type = rule.get('type')\n            # If the rule is a field, it could represent a child node\n            if rule_type == 'FIELD' and 'name' in rule:\n                if rule_name not in child_fields:\n                    child_fields[rule_name] = []\n                child_fields[rule_name].append(rule['name'])\n            # Recursively navigate through the rule structure\n            for key, value in rule.items():\n                if isinstance(value, (dict, list)):\n                    recurse_rules(value, rule_name)\n        elif isinstance(rule, list):\n            for item in rule:\n                recurse_rules(item, rule_name)\n\n    for name, rule in grammar['rules'].items():\n        recurse_rules(rule, name)\n\n    return child_fields"
            },
            {
              "type": "PythonEntity",
              "name": "grammar.py.collect_child_fields_with_choice_handling",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/parser/grammar.py.collect_child_fields_with_choice_handling",
              "text": "",
              "uuid": "b0ee3f71-c58b-4cdd-beb2-0315737137b5",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "grammar.py.collect_child_fields_with_choice_handling.recurse_rules",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/parser/grammar.py.collect_child_fields_with_choice_handling.recurse_rules",
                  "text": "",
                  "uuid": "84d37dff-3279-4f9c-90c2-35bb659f5380",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "grammar.py.collect_child_fields_with_choice_handling.recurse_rules.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/parser/grammar.py.collect_child_fields_with_choice_handling.recurse_rules.top_level_function_definition_code",
                      "text": "",
                      "uuid": "ae9ca957-1129-4c55-be8f-3387c9fe7367",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "84d37dff-3279-4f9c-90c2-35bb659f5380",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "if isinstance(rule, dict):\n            rule_type = rule.get('type')\n            # Directly add the names of symbols if the parent is a choice within a field\n            if rule_type == 'SYMBOL' and rule_name:\n                if rule_name not in child_fields:\n                    child_fields[rule_name] = []\n                child_fields[rule_name].append(rule['name'])\n            elif rule_type == 'FIELD':\n                field_name = rule.get('name')\n                # Handle the content of the field, especially if it is a CHOICE\n                if 'content' in rule:\n                    content = rule['content']\n                    if content.get('type') == 'CHOICE':\n                        # Dive into the choice to find all possible symbols\n                        for member in content.get('members', []):\n                            recurse_rules(member, field_name)\n                    else:\n                        recurse_rules(content, field_name)\n            # Recursively navigate through the rule structure for other types\n            for key, value in rule.items():\n                if isinstance(value, (dict, list)) and key != 'content':  # Avoid re-processing content\n                    recurse_rules(value, rule_name)\n        elif isinstance(rule, list):\n            for item in rule:\n                recurse_rules(item, rule_name)\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab58e50>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab58ed0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab58f90>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab59050>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab59110>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab59210>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab592d0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab59390>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab59450>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab591d0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab59590>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab59650>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab59710>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "b0ee3f71-c58b-4cdd-beb2-0315737137b5",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def recurse_rules(rule, rule_name=None):\n        if isinstance(rule, dict):\n            rule_type = rule.get('type')\n            # Directly add the names of symbols if the parent is a choice within a field\n            if rule_type == 'SYMBOL' and rule_name:\n                if rule_name not in child_fields:\n                    child_fields[rule_name] = []\n                child_fields[rule_name].append(rule['name'])\n            elif rule_type == 'FIELD':\n                field_name = rule.get('name')\n                # Handle the content of the field, especially if it is a CHOICE\n                if 'content' in rule:\n                    content = rule['content']\n                    if content.get('type') == 'CHOICE':\n                        # Dive into the choice to find all possible symbols\n                        for member in content.get('members', []):\n                            recurse_rules(member, field_name)\n                    else:\n                        recurse_rules(content, field_name)\n            # Recursively navigate through the rule structure for other types\n            for key, value in rule.items():\n                if isinstance(value, (dict, list)) and key != 'content':  # Avoid re-processing content\n                    recurse_rules(value, rule_name)\n        elif isinstance(rule, list):\n            for item in rule:\n                recurse_rules(item, rule_name)"
                },
                {
                  "type": "PythonEntity",
                  "name": "grammar.py.collect_child_fields_with_choice_handling.top_level_function_definition_code",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/parser/grammar.py.collect_child_fields_with_choice_handling.top_level_function_definition_code",
                  "text": "",
                  "uuid": "1331f271-49fb-4cca-8589-eee78dc6d0e1",
                  "contents": [],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "b0ee3f71-c58b-4cdd-beb2-0315737137b5",
                  "node_type": "top_level_code",
                  "decorator": null,
                  "imports": [],
                  "source": "child_fields = {}\n\nfor name, rule in grammar['rules'].items():\n        recurse_rules(rule, name)\n\nreturn child_fields\n\n"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab57910>",
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab578d0>"
              ],
              "expanded_state": "unexpanded",
              "parent_uuid": "34f07125-08ae-4b65-bcde-fe4e5ae27cea",
              "node_type": "function_definition",
              "decorator": null,
              "imports": [],
              "source": "def collect_child_fields_with_choice_handling(grammar):\n    child_fields = {}\n\n    def recurse_rules(rule, rule_name=None):\n        if isinstance(rule, dict):\n            rule_type = rule.get('type')\n            # Directly add the names of symbols if the parent is a choice within a field\n            if rule_type == 'SYMBOL' and rule_name:\n                if rule_name not in child_fields:\n                    child_fields[rule_name] = []\n                child_fields[rule_name].append(rule['name'])\n            elif rule_type == 'FIELD':\n                field_name = rule.get('name')\n                # Handle the content of the field, especially if it is a CHOICE\n                if 'content' in rule:\n                    content = rule['content']\n                    if content.get('type') == 'CHOICE':\n                        # Dive into the choice to find all possible symbols\n                        for member in content.get('members', []):\n                            recurse_rules(member, field_name)\n                    else:\n                        recurse_rules(content, field_name)\n            # Recursively navigate through the rule structure for other types\n            for key, value in rule.items():\n                if isinstance(value, (dict, list)) and key != 'content':  # Avoid re-processing content\n                    recurse_rules(value, rule_name)\n        elif isinstance(rule, list):\n            for item in rule:\n                recurse_rules(item, rule_name)\n\n    for name, rule in grammar['rules'].items():\n        recurse_rules(rule, name)\n\n    return child_fields"
            },
            {
              "type": "PythonEntity",
              "name": "grammar.py.get_python_child_field",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/parser/grammar.py.get_python_child_field",
              "text": "",
              "uuid": "0ace2f00-8f68-4518-9710-fdfae5831181",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "grammar.py.get_python_child_field.top_level_function_definition_code",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/parser/grammar.py.get_python_child_field.top_level_function_definition_code",
                  "text": "",
                  "uuid": "36b9bf20-47ca-4c57-acde-8fe9ca78d459",
                  "contents": [],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "0ace2f00-8f68-4518-9710-fdfae5831181",
                  "node_type": "top_level_code",
                  "decorator": null,
                  "imports": [],
                  "source": "return collect_child_fields_from_loaded_grammar(python_grammar).get(field_name)\n\n"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab56850>",
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab56790>"
              ],
              "expanded_state": "unexpanded",
              "parent_uuid": "34f07125-08ae-4b65-bcde-fe4e5ae27cea",
              "node_type": "function_definition",
              "decorator": null,
              "imports": [],
              "source": "def get_python_child_field(field_name):\n    return collect_child_fields_from_loaded_grammar(python_grammar).get(field_name)"
            },
            {
              "type": "PythonEntity",
              "name": "grammar.py.get_python_child_field_with_choice_handling",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/parser/grammar.py.get_python_child_field_with_choice_handling",
              "text": "",
              "uuid": "6e62ffbd-74a9-41d2-8a22-0a2885883ebf",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "grammar.py.get_python_child_field_with_choice_handling.top_level_function_definition_code",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/parser/grammar.py.get_python_child_field_with_choice_handling.top_level_function_definition_code",
                  "text": "",
                  "uuid": "9edfdb4b-a66e-46a1-9800-fac4b5c360b0",
                  "contents": [],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "6e62ffbd-74a9-41d2-8a22-0a2885883ebf",
                  "node_type": "top_level_code",
                  "decorator": null,
                  "imports": [],
                  "source": "return collect_child_fields_with_choice_handling(python_grammar).get(field_name)\n\n"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab558d0>",
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab55a50>"
              ],
              "expanded_state": "unexpanded",
              "parent_uuid": "34f07125-08ae-4b65-bcde-fe4e5ae27cea",
              "node_type": "function_definition",
              "decorator": null,
              "imports": [],
              "source": "def get_python_child_field_with_choice_handling(field_name):\n    return collect_child_fields_with_choice_handling(python_grammar).get(field_name)"
            },
            {
              "type": "PythonEntity",
              "name": "grammar.py.top_level_module_code",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/parser/grammar.py.top_level_module_code",
              "text": "",
              "uuid": "e2743af8-1576-4aa2-a0c4-9d5ff959200a",
              "contents": [],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "34f07125-08ae-4b65-bcde-fe4e5ae27cea",
              "node_type": "top_level_code",
              "decorator": null,
              "imports": [],
              "source": "import json\n\nfrom dotenv import dotenv_values\n\nimport os\n\nconfig = dotenv_values(\".env\")\n\ntry:\n    TREE_SITTER_VENDOR_PATH = config.get(\"TREE_SITTER_VENDOR_PATH\")\nexcept:\n    raise ValueError(\"TREE_SITTER_VENDOR_PATH not found in .env file\")\n\npython_grammar_file = open(os.path.join(TREE_SITTER_VENDOR_PATH, 'tree-sitter-python/src/grammar.json')).read()\n\npython_grammar = json.loads(python_grammar_file)\n\n"
            }
          ],
          "explanation": null,
          "preliminary_context": "",
          "metadata": {},
          "dependencies": [
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab5ac50>",
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab5acd0>",
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab5ad90>",
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab5ae50>",
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab5af10>",
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab5b010>",
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab5b0d0>"
          ],
          "expanded_state": "unexpanded",
          "parent_uuid": "58a2c53d-883d-43c9-be71-bb4998b57f98",
          "node_type": "module",
          "decorator": null,
          "imports": [
            "<Node type=module, start_point=(0, 0), end_point=(78, 84)>",
            "<Node type=module, start_point=(0, 0), end_point=(78, 84)>",
            "<Node type=module, start_point=(0, 0), end_point=(78, 84)>"
          ],
          "source": "import json\nfrom dotenv import dotenv_values\nimport os\n\nconfig = dotenv_values(\".env\")\n\ntry:\n    TREE_SITTER_VENDOR_PATH = config.get(\"TREE_SITTER_VENDOR_PATH\")\nexcept:\n    raise ValueError(\"TREE_SITTER_VENDOR_PATH not found in .env file\")\n\n\ndef collect_child_fields_from_loaded_grammar(grammar):\n    child_fields = {}\n\n    def recurse_rules(rule, rule_name=None):\n        if isinstance(rule, dict):\n            rule_type = rule.get('type')\n            # If the rule is a field, it could represent a child node\n            if rule_type == 'FIELD' and 'name' in rule:\n                if rule_name not in child_fields:\n                    child_fields[rule_name] = []\n                child_fields[rule_name].append(rule['name'])\n            # Recursively navigate through the rule structure\n            for key, value in rule.items():\n                if isinstance(value, (dict, list)):\n                    recurse_rules(value, rule_name)\n        elif isinstance(rule, list):\n            for item in rule:\n                recurse_rules(item, rule_name)\n\n    for name, rule in grammar['rules'].items():\n        recurse_rules(rule, name)\n\n    return child_fields\n\ndef collect_child_fields_with_choice_handling(grammar):\n    child_fields = {}\n\n    def recurse_rules(rule, rule_name=None):\n        if isinstance(rule, dict):\n            rule_type = rule.get('type')\n            # Directly add the names of symbols if the parent is a choice within a field\n            if rule_type == 'SYMBOL' and rule_name:\n                if rule_name not in child_fields:\n                    child_fields[rule_name] = []\n                child_fields[rule_name].append(rule['name'])\n            elif rule_type == 'FIELD':\n                field_name = rule.get('name')\n                # Handle the content of the field, especially if it is a CHOICE\n                if 'content' in rule:\n                    content = rule['content']\n                    if content.get('type') == 'CHOICE':\n                        # Dive into the choice to find all possible symbols\n                        for member in content.get('members', []):\n                            recurse_rules(member, field_name)\n                    else:\n                        recurse_rules(content, field_name)\n            # Recursively navigate through the rule structure for other types\n            for key, value in rule.items():\n                if isinstance(value, (dict, list)) and key != 'content':  # Avoid re-processing content\n                    recurse_rules(value, rule_name)\n        elif isinstance(rule, list):\n            for item in rule:\n                recurse_rules(item, rule_name)\n\n    for name, rule in grammar['rules'].items():\n        recurse_rules(rule, name)\n\n    return child_fields\n\npython_grammar_file = open(os.path.join(TREE_SITTER_VENDOR_PATH, 'tree-sitter-python/src/grammar.json')).read()\npython_grammar = json.loads(python_grammar_file)\n\ndef get_python_child_field(field_name):\n    return collect_child_fields_from_loaded_grammar(python_grammar).get(field_name)\n\ndef get_python_child_field_with_choice_handling(field_name):\n    return collect_child_fields_with_choice_handling(python_grammar).get(field_name)"
        },
        {
          "type": "PythonEntity",
          "name": "_build_library.py",
          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/parser/_build_library.py",
          "text": "",
          "uuid": "1183737d-3d34-44b4-919a-ca464c98323e",
          "contents": [
            {
              "type": "PythonEntity",
              "name": "_build_library.py.top_level_module_code",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/parser/_build_library.py.top_level_module_code",
              "text": "",
              "uuid": "18b7843b-d32c-4666-9d11-b09aee0c1671",
              "contents": [],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "1183737d-3d34-44b4-919a-ca464c98323e",
              "node_type": "top_level_code",
              "decorator": null,
              "imports": [],
              "source": "from tree_sitter import Language\n\nLanguage.build_library(\n    # Store the library in the `build` directory\n    \"build/my-languages.so\",\n    # Include one or more languages\n    [\n     \"vendor/tree-sitter-python\",\n     \"vendor/tree-sitter-javascript\",\n     \"vendor/tree-sitter-typescript/typescript\",\n     \"vendor/tree-sitter-typescript/tsx\",\n     \"vendor/tree-sitter-c\",\n     ],\n)\n\n"
            }
          ],
          "explanation": null,
          "preliminary_context": "",
          "metadata": {},
          "dependencies": [
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab61090>"
          ],
          "expanded_state": "unexpanded",
          "parent_uuid": "58a2c53d-883d-43c9-be71-bb4998b57f98",
          "node_type": "module",
          "decorator": null,
          "imports": [
            "<Node type=module, start_point=(0, 0), end_point=(13, 1)>"
          ],
          "source": "from tree_sitter import Language\n\nLanguage.build_library(\n    # Store the library in the `build` directory\n    \"build/my-languages.so\",\n    # Include one or more languages\n    [\n     \"vendor/tree-sitter-python\",\n     \"vendor/tree-sitter-javascript\",\n     \"vendor/tree-sitter-typescript/typescript\",\n     \"vendor/tree-sitter-typescript/tsx\",\n     \"vendor/tree-sitter-c\",\n     ],\n)"
        }
      ],
      "explanation": null,
      "preliminary_context": "",
      "metadata": {
        "num_files": 3,
        "num_folders": 1
      },
      "dependencies": [],
      "expanded_state": "expanded",
      "parent_uuid": "50206252-a034-45ed-944d-480be9d60b30"
    },
    {
      "type": "Directory",
      "name": "knowledge",
      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge",
      "text": "knowledge/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 __pycache__/\n\u251c\u2500\u2500 search.py\n\u2514\u2500\u2500 utils/\n",
      "uuid": "d60ae294-0cb4-46e3-af98-a008006014f0",
      "contents": [
        {
          "type": "PythonEntity",
          "name": "__init__.py",
          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/__init__.py",
          "text": "",
          "uuid": "492ed1cd-ae97-4c0b-b13f-8ed7489557af",
          "contents": [
            {
              "type": "PythonEntity",
              "name": "__init__.py.Knowledge",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/__init__.py.Knowledge",
              "text": "",
              "uuid": "a536611d-49a5-4cf0-917d-e7fe0d4e2589",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "__init__.py.Knowledge.__init__",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/__init__.py.Knowledge.__init__",
                  "text": "",
                  "uuid": "c73867c4-d189-4158-a003-0ce5d58e6ee5",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "__init__.py.Knowledge.__init__.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/__init__.py.Knowledge.__init__.top_level_function_definition_code",
                      "text": "",
                      "uuid": "aea6d8b9-a9ca-44d8-a08b-9386aa64be25",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "c73867c4-d189-4158-a003-0ce5d58e6ee5",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "assert os.path.isdir(absolute_path), f\"{absolute_path} is not a directory\"\n\nprelimary_context = \"This is a preliminary context\"\n\nself.root = RootDirectory(prelimary_context, absolute_path, ignored_directories)\n\nself.max_workers = max_workers\n\nif self.max_workers:\n            with ThreadPoolExecutor(max_workers=self.max_workers) as executor:\n                self.root.expand_concurrent(executor)\n        else:\n            self.root.expand()\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab660d0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab66150>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab661d0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab66290>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab66350>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "a536611d-49a5-4cf0-917d-e7fe0d4e2589",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def __init__(self, absolute_path, max_workers=None, ignored_directories=None):\n        # ensure that the path is a directory and exists\n        assert os.path.isdir(absolute_path), f\"{absolute_path} is not a directory\"\n        prelimary_context = \"This is a preliminary context\"\n        self.root = RootDirectory(prelimary_context, absolute_path, ignored_directories)\n        self.max_workers = max_workers\n\n        if self.max_workers:\n            with ThreadPoolExecutor(max_workers=self.max_workers) as executor:\n                self.root.expand_concurrent(executor)\n        else:\n            self.root.expand()"
                },
                {
                  "type": "PythonEntity",
                  "name": "__init__.py.Knowledge.search_for_entity",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/__init__.py.Knowledge.search_for_entity",
                  "text": "",
                  "uuid": "e5ebb86b-bce7-4740-a213-6abfd1767f57",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "__init__.py.Knowledge.search_for_entity.dfs",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/__init__.py.Knowledge.search_for_entity.dfs",
                      "text": "",
                      "uuid": "4c1ff2d9-599d-4daf-bf29-34de48db41a9",
                      "contents": [
                        {
                          "type": "PythonEntity",
                          "name": "__init__.py.Knowledge.search_for_entity.dfs.top_level_function_definition_code",
                          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/__init__.py.Knowledge.search_for_entity.dfs.top_level_function_definition_code",
                          "text": "",
                          "uuid": "c67a07bf-f73b-40f3-8ba1-5fa32162dc95",
                          "contents": [],
                          "explanation": null,
                          "preliminary_context": "",
                          "metadata": {},
                          "dependencies": [],
                          "expanded_state": "unexpanded",
                          "parent_uuid": "4c1ff2d9-599d-4daf-bf29-34de48db41a9",
                          "node_type": "top_level_code",
                          "decorator": null,
                          "imports": [],
                          "source": "if entity.name == entity_name:\n                found_entities.append(entity)\n\n# Base case: return if entity does not have contents or contents is empty\n\nif not hasattr(entity, 'contents') or not entity.contents:\n                return\n\nfor sub_entity in entity.contents:\n                dfs(sub_entity, entity_name)\n\n"
                        }
                      ],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab67050>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab670d0>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab67190>"
                      ],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "e5ebb86b-bce7-4740-a213-6abfd1767f57",
                      "node_type": "function_definition",
                      "decorator": null,
                      "imports": [],
                      "source": "def dfs(entity, entity_name):\n            if entity.name == entity_name:\n                found_entities.append(entity)\n            # Base case: return if entity does not have contents or contents is empty\n            if not hasattr(entity, 'contents') or not entity.contents:\n                return\n            for sub_entity in entity.contents:\n                dfs(sub_entity, entity_name)"
                    },
                    {
                      "type": "PythonEntity",
                      "name": "__init__.py.Knowledge.search_for_entity.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/__init__.py.Knowledge.search_for_entity.top_level_function_definition_code",
                      "text": "",
                      "uuid": "dd6560eb-d926-466d-a2e6-d275767fdacf",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "e5ebb86b-bce7-4740-a213-6abfd1767f57",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "found_entities = []\n\ndfs(self.root, entity_name)\n\nreturn found_entities\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab64590>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "a536611d-49a5-4cf0-917d-e7fe0d4e2589",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def search_for_entity(self, entity_name: str):\n        found_entities = []\n\n        def dfs(entity, entity_name):\n            if entity.name == entity_name:\n                found_entities.append(entity)\n            # Base case: return if entity does not have contents or contents is empty\n            if not hasattr(entity, 'contents') or not entity.contents:\n                return\n            for sub_entity in entity.contents:\n                dfs(sub_entity, entity_name)\n\n        dfs(self.root, entity_name)\n        return found_entities"
                },
                {
                  "type": "PythonEntity",
                  "name": "__init__.py.Knowledge.get_entitiy_with_path",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/__init__.py.Knowledge.get_entitiy_with_path",
                  "text": "",
                  "uuid": "b8817ed6-e6c5-4f43-a7e4-2826ac651756",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "__init__.py.Knowledge.get_entitiy_with_path.dfs",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/__init__.py.Knowledge.get_entitiy_with_path.dfs",
                      "text": "",
                      "uuid": "0b2e7015-6509-43fe-85cf-aa00d5fca74e",
                      "contents": [
                        {
                          "type": "PythonEntity",
                          "name": "__init__.py.Knowledge.get_entitiy_with_path.dfs.top_level_function_definition_code",
                          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/__init__.py.Knowledge.get_entitiy_with_path.dfs.top_level_function_definition_code",
                          "text": "",
                          "uuid": "312d6b8b-ba7f-4130-9ca6-d27cb1775dd1",
                          "contents": [],
                          "explanation": null,
                          "preliminary_context": "",
                          "metadata": {},
                          "dependencies": [],
                          "expanded_state": "unexpanded",
                          "parent_uuid": "0b2e7015-6509-43fe-85cf-aa00d5fca74e",
                          "node_type": "top_level_code",
                          "decorator": null,
                          "imports": [],
                          "source": "if entity.get_absolute_path() == entity_path:\n                return entity\n\n# Base case: return if entity does not have contents or contents is empty\n\nif not hasattr(entity, 'contents') or not entity.contents:\n                return\n\nfor sub_entity in entity.contents:\n                dfs(sub_entity, entity_path)\n\n"
                        }
                      ],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab6cc50>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab6ccd0>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab6cd90>"
                      ],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "b8817ed6-e6c5-4f43-a7e4-2826ac651756",
                      "node_type": "function_definition",
                      "decorator": null,
                      "imports": [],
                      "source": "def dfs(entity, entity_path):\n            if entity.get_absolute_path() == entity_path:\n                return entity\n            # Base case: return if entity does not have contents or contents is empty\n            if not hasattr(entity, 'contents') or not entity.contents:\n                return\n            for sub_entity in entity.contents:\n                dfs(sub_entity, entity_path)"
                    },
                    {
                      "type": "PythonEntity",
                      "name": "__init__.py.Knowledge.get_entitiy_with_path.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/__init__.py.Knowledge.get_entitiy_with_path.top_level_function_definition_code",
                      "text": "",
                      "uuid": "9fb87246-34a5-46b6-8456-057de046398d",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "b8817ed6-e6c5-4f43-a7e4-2826ac651756",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "entity_path = os.path.join(full_path, file_path)\n\nreturn dfs(self.root, entity_path)\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab6c3d0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab6c450>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "a536611d-49a5-4cf0-917d-e7fe0d4e2589",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def get_entitiy_with_path(self, full_path: str, file_path: str):\n        entity_path = os.path.join(full_path, file_path)\n        \n        def dfs(entity, entity_path):\n            if entity.get_absolute_path() == entity_path:\n                return entity\n            # Base case: return if entity does not have contents or contents is empty\n            if not hasattr(entity, 'contents') or not entity.contents:\n                return\n            for sub_entity in entity.contents:\n                dfs(sub_entity, entity_path)\n\n        return dfs(self.root, entity_path)"
                },
                {
                  "type": "PythonEntity",
                  "name": "__init__.py.Knowledge.to_json",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/__init__.py.Knowledge.to_json",
                  "text": "",
                  "uuid": "429889b8-f466-4971-b73f-9a0c21b14c07",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "__init__.py.Knowledge.to_json.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/__init__.py.Knowledge.to_json.top_level_function_definition_code",
                      "text": "",
                      "uuid": "b7ff336c-2cca-4fd6-b1f9-ce4ff45b08e8",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "429889b8-f466-4971-b73f-9a0c21b14c07",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "json_str = json.dumps(self.root, cls=CustomEncoder, indent=2)\n\nreturn json_str\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab6dc10>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "a536611d-49a5-4cf0-917d-e7fe0d4e2589",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def to_json(self):\n        json_str = json.dumps(self.root, cls=CustomEncoder, indent=2)\n        return json_str"
                },
                {
                  "type": "PythonEntity",
                  "name": "__init__.py.Knowledge.show_graph",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/__init__.py.Knowledge.show_graph",
                  "text": "",
                  "uuid": "dd9a99c9-5e0e-45c9-a706-3cd926a97480",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "__init__.py.Knowledge.show_graph.build_graph",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/__init__.py.Knowledge.show_graph.build_graph",
                      "text": "",
                      "uuid": "66d6224b-37ce-471f-9785-1f0b101f2c04",
                      "contents": [
                        {
                          "type": "PythonEntity",
                          "name": "__init__.py.Knowledge.show_graph.build_graph.top_level_function_definition_code",
                          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/__init__.py.Knowledge.show_graph.build_graph.top_level_function_definition_code",
                          "text": "",
                          "uuid": "5e0245f8-1d90-4ac9-acf0-9656d2d97460",
                          "contents": [],
                          "explanation": null,
                          "preliminary_context": "",
                          "metadata": {},
                          "dependencies": [],
                          "expanded_state": "unexpanded",
                          "parent_uuid": "66d6224b-37ce-471f-9785-1f0b101f2c04",
                          "node_type": "top_level_code",
                          "decorator": null,
                          "imports": [],
                          "source": "if graph is None:\n                graph = nx.DiGraph()\n\nif entity is not None:\n                graph.add_node(entity.absolute_path, label=f\"{entity.name} ({entity.get_type()}) {entity.metadata['file_size'] if entity.metadata.get('file_size') else ''}\")\n                if entity.parent:\n                    graph.add_edge(entity.parent.absolute_path, entity.absolute_path)\n\n                if hasattr(entity, 'contents') and entity.contents:\n                    for sub_entity in entity.contents:\n                        build_graph(sub_entity, graph)\n\nreturn graph\n\n"
                        }
                      ],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab73b90>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab73c10>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab73cd0>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab73d90>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab73e50>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab73f50>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab78050>"
                      ],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "dd9a99c9-5e0e-45c9-a706-3cd926a97480",
                      "node_type": "function_definition",
                      "decorator": null,
                      "imports": [],
                      "source": "def build_graph(entity, graph=None):\n            if graph is None:\n                graph = nx.DiGraph()\n\n            if entity is not None:\n                graph.add_node(entity.absolute_path, label=f\"{entity.name} ({entity.get_type()}) {entity.metadata['file_size'] if entity.metadata.get('file_size') else ''}\")\n                if entity.parent:\n                    graph.add_edge(entity.parent.absolute_path, entity.absolute_path)\n\n                if hasattr(entity, 'contents') and entity.contents:\n                    for sub_entity in entity.contents:\n                        build_graph(sub_entity, graph)\n\n            return graph"
                    },
                    {
                      "type": "PythonEntity",
                      "name": "__init__.py.Knowledge.show_graph.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/__init__.py.Knowledge.show_graph.top_level_function_definition_code",
                      "text": "",
                      "uuid": "939e2ff9-3c0c-482b-9bbc-167d3348f47a",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "dd9a99c9-5e0e-45c9-a706-3cd926a97480",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "# Assuming `knowledge` is an instance of your Knowledge class\n\nkg_graph = build_graph(self.root)\n\nplt.figure(figsize=(30, 20))\n\n# Drawing the graph\n\n# Adjust these parameters as needed\n\nscale_factor = 100\n\n# Increase as needed\n\noptimal_node_distance = 2\n\n# Increase as needed\n\nlayout_iterations = 500\n\n# Increase as needed\n\npos = nx.spring_layout(kg_graph, scale=scale_factor, k=optimal_node_distance, iterations=layout_iterations)\n\nnx.draw(kg_graph, pos, with_labels=True, labels=nx.get_node_attributes(kg_graph, 'label'), font_size=25)\n\nplt.show()\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab7a410>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab7a490>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab7a550>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab7a610>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab7a6d0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab7a7d0>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "a536611d-49a5-4cf0-917d-e7fe0d4e2589",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def show_graph(self):\n        def build_graph(entity, graph=None):\n            if graph is None:\n                graph = nx.DiGraph()\n\n            if entity is not None:\n                graph.add_node(entity.absolute_path, label=f\"{entity.name} ({entity.get_type()}) {entity.metadata['file_size'] if entity.metadata.get('file_size') else ''}\")\n                if entity.parent:\n                    graph.add_edge(entity.parent.absolute_path, entity.absolute_path)\n\n                if hasattr(entity, 'contents') and entity.contents:\n                    for sub_entity in entity.contents:\n                        build_graph(sub_entity, graph)\n\n            return graph\n\n        # Assuming `knowledge` is an instance of your Knowledge class\n        kg_graph = build_graph(self.root)\n\n        plt.figure(figsize=(30, 20))\n\n        # Drawing the graph\n        # Adjust these parameters as needed\n        scale_factor = 100  # Increase as needed\n        optimal_node_distance = 2  # Increase as needed\n        layout_iterations = 500  # Increase as needed\n\n        pos = nx.spring_layout(kg_graph, scale=scale_factor, k=optimal_node_distance, iterations=layout_iterations)\n        nx.draw(kg_graph, pos, with_labels=True, labels=nx.get_node_attributes(kg_graph, 'label'), font_size=25)\n        plt.show()"
                },
                {
                  "type": "PythonEntity",
                  "name": "__init__.py.Knowledge._flatten_tree",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/__init__.py.Knowledge._flatten_tree",
                  "text": "",
                  "uuid": "b4311926-451b-4f86-bc01-e3e7f5fb70c5",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "__init__.py.Knowledge._flatten_tree._flatten",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/__init__.py.Knowledge._flatten_tree._flatten",
                      "text": "",
                      "uuid": "723ed19e-8953-40b6-bf54-7b84521081e4",
                      "contents": [
                        {
                          "type": "PythonEntity",
                          "name": "__init__.py.Knowledge._flatten_tree._flatten.top_level_function_definition_code",
                          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/__init__.py.Knowledge._flatten_tree._flatten.top_level_function_definition_code",
                          "text": "",
                          "uuid": "6a85c0e3-c22b-423c-a709-feee2090750e",
                          "contents": [],
                          "explanation": null,
                          "preliminary_context": "",
                          "metadata": {},
                          "dependencies": [],
                          "expanded_state": "unexpanded",
                          "parent_uuid": "723ed19e-8953-40b6-bf54-7b84521081e4",
                          "node_type": "top_level_code",
                          "decorator": null,
                          "imports": [],
                          "source": "names.append(node.name)\n\nparents.append(node.parent.name if node.parent else \"\")\n\nfor child in node.contents:\n                _flatten(child)\n\n"
                        }
                      ],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab7bbd0>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab7bc50>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab7bd10>"
                      ],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "b4311926-451b-4f86-bc01-e3e7f5fb70c5",
                      "node_type": "function_definition",
                      "decorator": null,
                      "imports": [],
                      "source": "def _flatten(node):\n            names.append(node.name)\n            parents.append(node.parent.name if node.parent else \"\")\n            for child in node.contents:\n                _flatten(child)"
                    },
                    {
                      "type": "PythonEntity",
                      "name": "__init__.py.Knowledge._flatten_tree.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/__init__.py.Knowledge._flatten_tree.top_level_function_definition_code",
                      "text": "",
                      "uuid": "cd6fba35-e4e5-49dd-8216-6ea85e051ece",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "b4311926-451b-4f86-bc01-e3e7f5fb70c5",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "\"\"\"Flatten the tree for Plotly's Treemap.\"\"\"\n\nnames = []\n\nparents = []\n\n_flatten(root)\n\nreturn names, parents\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab7c790>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "a536611d-49a5-4cf0-917d-e7fe0d4e2589",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def _flatten_tree(self, root):\n        \"\"\"Flatten the tree for Plotly's Treemap.\"\"\"\n        names = []\n        parents = []\n\n        def _flatten(node):\n            names.append(node.name)\n            parents.append(node.parent.name if node.parent else \"\")\n            for child in node.contents:\n                _flatten(child)\n\n        _flatten(root)\n        return names, parents"
                },
                {
                  "type": "PythonEntity",
                  "name": "__init__.py.Knowledge.show_treemap",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/__init__.py.Knowledge.show_treemap",
                  "text": "",
                  "uuid": "11bf5a1d-1447-467a-b2bd-8f72ea242dcf",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "__init__.py.Knowledge.show_treemap.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/__init__.py.Knowledge.show_treemap.top_level_function_definition_code",
                      "text": "",
                      "uuid": "d5742669-d77f-4fb8-9983-4f6d4c02d299",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "11bf5a1d-1447-467a-b2bd-8f72ea242dcf",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "flattened_tree = self._flatten_tree(self.root)\n\ndf = pd.DataFrame(flattened_tree)\n\n# Now create a Plotly treemap\n\nfig = px.treemap(df, path=['parents', 'names'],\n                        color_continuous_scale='RdBu')\n\nfig.update_layout(margin=dict(t=50, l=25, r=25, b=25))\n\nfile_path = 'temp_plot.html'\n\nfig.write_html(file_path)\n\nif not html:\n            fig.show()\n            \n        else:\n    \n            import webbrowser\n            # Open the HTML file in the default web browser\n            webbrowser.open('file://' + os.path.realpath(file_path))\n\nreturn flattened_tree\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab816d0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab81750>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab81810>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab818d0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab81990>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab81a90>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab81b50>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab81c10>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab81cd0>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "a536611d-49a5-4cf0-917d-e7fe0d4e2589",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def show_treemap(self, html=False):\n        # Assuming self.root is the root of your tree\n        # flat_data = self._flatten_tree(self.root)\n        \n\n        # # Convert the flat data into a DataFrame\n        # df = pd.DataFrame(flat_data)\n        # df['all'] = 'all'\n\n        flattened_tree = self._flatten_tree(self.root)\n    \n        df = pd.DataFrame(flattened_tree)\n        # Now create a Plotly treemap\n        fig = px.treemap(df, path=['parents', 'names'],\n                        color_continuous_scale='RdBu')\n        fig.update_layout(margin=dict(t=50, l=25, r=25, b=25))\n\n        file_path = 'temp_plot.html'\n        fig.write_html(file_path)\n        \n        if not html:\n            fig.show()\n            \n        else:\n    \n            import webbrowser\n            # Open the HTML file in the default web browser\n            webbrowser.open('file://' + os.path.realpath(file_path))\n\n        return flattened_tree"
                },
                {
                  "type": "PythonEntity",
                  "name": "__init__.py.Knowledge.show",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/__init__.py.Knowledge.show",
                  "text": "",
                  "uuid": "0c9058a1-7957-4fab-ad3b-6d8aa0de0913",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "__init__.py.Knowledge.show.build_tree",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/__init__.py.Knowledge.show.build_tree",
                      "text": "",
                      "uuid": "045d143f-811e-4c5c-a6e1-84686ff9a396",
                      "contents": [
                        {
                          "type": "PythonEntity",
                          "name": "__init__.py.Knowledge.show.build_tree.top_level_function_definition_code",
                          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/__init__.py.Knowledge.show.build_tree.top_level_function_definition_code",
                          "text": "",
                          "uuid": "2e7fe582-e697-449e-9746-8252022c9cec",
                          "contents": [],
                          "explanation": null,
                          "preliminary_context": "",
                          "metadata": {},
                          "dependencies": [],
                          "expanded_state": "unexpanded",
                          "parent_uuid": "045d143f-811e-4c5c-a6e1-84686ff9a396",
                          "node_type": "top_level_code",
                          "decorator": null,
                          "imports": [],
                          "source": "if entity is not None:\n                node_label = f\"{entity.name} ({entity.get_type()}) {entity.metadata['file_size'] if entity.metadata.get('file_size') else ''}\"\n                child = ete_node.add_child(name=node_label)\n                \n                # Add each attribute of the entity as a feature\n                for attr, value in vars(entity).items():\n                    child.add_features(**{attr: str(value)})\n\n\n                # Customize node style here (general style)\n                nstyle = NodeStyle()\n                nstyle[\"fgcolor\"] = \"blue\"\n                nstyle[\"size\"] = 10\n                nstyle[\"shape\"] = \"circle\"\n                child.set_style(nstyle)\n\n                if hasattr(entity, 'contents') and entity.contents:\n                    for sub_entity in entity.contents:\n                        build_tree(sub_entity, child)\n\n                # Check if the current node has multiple children\n                if not (len(child.get_children()) == 0):\n                    # Customize the node to indicate it has multiple children\n                    multi_child_style = NodeStyle()\n                    # multi_child_style[\"fgcolor\"] = \"red\"\n                    # multi_child_style[\"size\"] = 15\n                    # multi_child_style[\"shape\"] = \"square\"\n                    child.set_style(multi_child_style)\n                    # Add a special label using TextFace\n                    child.add_face(TextFace(f\"{node_label}\", fsize=10), column=0)\n\n"
                        }
                      ],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab8afd0>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab8b050>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab8b110>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab8b1d0>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab8b290>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab8b390>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab8b450>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab8b510>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab8b5d0>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab8b350>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab8b710>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab8b7d0>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab8b890>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab8b950>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab8ba10>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab8bad0>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab8bb90>"
                      ],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "0c9058a1-7957-4fab-ad3b-6d8aa0de0913",
                      "node_type": "function_definition",
                      "decorator": null,
                      "imports": [],
                      "source": "def build_tree(entity, ete_node):\n            if entity is not None:\n                node_label = f\"{entity.name} ({entity.get_type()}) {entity.metadata['file_size'] if entity.metadata.get('file_size') else ''}\"\n                child = ete_node.add_child(name=node_label)\n                \n                # Add each attribute of the entity as a feature\n                for attr, value in vars(entity).items():\n                    child.add_features(**{attr: str(value)})\n\n\n                # Customize node style here (general style)\n                nstyle = NodeStyle()\n                nstyle[\"fgcolor\"] = \"blue\"\n                nstyle[\"size\"] = 10\n                nstyle[\"shape\"] = \"circle\"\n                child.set_style(nstyle)\n\n                if hasattr(entity, 'contents') and entity.contents:\n                    for sub_entity in entity.contents:\n                        build_tree(sub_entity, child)\n\n                # Check if the current node has multiple children\n                if not (len(child.get_children()) == 0):\n                    # Customize the node to indicate it has multiple children\n                    multi_child_style = NodeStyle()\n                    # multi_child_style[\"fgcolor\"] = \"red\"\n                    # multi_child_style[\"size\"] = 15\n                    # multi_child_style[\"shape\"] = \"square\"\n                    child.set_style(multi_child_style)\n                    # Add a special label using TextFace\n                    child.add_face(TextFace(f\"{node_label}\", fsize=10), column=0)"
                    },
                    {
                      "type": "PythonEntity",
                      "name": "__init__.py.Knowledge.show.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/__init__.py.Knowledge.show.top_level_function_definition_code",
                      "text": "",
                      "uuid": "ac0a05e6-e273-4c5e-b557-0191b8f1a85f",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "0c9058a1-7957-4fab-ad3b-6d8aa0de0913",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "# Create the base ETE tree node\n\nbase_tree = Tree()\n\nbase_node = base_tree.add_child(name=\"Root\")\n\n# Build the tree\n\nbuild_tree(self.root, base_node)\n\n# Tree style customization\n\nts = TreeStyle()\n\nts.show_leaf_name = True\n\nts.mode = \"r\"\n\n# Change to \"r\" for rectangular mode\n\nts.scale = 20\n\n# Show the tree\n\nbase_tree.show(tree_style=ts)\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab83f50>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab81a50>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab83390>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab83490>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab834d0>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "a536611d-49a5-4cf0-917d-e7fe0d4e2589",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def show(self):\n        def build_tree(entity, ete_node):\n            if entity is not None:\n                node_label = f\"{entity.name} ({entity.get_type()}) {entity.metadata['file_size'] if entity.metadata.get('file_size') else ''}\"\n                child = ete_node.add_child(name=node_label)\n                \n                # Add each attribute of the entity as a feature\n                for attr, value in vars(entity).items():\n                    child.add_features(**{attr: str(value)})\n\n\n                # Customize node style here (general style)\n                nstyle = NodeStyle()\n                nstyle[\"fgcolor\"] = \"blue\"\n                nstyle[\"size\"] = 10\n                nstyle[\"shape\"] = \"circle\"\n                child.set_style(nstyle)\n\n                if hasattr(entity, 'contents') and entity.contents:\n                    for sub_entity in entity.contents:\n                        build_tree(sub_entity, child)\n\n                # Check if the current node has multiple children\n                if not (len(child.get_children()) == 0):\n                    # Customize the node to indicate it has multiple children\n                    multi_child_style = NodeStyle()\n                    # multi_child_style[\"fgcolor\"] = \"red\"\n                    # multi_child_style[\"size\"] = 15\n                    # multi_child_style[\"shape\"] = \"square\"\n                    child.set_style(multi_child_style)\n                    # Add a special label using TextFace\n                    child.add_face(TextFace(f\"{node_label}\", fsize=10), column=0)\n\n        # Create the base ETE tree node\n        base_tree = Tree()\n        base_node = base_tree.add_child(name=\"Root\")\n\n        # Build the tree\n        build_tree(self.root, base_node)\n\n        # Tree style customization\n        ts = TreeStyle()\n        ts.show_leaf_name = True\n        ts.mode = \"r\" # Change to \"r\" for rectangular mode\n        ts.scale = 20\n\n        # Show the tree\n        base_tree.show(tree_style=ts)"
                },
                {
                  "type": "PythonEntity",
                  "name": "__init__.py.Knowledge.top_level_class_definition_code",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/__init__.py.Knowledge.top_level_class_definition_code",
                  "text": "",
                  "uuid": "cd1f33ee-70f8-4b29-b93f-e4710d5b7eff",
                  "contents": [],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "a536611d-49a5-4cf0-917d-e7fe0d4e2589",
                  "node_type": "top_level_code",
                  "decorator": null,
                  "imports": [],
                  "source": "# def get_relative_path(self, entity: Entity):\n\n#     relative_path = os.path.relpath(entity.absolute_path, start=self.root.absolute_path)\n\n#     # Prepend the root directory name\n\n#     root_directory_name = \"conversational_codebase\"\n\n#     relative_path_with_root = os.path.join(root_directory_name, relative_path)\n\n#     return relative_path_with_root\n\n# def _flatten_tree(self, node=None):\n\n#     if node is None:\n\n#         node = self.root\n\n#     flat_list = []\n\n#     # Use the get_relative_path method to obtain the full path\n\n#     full_path = node.get_relative_path()\n\n#     # Split the path to get individual components\n\n#     path_components = full_path.split('/')\n\n#     # For each component in the path, create an entry in flat_list\n\n#     for i in range(len(path_components)):\n\n#         node_info = {\n\n#             'name': path_components[i],\n\n#             'parent': path_components[i-1] if i > 0 else \"\"\n\n#         }\n\n#         flat_list.append(node_info)\n\n#     if hasattr(node, 'contents') and node.contents:\n\n#         for child in node.contents:\n\n#             flat_list.extend(self._flatten_tree(child))\n\n#     return flat_list\n\n"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "492ed1cd-ae97-4c0b-b13f-8ed7489557af",
              "node_type": "class_definition",
              "decorator": null,
              "imports": [],
              "source": "class Knowledge:\n    def __init__(self, absolute_path, max_workers=None, ignored_directories=None):\n        # ensure that the path is a directory and exists\n        assert os.path.isdir(absolute_path), f\"{absolute_path} is not a directory\"\n        prelimary_context = \"This is a preliminary context\"\n        self.root = RootDirectory(prelimary_context, absolute_path, ignored_directories)\n        self.max_workers = max_workers\n\n        if self.max_workers:\n            with ThreadPoolExecutor(max_workers=self.max_workers) as executor:\n                self.root.expand_concurrent(executor)\n        else:\n            self.root.expand()\n\n    # def get_relative_path(self, entity: Entity):\n    #     relative_path = os.path.relpath(entity.absolute_path, start=self.root.absolute_path)\n\n    #     # Prepend the root directory name\n    #     root_directory_name = \"conversational_codebase\"\n    #     relative_path_with_root = os.path.join(root_directory_name, relative_path)\n        \n    #     return relative_path_with_root\n            \n    def search_for_entity(self, entity_name: str):\n        found_entities = []\n\n        def dfs(entity, entity_name):\n            if entity.name == entity_name:\n                found_entities.append(entity)\n            # Base case: return if entity does not have contents or contents is empty\n            if not hasattr(entity, 'contents') or not entity.contents:\n                return\n            for sub_entity in entity.contents:\n                dfs(sub_entity, entity_name)\n\n        dfs(self.root, entity_name)\n        return found_entities\n    \n    def get_entitiy_with_path(self, full_path: str, file_path: str):\n        entity_path = os.path.join(full_path, file_path)\n        \n        def dfs(entity, entity_path):\n            if entity.get_absolute_path() == entity_path:\n                return entity\n            # Base case: return if entity does not have contents or contents is empty\n            if not hasattr(entity, 'contents') or not entity.contents:\n                return\n            for sub_entity in entity.contents:\n                dfs(sub_entity, entity_path)\n\n        return dfs(self.root, entity_path)\n    \n    def to_json(self):\n        json_str = json.dumps(self.root, cls=CustomEncoder, indent=2)\n        return json_str\n    \n    \n    def show_graph(self):\n        def build_graph(entity, graph=None):\n            if graph is None:\n                graph = nx.DiGraph()\n\n            if entity is not None:\n                graph.add_node(entity.absolute_path, label=f\"{entity.name} ({entity.get_type()}) {entity.metadata['file_size'] if entity.metadata.get('file_size') else ''}\")\n                if entity.parent:\n                    graph.add_edge(entity.parent.absolute_path, entity.absolute_path)\n\n                if hasattr(entity, 'contents') and entity.contents:\n                    for sub_entity in entity.contents:\n                        build_graph(sub_entity, graph)\n\n            return graph\n\n        # Assuming `knowledge` is an instance of your Knowledge class\n        kg_graph = build_graph(self.root)\n\n        plt.figure(figsize=(30, 20))\n\n        # Drawing the graph\n        # Adjust these parameters as needed\n        scale_factor = 100  # Increase as needed\n        optimal_node_distance = 2  # Increase as needed\n        layout_iterations = 500  # Increase as needed\n\n        pos = nx.spring_layout(kg_graph, scale=scale_factor, k=optimal_node_distance, iterations=layout_iterations)\n        nx.draw(kg_graph, pos, with_labels=True, labels=nx.get_node_attributes(kg_graph, 'label'), font_size=25)\n        plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    # def _flatten_tree(self, node=None):\n    #     if node is None:\n    #         node = self.root\n\n    #     flat_list = []\n    #     # Use the get_relative_path method to obtain the full path\n    #     full_path = node.get_relative_path()\n    #     # Split the path to get individual components\n    #     path_components = full_path.split('/')\n\n    #     # For each component in the path, create an entry in flat_list\n    #     for i in range(len(path_components)):\n    #         node_info = {\n    #             'name': path_components[i],\n    #             'parent': path_components[i-1] if i > 0 else \"\"\n    #         }\n    #         flat_list.append(node_info)\n\n    #     if hasattr(node, 'contents') and node.contents:\n    #         for child in node.contents:\n    #             flat_list.extend(self._flatten_tree(child))\n\n\n    #     return flat_list\n    \n    def _flatten_tree(self, root):\n        \"\"\"Flatten the tree for Plotly's Treemap.\"\"\"\n        names = []\n        parents = []\n\n        def _flatten(node):\n            names.append(node.name)\n            parents.append(node.parent.name if node.parent else \"\")\n            for child in node.contents:\n                _flatten(child)\n\n        _flatten(root)\n        return names, parents\n\n    def show_treemap(self, html=False):\n        # Assuming self.root is the root of your tree\n        # flat_data = self._flatten_tree(self.root)\n        \n\n        # # Convert the flat data into a DataFrame\n        # df = pd.DataFrame(flat_data)\n        # df['all'] = 'all'\n\n        flattened_tree = self._flatten_tree(self.root)\n    \n        df = pd.DataFrame(flattened_tree)\n        # Now create a Plotly treemap\n        fig = px.treemap(df, path=['parents', 'names'],\n                        color_continuous_scale='RdBu')\n        fig.update_layout(margin=dict(t=50, l=25, r=25, b=25))\n\n        file_path = 'temp_plot.html'\n        fig.write_html(file_path)\n        \n        if not html:\n            fig.show()\n            \n        else:\n    \n            import webbrowser\n            # Open the HTML file in the default web browser\n            webbrowser.open('file://' + os.path.realpath(file_path))\n\n        return flattened_tree\n\n\n    def show(self):\n        def build_tree(entity, ete_node):\n            if entity is not None:\n                node_label = f\"{entity.name} ({entity.get_type()}) {entity.metadata['file_size'] if entity.metadata.get('file_size') else ''}\"\n                child = ete_node.add_child(name=node_label)\n                \n                # Add each attribute of the entity as a feature\n                for attr, value in vars(entity).items():\n                    child.add_features(**{attr: str(value)})\n\n\n                # Customize node style here (general style)\n                nstyle = NodeStyle()\n                nstyle[\"fgcolor\"] = \"blue\"\n                nstyle[\"size\"] = 10\n                nstyle[\"shape\"] = \"circle\"\n                child.set_style(nstyle)\n\n                if hasattr(entity, 'contents') and entity.contents:\n                    for sub_entity in entity.contents:\n                        build_tree(sub_entity, child)\n\n                # Check if the current node has multiple children\n                if not (len(child.get_children()) == 0):\n                    # Customize the node to indicate it has multiple children\n                    multi_child_style = NodeStyle()\n                    # multi_child_style[\"fgcolor\"] = \"red\"\n                    # multi_child_style[\"size\"] = 15\n                    # multi_child_style[\"shape\"] = \"square\"\n                    child.set_style(multi_child_style)\n                    # Add a special label using TextFace\n                    child.add_face(TextFace(f\"{node_label}\", fsize=10), column=0)\n\n        # Create the base ETE tree node\n        base_tree = Tree()\n        base_node = base_tree.add_child(name=\"Root\")\n\n        # Build the tree\n        build_tree(self.root, base_node)\n\n        # Tree style customization\n        ts = TreeStyle()\n        ts.show_leaf_name = True\n        ts.mode = \"r\" # Change to \"r\" for rectangular mode\n        ts.scale = 20\n\n        # Show the tree\n        base_tree.show(tree_style=ts)"
            },
            {
              "type": "PythonEntity",
              "name": "__init__.py.top_level_module_code",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/__init__.py.top_level_module_code",
              "text": "",
              "uuid": "5d1ddf2c-cc9e-46d1-b602-b0041c3bc985",
              "contents": [],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "492ed1cd-ae97-4c0b-b13f-8ed7489557af",
              "node_type": "top_level_code",
              "decorator": null,
              "imports": [],
              "source": "from concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor\n\nimport re\n\nfrom matplotlib.cbook import flatten\n\nimport networkx as nx\n\nfrom conversational_codebase.entities.directory import RootDirectory\n\nfrom ete3 import Tree, TreeStyle, NodeStyle, AttrFace, TextFace\n\nimport matplotlib.pyplot as plt\n\nimport os\n\nimport json\n\nfrom conversational_codebase.entities import CustomEncoder\n\nimport pandas as pd\n\nimport plotly.express as px\n\n"
            }
          ],
          "explanation": null,
          "preliminary_context": "",
          "metadata": {},
          "dependencies": [],
          "expanded_state": "unexpanded",
          "parent_uuid": "d60ae294-0cb4-46e3-af98-a008006014f0",
          "node_type": "module",
          "decorator": null,
          "imports": [
            "<Node type=module, start_point=(0, 0), end_point=(249, 0)>",
            "<Node type=module, start_point=(0, 0), end_point=(249, 0)>",
            "<Node type=module, start_point=(0, 0), end_point=(249, 0)>",
            "<Node type=module, start_point=(0, 0), end_point=(249, 0)>",
            "<Node type=module, start_point=(0, 0), end_point=(249, 0)>",
            "<Node type=module, start_point=(0, 0), end_point=(249, 0)>",
            "<Node type=module, start_point=(0, 0), end_point=(249, 0)>",
            "<Node type=module, start_point=(0, 0), end_point=(249, 0)>",
            "<Node type=module, start_point=(0, 0), end_point=(249, 0)>",
            "<Node type=module, start_point=(0, 0), end_point=(249, 0)>",
            "<Node type=module, start_point=(0, 0), end_point=(249, 0)>",
            "<Node type=module, start_point=(0, 0), end_point=(249, 0)>"
          ],
          "source": "from concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor\nimport re\nfrom matplotlib.cbook import flatten\n\nimport networkx as nx\nfrom conversational_codebase.entities.directory import RootDirectory\nfrom ete3 import Tree, TreeStyle, NodeStyle, AttrFace, TextFace\nimport matplotlib.pyplot as plt\nimport os\nimport json\n\nfrom conversational_codebase.entities import CustomEncoder\n\nimport pandas as pd\nimport plotly.express as px\n\n\nclass Knowledge:\n    def __init__(self, absolute_path, max_workers=None, ignored_directories=None):\n        # ensure that the path is a directory and exists\n        assert os.path.isdir(absolute_path), f\"{absolute_path} is not a directory\"\n        prelimary_context = \"This is a preliminary context\"\n        self.root = RootDirectory(prelimary_context, absolute_path, ignored_directories)\n        self.max_workers = max_workers\n\n        if self.max_workers:\n            with ThreadPoolExecutor(max_workers=self.max_workers) as executor:\n                self.root.expand_concurrent(executor)\n        else:\n            self.root.expand()\n\n    # def get_relative_path(self, entity: Entity):\n    #     relative_path = os.path.relpath(entity.absolute_path, start=self.root.absolute_path)\n\n    #     # Prepend the root directory name\n    #     root_directory_name = \"conversational_codebase\"\n    #     relative_path_with_root = os.path.join(root_directory_name, relative_path)\n        \n    #     return relative_path_with_root\n            \n    def search_for_entity(self, entity_name: str):\n        found_entities = []\n\n        def dfs(entity, entity_name):\n            if entity.name == entity_name:\n                found_entities.append(entity)\n            # Base case: return if entity does not have contents or contents is empty\n            if not hasattr(entity, 'contents') or not entity.contents:\n                return\n            for sub_entity in entity.contents:\n                dfs(sub_entity, entity_name)\n\n        dfs(self.root, entity_name)\n        return found_entities\n    \n    def get_entitiy_with_path(self, full_path: str, file_path: str):\n        entity_path = os.path.join(full_path, file_path)\n        \n        def dfs(entity, entity_path):\n            if entity.get_absolute_path() == entity_path:\n                return entity\n            # Base case: return if entity does not have contents or contents is empty\n            if not hasattr(entity, 'contents') or not entity.contents:\n                return\n            for sub_entity in entity.contents:\n                dfs(sub_entity, entity_path)\n\n        return dfs(self.root, entity_path)\n    \n    def to_json(self):\n        json_str = json.dumps(self.root, cls=CustomEncoder, indent=2)\n        return json_str\n    \n    \n    def show_graph(self):\n        def build_graph(entity, graph=None):\n            if graph is None:\n                graph = nx.DiGraph()\n\n            if entity is not None:\n                graph.add_node(entity.absolute_path, label=f\"{entity.name} ({entity.get_type()}) {entity.metadata['file_size'] if entity.metadata.get('file_size') else ''}\")\n                if entity.parent:\n                    graph.add_edge(entity.parent.absolute_path, entity.absolute_path)\n\n                if hasattr(entity, 'contents') and entity.contents:\n                    for sub_entity in entity.contents:\n                        build_graph(sub_entity, graph)\n\n            return graph\n\n        # Assuming `knowledge` is an instance of your Knowledge class\n        kg_graph = build_graph(self.root)\n\n        plt.figure(figsize=(30, 20))\n\n        # Drawing the graph\n        # Adjust these parameters as needed\n        scale_factor = 100  # Increase as needed\n        optimal_node_distance = 2  # Increase as needed\n        layout_iterations = 500  # Increase as needed\n\n        pos = nx.spring_layout(kg_graph, scale=scale_factor, k=optimal_node_distance, iterations=layout_iterations)\n        nx.draw(kg_graph, pos, with_labels=True, labels=nx.get_node_attributes(kg_graph, 'label'), font_size=25)\n        plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    # def _flatten_tree(self, node=None):\n    #     if node is None:\n    #         node = self.root\n\n    #     flat_list = []\n    #     # Use the get_relative_path method to obtain the full path\n    #     full_path = node.get_relative_path()\n    #     # Split the path to get individual components\n    #     path_components = full_path.split('/')\n\n    #     # For each component in the path, create an entry in flat_list\n    #     for i in range(len(path_components)):\n    #         node_info = {\n    #             'name': path_components[i],\n    #             'parent': path_components[i-1] if i > 0 else \"\"\n    #         }\n    #         flat_list.append(node_info)\n\n    #     if hasattr(node, 'contents') and node.contents:\n    #         for child in node.contents:\n    #             flat_list.extend(self._flatten_tree(child))\n\n\n    #     return flat_list\n    \n    def _flatten_tree(self, root):\n        \"\"\"Flatten the tree for Plotly's Treemap.\"\"\"\n        names = []\n        parents = []\n\n        def _flatten(node):\n            names.append(node.name)\n            parents.append(node.parent.name if node.parent else \"\")\n            for child in node.contents:\n                _flatten(child)\n\n        _flatten(root)\n        return names, parents\n\n    def show_treemap(self, html=False):\n        # Assuming self.root is the root of your tree\n        # flat_data = self._flatten_tree(self.root)\n        \n\n        # # Convert the flat data into a DataFrame\n        # df = pd.DataFrame(flat_data)\n        # df['all'] = 'all'\n\n        flattened_tree = self._flatten_tree(self.root)\n    \n        df = pd.DataFrame(flattened_tree)\n        # Now create a Plotly treemap\n        fig = px.treemap(df, path=['parents', 'names'],\n                        color_continuous_scale='RdBu')\n        fig.update_layout(margin=dict(t=50, l=25, r=25, b=25))\n\n        file_path = 'temp_plot.html'\n        fig.write_html(file_path)\n        \n        if not html:\n            fig.show()\n            \n        else:\n    \n            import webbrowser\n            # Open the HTML file in the default web browser\n            webbrowser.open('file://' + os.path.realpath(file_path))\n\n        return flattened_tree\n\n\n    def show(self):\n        def build_tree(entity, ete_node):\n            if entity is not None:\n                node_label = f\"{entity.name} ({entity.get_type()}) {entity.metadata['file_size'] if entity.metadata.get('file_size') else ''}\"\n                child = ete_node.add_child(name=node_label)\n                \n                # Add each attribute of the entity as a feature\n                for attr, value in vars(entity).items():\n                    child.add_features(**{attr: str(value)})\n\n\n                # Customize node style here (general style)\n                nstyle = NodeStyle()\n                nstyle[\"fgcolor\"] = \"blue\"\n                nstyle[\"size\"] = 10\n                nstyle[\"shape\"] = \"circle\"\n                child.set_style(nstyle)\n\n                if hasattr(entity, 'contents') and entity.contents:\n                    for sub_entity in entity.contents:\n                        build_tree(sub_entity, child)\n\n                # Check if the current node has multiple children\n                if not (len(child.get_children()) == 0):\n                    # Customize the node to indicate it has multiple children\n                    multi_child_style = NodeStyle()\n                    # multi_child_style[\"fgcolor\"] = \"red\"\n                    # multi_child_style[\"size\"] = 15\n                    # multi_child_style[\"shape\"] = \"square\"\n                    child.set_style(multi_child_style)\n                    # Add a special label using TextFace\n                    child.add_face(TextFace(f\"{node_label}\", fsize=10), column=0)\n\n        # Create the base ETE tree node\n        base_tree = Tree()\n        base_node = base_tree.add_child(name=\"Root\")\n\n        # Build the tree\n        build_tree(self.root, base_node)\n\n        # Tree style customization\n        ts = TreeStyle()\n        ts.show_leaf_name = True\n        ts.mode = \"r\" # Change to \"r\" for rectangular mode\n        ts.scale = 20\n\n        # Show the tree\n        base_tree.show(tree_style=ts)\n\n"
        },
        {
          "type": "Directory",
          "name": "utils",
          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/utils",
          "text": "utils/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 __pycache__/\n\u2514\u2500\u2500 helpers/\n",
          "uuid": "bbf362ae-cf69-4343-84c9-e41feab7acf9",
          "contents": [
            {
              "type": "PythonEntity",
              "name": "__init__.py",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/utils/__init__.py",
              "text": "",
              "uuid": "e423e76b-a575-4b47-b2be-6e6750499b2e",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "__init__.py.handle_file_type",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/utils/__init__.py.handle_file_type",
                  "text": "",
                  "uuid": "68e5e8e9-812c-476e-bdc1-5fc22cb40b79",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "__init__.py.handle_file_type.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/utils/__init__.py.handle_file_type.top_level_function_definition_code",
                      "text": "",
                      "uuid": "4839f7f6-4289-49e5-9bdc-d6cc08b32e18",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "68e5e8e9-812c-476e-bdc1-5fc22cb40b79",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "if file.name.endswith('.py'):\n        return parse_python_file(file)\n\n# Other file types can be added here\n\nreturn []\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab8d910>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab8d990>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "e423e76b-a575-4b47-b2be-6e6750499b2e",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def handle_file_type(file):\n    if file.name.endswith('.py'):\n        return parse_python_file(file)\n    # Other file types can be added here\n    return []"
                },
                {
                  "type": "PythonEntity",
                  "name": "__init__.py.parse_python_file",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/utils/__init__.py.parse_python_file",
                  "text": "",
                  "uuid": "3a9d4ef3-7d97-468c-ab21-2741a5546038",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "__init__.py.parse_python_file.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/utils/__init__.py.parse_python_file.top_level_function_definition_code",
                      "text": "",
                      "uuid": "f8db4e56-c13c-449b-99ce-3dfce282b6f9",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "3a9d4ef3-7d97-468c-ab21-2741a5546038",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "parts = []\n\n# Parsing logic here\n\nreturn parts\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "e423e76b-a575-4b47-b2be-6e6750499b2e",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def parse_python_file(file):\n    # Logic to parse a Python file and create Part entities (like functions, classes)\n    parts = []\n    # Parsing logic here\n    return parts"
                },
                {
                  "type": "PythonEntity",
                  "name": "__init__.py.top_level_module_code",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/utils/__init__.py.top_level_module_code",
                  "text": "",
                  "uuid": "4498c1d7-3c25-40eb-9a0e-2a03ca849e38",
                  "contents": [],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "e423e76b-a575-4b47-b2be-6e6750499b2e",
                  "node_type": "top_level_code",
                  "decorator": null,
                  "imports": [],
                  "source": "# import os\n\n# import tempfile\n\n# import zipfile\n\n# from conversational_codebase.knowledge.models.entities import Directory, File        \n\nimport os\n\n# def build_knowledge_graph(entity, graph=None, path=\"\"):\n\n#     if graph is None:\n\n#         graph = {}\n\n#     current_path = f\"{path}/{entity.name}\"\n\n#     graph[current_path] = []\n\n#     if entity.type == \"file\":\n\n#         entity.children = handle_file_type(entity)\n\n#     for child in entity.children:\n\n#         graph[current_path].append(f\"{current_path}/{child.name}\")\n\n#         build_knowledge_graph(child, graph, current_path)\n\n#     return graph\n\n# def traverse_and_build_graph(start_path):\n\n#     \"\"\"\n\n#     Traverses the extracted directory and builds a knowledge graph.\n\n#     \"\"\"\n\n#     root = Directory(os.path.basename(start_path))\n\n#     _traverse_dir(start_path, root)\n\n#     return build_knowledge_graph(root)\n\n# def _traverse_dir(path, directory_entity):\n\n#     \"\"\"\n\n#     Helper function to recursively traverse directories.\n\n#     \"\"\"\n\n#     for item in os.listdir(path):\n\n#         item_path = os.path.join(path, item)\n\n#         if os.path.isdir(item_path):\n\n#             dir_entity = Directory(item)\n\n#             directory_entity.add_child(dir_entity)\n\n#             _traverse_dir(item_path, dir_entity)\n\n#         elif os.path.isfile(item_path):\n\n#             file_entity = File(item)\n\n#             directory_entity.add_child(file_entity)\n\n#             # Handle file content here if needed\n\n"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "bbf362ae-cf69-4343-84c9-e41feab7acf9",
              "node_type": "module",
              "decorator": null,
              "imports": [
                "<Node type=module, start_point=(0, 0), end_point=(62, 0)>"
              ],
              "source": "# import os\n# import tempfile\n# import zipfile\n# from conversational_codebase.knowledge.models.entities import Directory, File        \n\n\nimport os\n\ndef handle_file_type(file):\n    if file.name.endswith('.py'):\n        return parse_python_file(file)\n    # Other file types can be added here\n    return []\n\ndef parse_python_file(file):\n    # Logic to parse a Python file and create Part entities (like functions, classes)\n    parts = []\n    # Parsing logic here\n    return parts\n\n    \n\n\n\n# def build_knowledge_graph(entity, graph=None, path=\"\"):\n#     if graph is None:\n#         graph = {}\n\n#     current_path = f\"{path}/{entity.name}\"\n#     graph[current_path] = []\n\n#     if entity.type == \"file\":\n#         entity.children = handle_file_type(entity)\n\n#     for child in entity.children:\n#         graph[current_path].append(f\"{current_path}/{child.name}\")\n#         build_knowledge_graph(child, graph, current_path)\n\n#     return graph\n\n# def traverse_and_build_graph(start_path):\n#     \"\"\"\n#     Traverses the extracted directory and builds a knowledge graph.\n#     \"\"\"\n#     root = Directory(os.path.basename(start_path))\n#     _traverse_dir(start_path, root)\n#     return build_knowledge_graph(root)\n\n# def _traverse_dir(path, directory_entity):\n#     \"\"\"\n#     Helper function to recursively traverse directories.\n#     \"\"\"\n#     for item in os.listdir(path):\n#         item_path = os.path.join(path, item)\n#         if os.path.isdir(item_path):\n#             dir_entity = Directory(item)\n#             directory_entity.add_child(dir_entity)\n#             _traverse_dir(item_path, dir_entity)\n#         elif os.path.isfile(item_path):\n#             file_entity = File(item)\n#             directory_entity.add_child(file_entity)\n#             # Handle file content here if needed\n"
            },
            {
              "type": "Directory",
              "name": "__pycache__",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/utils/__pycache__",
              "text": "__pycache__/\n\u2514\u2500\u2500 __init__.cpython-311.pyc\n",
              "uuid": "f5520671-b82b-4829-8195-533b03e9cb68",
              "contents": [
                {
                  "type": "UnsupportedFile",
                  "name": "__init__.cpython-311.pyc",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/utils/__pycache__/__init__.cpython-311.pyc",
                  "text": "",
                  "uuid": "89b13bae-9028-44f6-8be5-c3a747496e90",
                  "contents": [],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {
                    "file_size": 655
                  },
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "f5520671-b82b-4829-8195-533b03e9cb68"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {
                "num_files": 1
              },
              "dependencies": [],
              "expanded_state": "expanded",
              "parent_uuid": "bbf362ae-cf69-4343-84c9-e41feab7acf9"
            },
            {
              "type": "Directory",
              "name": "helpers",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/utils/helpers",
              "text": "helpers/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 __pycache__/\n\u251c\u2500\u2500 prompt.py\n\u2514\u2500\u2500 zip.py\n",
              "uuid": "e48614db-9da7-4eca-b77f-b4b6bfe7dd44",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "__init__.py",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/utils/helpers/__init__.py",
                  "text": "",
                  "uuid": "ddd4346a-7e66-4714-b201-9031e7800585",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "__init__.py.top_level_module_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/utils/helpers/__init__.py.top_level_module_code",
                      "text": "",
                      "uuid": "2d01166f-7806-4ca5-aaf8-89cf8102c526",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "ddd4346a-7e66-4714-b201-9031e7800585",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "# from .embedding import create_embedding, compare_embeddings, Embedding\n\n# from .zip import extract_zip\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "e48614db-9da7-4eca-b77f-b4b6bfe7dd44",
                  "node_type": "module",
                  "decorator": null,
                  "imports": [],
                  "source": "# from .embedding import create_embedding, compare_embeddings, Embedding\n# from .zip import extract_zip"
                },
                {
                  "type": "Directory",
                  "name": "__pycache__",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/utils/helpers/__pycache__",
                  "text": "__pycache__/\n\u251c\u2500\u2500 __init__.cpython-311.pyc\n\u251c\u2500\u2500 embedding.cpython-311.pyc\n\u251c\u2500\u2500 explain.cpython-311.pyc\n\u2514\u2500\u2500 prompt.cpython-311.pyc\n",
                  "uuid": "68522b84-99f8-44a2-b46a-42095f8d1f04",
                  "contents": [
                    {
                      "type": "UnsupportedFile",
                      "name": "explain.cpython-311.pyc",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/utils/helpers/__pycache__/explain.cpython-311.pyc",
                      "text": "",
                      "uuid": "99215229-7e72-48c5-8b05-0b25e2526fa7",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {
                        "file_size": 2761
                      },
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "68522b84-99f8-44a2-b46a-42095f8d1f04"
                    },
                    {
                      "type": "UnsupportedFile",
                      "name": "prompt.cpython-311.pyc",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/utils/helpers/__pycache__/prompt.cpython-311.pyc",
                      "text": "",
                      "uuid": "70d11003-2f0f-4635-8a57-6e241826bac8",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {
                        "file_size": 1624
                      },
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "68522b84-99f8-44a2-b46a-42095f8d1f04"
                    },
                    {
                      "type": "UnsupportedFile",
                      "name": "embedding.cpython-311.pyc",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/utils/helpers/__pycache__/embedding.cpython-311.pyc",
                      "text": "",
                      "uuid": "a52428a8-bf57-4b72-9f60-0f68cb682706",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {
                        "file_size": 2594
                      },
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "68522b84-99f8-44a2-b46a-42095f8d1f04"
                    },
                    {
                      "type": "UnsupportedFile",
                      "name": "__init__.cpython-311.pyc",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/utils/helpers/__pycache__/__init__.cpython-311.pyc",
                      "text": "",
                      "uuid": "51ebbfee-3631-467e-8e78-10781e364e8d",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {
                        "file_size": 220
                      },
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "68522b84-99f8-44a2-b46a-42095f8d1f04"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {
                    "num_files": 4
                  },
                  "dependencies": [],
                  "expanded_state": "expanded",
                  "parent_uuid": "e48614db-9da7-4eca-b77f-b4b6bfe7dd44"
                },
                {
                  "type": "PythonEntity",
                  "name": "zip.py",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/utils/helpers/zip.py",
                  "text": "",
                  "uuid": "920005b5-41b4-48ea-ac69-da8a75ab7ccc",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "zip.py.extract_zip",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/utils/helpers/zip.py.extract_zip",
                      "text": "",
                      "uuid": "4bfbacdb-8d61-454f-8cff-c7a0f2c95b99",
                      "contents": [
                        {
                          "type": "PythonEntity",
                          "name": "zip.py.extract_zip.top_level_function_definition_code",
                          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/utils/helpers/zip.py.extract_zip.top_level_function_definition_code",
                          "text": "",
                          "uuid": "9aeefc7e-0b9b-4644-bbef-637501f59c25",
                          "contents": [],
                          "explanation": null,
                          "preliminary_context": "",
                          "metadata": {},
                          "dependencies": [],
                          "expanded_state": "unexpanded",
                          "parent_uuid": "4bfbacdb-8d61-454f-8cff-c7a0f2c95b99",
                          "node_type": "top_level_code",
                          "decorator": null,
                          "imports": [],
                          "source": "\"\"\"\n    Extracts the zip file to a temporary directory and returns the directory path.\n    \"\"\"\n\nwith tempfile.TemporaryDirectory() as temp_dir:\n        with zipfile.ZipFile(zip_path) as z:\n            z.extractall(temp_dir)\n        return temp_dir\n\n"
                        }
                      ],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab95850>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab958d0>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab95950>"
                      ],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "920005b5-41b4-48ea-ac69-da8a75ab7ccc",
                      "node_type": "function_definition",
                      "decorator": null,
                      "imports": [],
                      "source": "def extract_zip(zip_path):\n    \"\"\"\n    Extracts the zip file to a temporary directory and returns the directory path.\n    \"\"\"\n    with tempfile.TemporaryDirectory() as temp_dir:\n        with zipfile.ZipFile(zip_path) as z:\n            z.extractall(temp_dir)\n        return temp_dir"
                    },
                    {
                      "type": "PythonEntity",
                      "name": "zip.py.top_level_module_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/utils/helpers/zip.py.top_level_module_code",
                      "text": "",
                      "uuid": "b5ad167e-5fbf-4138-b883-093a32aaa0cc",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "920005b5-41b4-48ea-ac69-da8a75ab7ccc",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "import tempfile\n\nimport zipfile\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "e48614db-9da7-4eca-b77f-b4b6bfe7dd44",
                  "node_type": "module",
                  "decorator": null,
                  "imports": [
                    "<Node type=module, start_point=(0, 0), end_point=(10, 23)>",
                    "<Node type=module, start_point=(0, 0), end_point=(10, 23)>"
                  ],
                  "source": "import tempfile\nimport zipfile\n\ndef extract_zip(zip_path):\n    \"\"\"\n    Extracts the zip file to a temporary directory and returns the directory path.\n    \"\"\"\n    with tempfile.TemporaryDirectory() as temp_dir:\n        with zipfile.ZipFile(zip_path) as z:\n            z.extractall(temp_dir)\n        return temp_dir"
                },
                {
                  "type": "PythonEntity",
                  "name": "prompt.py",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/utils/helpers/prompt.py",
                  "text": "",
                  "uuid": "8ef341c2-2229-42e1-a023-089117b6f0c4",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "prompt.py.get_prompt_field_names",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/utils/helpers/prompt.py.get_prompt_field_names",
                      "text": "",
                      "uuid": "03742291-f4a6-4bd3-a44b-ff4a0787bfe6",
                      "contents": [
                        {
                          "type": "PythonEntity",
                          "name": "prompt.py.get_prompt_field_names.top_level_function_definition_code",
                          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/utils/helpers/prompt.py.get_prompt_field_names.top_level_function_definition_code",
                          "text": "",
                          "uuid": "392b94a1-b0b3-49b5-a406-4a01a3700e29",
                          "contents": [],
                          "explanation": null,
                          "preliminary_context": "",
                          "metadata": {},
                          "dependencies": [],
                          "expanded_state": "unexpanded",
                          "parent_uuid": "03742291-f4a6-4bd3-a44b-ff4a0787bfe6",
                          "node_type": "top_level_code",
                          "decorator": null,
                          "imports": [],
                          "source": "formatter = string.Formatter()\n\nreturn [field_name for _, field_name, _, _ in formatter.parse(prompt) if field_name is not None]\n\n"
                        }
                      ],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab96fd0>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab97050>"
                      ],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "8ef341c2-2229-42e1-a023-089117b6f0c4",
                      "node_type": "function_definition",
                      "decorator": null,
                      "imports": [],
                      "source": "def get_prompt_field_names(prompt: str) -> List[str]:\n    formatter = string.Formatter()\n    return [field_name for _, field_name, _, _ in formatter.parse(prompt) if field_name is not None]"
                    },
                    {
                      "type": "PythonEntity",
                      "name": "prompt.py.validate_prompt_template",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/utils/helpers/prompt.py.validate_prompt_template",
                      "text": "",
                      "uuid": "d4444a57-823a-4266-bc22-9ce7de268912",
                      "contents": [
                        {
                          "type": "PythonEntity",
                          "name": "prompt.py.validate_prompt_template.top_level_function_definition_code",
                          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/utils/helpers/prompt.py.validate_prompt_template.top_level_function_definition_code",
                          "text": "",
                          "uuid": "71b9ddf7-b69f-4a47-b388-60c5f73fe3fd",
                          "contents": [],
                          "explanation": null,
                          "preliminary_context": "",
                          "metadata": {},
                          "dependencies": [],
                          "expanded_state": "unexpanded",
                          "parent_uuid": "d4444a57-823a-4266-bc22-9ce7de268912",
                          "node_type": "top_level_code",
                          "decorator": null,
                          "imports": [],
                          "source": "return get_prompt_field_names(prompt) == fields\n\n"
                        }
                      ],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab96610>"
                      ],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "8ef341c2-2229-42e1-a023-089117b6f0c4",
                      "node_type": "function_definition",
                      "decorator": null,
                      "imports": [],
                      "source": "def validate_prompt_template(prompt: str, fields: [str]) -> bool:\n    return get_prompt_field_names(prompt) == fields"
                    },
                    {
                      "type": "PythonEntity",
                      "name": "prompt.py.format_prompt",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/utils/helpers/prompt.py.format_prompt",
                      "text": "",
                      "uuid": "aea5beb6-17fa-432e-9434-890effdfc437",
                      "contents": [
                        {
                          "type": "PythonEntity",
                          "name": "prompt.py.format_prompt.top_level_function_definition_code",
                          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/utils/helpers/prompt.py.format_prompt.top_level_function_definition_code",
                          "text": "",
                          "uuid": "3d91fe31-1207-4769-ad7d-e3863c4b7c8e",
                          "contents": [],
                          "explanation": null,
                          "preliminary_context": "",
                          "metadata": {},
                          "dependencies": [],
                          "expanded_state": "unexpanded",
                          "parent_uuid": "aea5beb6-17fa-432e-9434-890effdfc437",
                          "node_type": "top_level_code",
                          "decorator": null,
                          "imports": [],
                          "source": "return prompt.format(**fields)\n\n"
                        }
                      ],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ab97410>"
                      ],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "8ef341c2-2229-42e1-a023-089117b6f0c4",
                      "node_type": "function_definition",
                      "decorator": null,
                      "imports": [],
                      "source": "def format_prompt(prompt: str, fields: dict) -> str:\n    return prompt.format(**fields)"
                    },
                    {
                      "type": "PythonEntity",
                      "name": "prompt.py.format_explaination_prompt",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/utils/helpers/prompt.py.format_explaination_prompt",
                      "text": "",
                      "uuid": "e0144d9d-5eca-4ffc-a4ed-3e12c5a35644",
                      "contents": [
                        {
                          "type": "PythonEntity",
                          "name": "prompt.py.format_explaination_prompt.top_level_function_definition_code",
                          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/utils/helpers/prompt.py.format_explaination_prompt.top_level_function_definition_code",
                          "text": "",
                          "uuid": "f8fd5a5f-9fd4-4329-a924-f70cce62d742",
                          "contents": [],
                          "explanation": null,
                          "preliminary_context": "",
                          "metadata": {},
                          "dependencies": [],
                          "expanded_state": "unexpanded",
                          "parent_uuid": "e0144d9d-5eca-4ffc-a4ed-3e12c5a35644",
                          "node_type": "top_level_code",
                          "decorator": null,
                          "imports": [],
                          "source": "return format_prompt(prompt, {\"text_to_be_explained\": text_to_be_explained})\n\n"
                        }
                      ],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29aba0110>"
                      ],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "8ef341c2-2229-42e1-a023-089117b6f0c4",
                      "node_type": "function_definition",
                      "decorator": null,
                      "imports": [],
                      "source": "def format_explaination_prompt(prompt: str, text_to_be_explained: str) -> str:\n    return format_prompt(prompt, {\"text_to_be_explained\": text_to_be_explained})"
                    },
                    {
                      "type": "PythonEntity",
                      "name": "prompt.py.top_level_module_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/utils/helpers/prompt.py.top_level_module_code",
                      "text": "",
                      "uuid": "bd9ea55d-96a0-4d89-9811-8a8c3145beed",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "8ef341c2-2229-42e1-a023-089117b6f0c4",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "import string\n\nfrom typing import List\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "e48614db-9da7-4eca-b77f-b4b6bfe7dd44",
                  "node_type": "module",
                  "decorator": null,
                  "imports": [
                    "<Node type=module, start_point=(0, 0), end_point=(14, 80)>",
                    "<Node type=module, start_point=(0, 0), end_point=(14, 80)>"
                  ],
                  "source": "import string\nfrom typing import List\n\ndef get_prompt_field_names(prompt: str) -> List[str]:\n    formatter = string.Formatter()\n    return [field_name for _, field_name, _, _ in formatter.parse(prompt) if field_name is not None]\n\ndef validate_prompt_template(prompt: str, fields: [str]) -> bool:\n    return get_prompt_field_names(prompt) == fields\n\ndef format_prompt(prompt: str, fields: dict) -> str:\n    return prompt.format(**fields)\n\ndef format_explaination_prompt(prompt: str, text_to_be_explained: str) -> str:\n    return format_prompt(prompt, {\"text_to_be_explained\": text_to_be_explained})"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {
                "num_files": 3,
                "num_folders": 1
              },
              "dependencies": [],
              "expanded_state": "expanded",
              "parent_uuid": "bbf362ae-cf69-4343-84c9-e41feab7acf9"
            }
          ],
          "explanation": null,
          "preliminary_context": "",
          "metadata": {
            "num_files": 1,
            "num_folders": 2
          },
          "dependencies": [],
          "expanded_state": "expanded",
          "parent_uuid": "d60ae294-0cb4-46e3-af98-a008006014f0"
        },
        {
          "type": "Directory",
          "name": "__pycache__",
          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/__pycache__",
          "text": "__pycache__/\n\u2514\u2500\u2500 __init__.cpython-311.pyc\n",
          "uuid": "7cf290a6-e380-4afa-8056-4dfc4c0d8342",
          "contents": [
            {
              "type": "UnsupportedFile",
              "name": "__init__.cpython-311.pyc",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/__pycache__/__init__.cpython-311.pyc",
              "text": "",
              "uuid": "38dd734b-85ae-431d-a2bf-b881a777387e",
              "contents": [],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {
                "file_size": 10066
              },
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "7cf290a6-e380-4afa-8056-4dfc4c0d8342"
            }
          ],
          "explanation": null,
          "preliminary_context": "",
          "metadata": {
            "num_files": 1
          },
          "dependencies": [],
          "expanded_state": "expanded",
          "parent_uuid": "d60ae294-0cb4-46e3-af98-a008006014f0"
        },
        {
          "type": "PythonEntity",
          "name": "search.py",
          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/knowledge/search.py",
          "text": "",
          "uuid": "7ef8d49e-1496-460f-ad4c-7970e7ecbfcd",
          "contents": [],
          "explanation": null,
          "preliminary_context": "",
          "metadata": {},
          "dependencies": [],
          "expanded_state": "unexpanded",
          "parent_uuid": "d60ae294-0cb4-46e3-af98-a008006014f0",
          "node_type": "module",
          "decorator": null,
          "imports": [],
          "source": ""
        }
      ],
      "explanation": null,
      "preliminary_context": "",
      "metadata": {
        "num_files": 2,
        "num_folders": 2
      },
      "dependencies": [],
      "expanded_state": "expanded",
      "parent_uuid": "50206252-a034-45ed-944d-480be9d60b30"
    },
    {
      "type": "UnsupportedFile",
      "name": ".env",
      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/.env",
      "text": "",
      "uuid": "b8ae419c-0ad2-4802-b405-7ff7910ab3b5",
      "contents": [],
      "explanation": null,
      "preliminary_context": "",
      "metadata": {
        "file_size": 288
      },
      "dependencies": [],
      "expanded_state": "unexpanded",
      "parent_uuid": "50206252-a034-45ed-944d-480be9d60b30"
    },
    {
      "type": "UnsupportedFile",
      "name": "line.svg",
      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/line.svg",
      "text": "",
      "uuid": "3e789b71-2733-436d-a7d6-21f1028d96f1",
      "contents": [],
      "explanation": null,
      "preliminary_context": "",
      "metadata": {
        "file_size": 355
      },
      "dependencies": [],
      "expanded_state": "unexpanded",
      "parent_uuid": "50206252-a034-45ed-944d-480be9d60b30"
    },
    {
      "type": "UnsupportedFile",
      "name": "adjusted_output.svg",
      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/adjusted_output.svg",
      "text": "",
      "uuid": "57125abb-cc7d-409d-a707-73eb74c597ea",
      "contents": [],
      "explanation": null,
      "preliminary_context": "",
      "metadata": {
        "file_size": 385
      },
      "dependencies": [],
      "expanded_state": "unexpanded",
      "parent_uuid": "50206252-a034-45ed-944d-480be9d60b30"
    },
    {
      "type": "Directory",
      "name": "github_repo_downloader",
      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/github_repo_downloader",
      "text": "github_repo_downloader/\n\u251c\u2500\u2500 __init__.py\n\u2514\u2500\u2500 __pycache__/\n",
      "uuid": "5647f00f-7bdd-4cee-a99d-0bcdf4f7a8c9",
      "contents": [
        {
          "type": "PythonEntity",
          "name": "__init__.py",
          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/github_repo_downloader/__init__.py",
          "text": "",
          "uuid": "4f6c0643-a253-488c-a9dd-42a7ed971d51",
          "contents": [
            {
              "type": "PythonEntity",
              "name": "__init__.py.GitHubRepoDownloader",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/github_repo_downloader/__init__.py.GitHubRepoDownloader",
              "text": "",
              "uuid": "d63ad723-283e-4af7-9b07-041f911ddc1f",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "__init__.py.GitHubRepoDownloader.__init__",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/github_repo_downloader/__init__.py.GitHubRepoDownloader.__init__",
                  "text": "",
                  "uuid": "a6a20de5-5bc1-414f-9e24-885c0855f505",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "__init__.py.GitHubRepoDownloader.__init__.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/github_repo_downloader/__init__.py.GitHubRepoDownloader.__init__.top_level_function_definition_code",
                      "text": "",
                      "uuid": "d6b2bd7b-6c59-432e-bcc2-e7961d4893a8",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "a6a20de5-5bc1-414f-9e24-885c0855f505",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "self.download_dir = download_dir or tempfile.gettempdir()\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29aba2610>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "d63ad723-283e-4af7-9b07-041f911ddc1f",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def __init__(self, download_dir = None):\n        self.download_dir = download_dir or tempfile.gettempdir()"
                },
                {
                  "type": "PythonEntity",
                  "name": "__init__.py.GitHubRepoDownloader.format_github_zip_url",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/github_repo_downloader/__init__.py.GitHubRepoDownloader.format_github_zip_url",
                  "text": "",
                  "uuid": "bbc2cf86-2864-4ee5-beaa-b4fcfac4e968",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "__init__.py.GitHubRepoDownloader.format_github_zip_url.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/github_repo_downloader/__init__.py.GitHubRepoDownloader.format_github_zip_url.top_level_function_definition_code",
                      "text": "",
                      "uuid": "7aefea4d-5d13-49d6-b636-2273ec838922",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "bbc2cf86-2864-4ee5-beaa-b4fcfac4e968",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "\"\"\"\n        Format the provided GitHub URL to the ZIP download link.\n        \"\"\"\n\nmatch = re.search(r\"github\\.com/([\\w-]+)/([\\w-]+)\", github_url)\n\nif not match:\n            raise ValueError(\"Invalid GitHub URL provided.\")\n\nusername, repository = match.groups()\n\nreturn f\"https://github.com/{username}/{repository}/archive/refs/heads/main.zip\"\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29aba4a50>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29aba4ad0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29aba4b90>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "d63ad723-283e-4af7-9b07-041f911ddc1f",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def format_github_zip_url(self, github_url):\n        \"\"\"\n        Format the provided GitHub URL to the ZIP download link.\n        \"\"\"\n        match = re.search(r\"github\\.com/([\\w-]+)/([\\w-]+)\", github_url)\n        if not match:\n            raise ValueError(\"Invalid GitHub URL provided.\")\n\n        username, repository = match.groups()\n        return f\"https://github.com/{username}/{repository}/archive/refs/heads/main.zip\""
                },
                {
                  "type": "PythonEntity",
                  "name": "__init__.py.GitHubRepoDownloader.download_zip_with_progress",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/github_repo_downloader/__init__.py.GitHubRepoDownloader.download_zip_with_progress",
                  "text": "",
                  "uuid": "aa05976c-1939-4b6b-8483-3386d3120bad",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "__init__.py.GitHubRepoDownloader.download_zip_with_progress.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/github_repo_downloader/__init__.py.GitHubRepoDownloader.download_zip_with_progress.top_level_function_definition_code",
                      "text": "",
                      "uuid": "404d70db-5419-43a3-9afc-6f6000969008",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "aa05976c-1939-4b6b-8483-3386d3120bad",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "\"\"\"\n        Download a ZIP file from a URL and show progress.\n        \"\"\"\n\nprint(f\"Downloading {url} to {output_path}\")\n\nwith requests.get(url, stream=True) as response:\n            total_size = int(response.headers.get('content-length', 0))\n            block_size = 1024  # 1 Kibibyte\n            progress_bar = tqdm(total=total_size, unit='iB', unit_scale=True)\n\n            with open(output_path, 'wb') as file:\n                for data in response.iter_content(block_size):\n                    progress_bar.update(len(data))\n                    file.write(data)\n            progress_bar.close()\n\n            if total_size != 0 and progress_bar.n != total_size:\n                print(\"WARNING: Downloaded file size does not match expected size.\")\n            else:\n                print(\"Download completed successfully.\")\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abaa810>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abaa890>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abaa950>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abaaa10>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abaaad0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abaabd0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abaac90>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abaad50>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abaae10>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abaab90>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abaaf50>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abab010>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abab0d0>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "d63ad723-283e-4af7-9b07-041f911ddc1f",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def download_zip_with_progress(self, url, output_path):\n        \"\"\"\n        Download a ZIP file from a URL and show progress.\n        \"\"\"\n        print(f\"Downloading {url} to {output_path}\")\n        with requests.get(url, stream=True) as response:\n            total_size = int(response.headers.get('content-length', 0))\n            block_size = 1024  # 1 Kibibyte\n            progress_bar = tqdm(total=total_size, unit='iB', unit_scale=True)\n\n            with open(output_path, 'wb') as file:\n                for data in response.iter_content(block_size):\n                    progress_bar.update(len(data))\n                    file.write(data)\n            progress_bar.close()\n\n            if total_size != 0 and progress_bar.n != total_size:\n                print(\"WARNING: Downloaded file size does not match expected size.\")\n            else:\n                print(\"Download completed successfully.\")"
                },
                {
                  "type": "PythonEntity",
                  "name": "__init__.py.GitHubRepoDownloader.extract_zip",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/github_repo_downloader/__init__.py.GitHubRepoDownloader.extract_zip",
                  "text": "",
                  "uuid": "08325668-8857-4f43-947c-68c6349f2b09",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "__init__.py.GitHubRepoDownloader.extract_zip.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/github_repo_downloader/__init__.py.GitHubRepoDownloader.extract_zip.top_level_function_definition_code",
                      "text": "",
                      "uuid": "c91d98f7-26dd-4285-bbaf-6e59294e7fa5",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "08325668-8857-4f43-947c-68c6349f2b09",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "\"\"\"\n        Extracts the zip file to a specified directory.\n        \"\"\"\n\nwith zipfile.ZipFile(zip_path) as z:\n            z.extractall(extract_to)\n\nprint(f\"ZIP file extracted successfully: {zip_path}\")\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29aba4ed0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29aba9ed0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abaa050>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "d63ad723-283e-4af7-9b07-041f911ddc1f",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def extract_zip(self, zip_path, extract_to):\n        \"\"\"\n        Extracts the zip file to a specified directory.\n        \"\"\"\n        with zipfile.ZipFile(zip_path) as z:\n            z.extractall(extract_to)\n        print(f\"ZIP file extracted successfully: {zip_path}\")"
                },
                {
                  "type": "PythonEntity",
                  "name": "__init__.py.GitHubRepoDownloader.process_github_repo_zip",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/github_repo_downloader/__init__.py.GitHubRepoDownloader.process_github_repo_zip",
                  "text": "",
                  "uuid": "0d6a6be3-c248-4dd6-91e6-dbaab7c27c6f",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "__init__.py.GitHubRepoDownloader.process_github_repo_zip.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/github_repo_downloader/__init__.py.GitHubRepoDownloader.process_github_repo_zip.top_level_function_definition_code",
                      "text": "",
                      "uuid": "de42daaf-d009-46fa-87ca-60e46cc344b2",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "0d6a6be3-c248-4dd6-91e6-dbaab7c27c6f",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "\"\"\"\n        Download and process a GitHub repository ZIP.\n        \"\"\"\n\nzip_url = self.format_github_zip_url(github_url)\n\ntemp_zip_path = os.path.join(self.download_dir, \"repo.zip\")\n\nself.download_zip_with_progress(zip_url, temp_zip_path)\n\nself.extract_zip(temp_zip_path, self.download_dir)\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abb8990>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abb8a10>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abb8ad0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abb8b90>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "d63ad723-283e-4af7-9b07-041f911ddc1f",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def process_github_repo_zip(self, github_url):\n        \"\"\"\n        Download and process a GitHub repository ZIP.\n        \"\"\"\n        zip_url = self.format_github_zip_url(github_url)\n        temp_zip_path = os.path.join(self.download_dir, \"repo.zip\")\n        self.download_zip_with_progress(zip_url, temp_zip_path)\n        self.extract_zip(temp_zip_path, self.download_dir)"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "4f6c0643-a253-488c-a9dd-42a7ed971d51",
              "node_type": "class_definition",
              "decorator": null,
              "imports": [],
              "source": "class GitHubRepoDownloader:\n    def __init__(self, download_dir = None):\n        self.download_dir = download_dir or tempfile.gettempdir()\n\n    def format_github_zip_url(self, github_url):\n        \"\"\"\n        Format the provided GitHub URL to the ZIP download link.\n        \"\"\"\n        match = re.search(r\"github\\.com/([\\w-]+)/([\\w-]+)\", github_url)\n        if not match:\n            raise ValueError(\"Invalid GitHub URL provided.\")\n\n        username, repository = match.groups()\n        return f\"https://github.com/{username}/{repository}/archive/refs/heads/main.zip\"\n\n    def download_zip_with_progress(self, url, output_path):\n        \"\"\"\n        Download a ZIP file from a URL and show progress.\n        \"\"\"\n        print(f\"Downloading {url} to {output_path}\")\n        with requests.get(url, stream=True) as response:\n            total_size = int(response.headers.get('content-length', 0))\n            block_size = 1024  # 1 Kibibyte\n            progress_bar = tqdm(total=total_size, unit='iB', unit_scale=True)\n\n            with open(output_path, 'wb') as file:\n                for data in response.iter_content(block_size):\n                    progress_bar.update(len(data))\n                    file.write(data)\n            progress_bar.close()\n\n            if total_size != 0 and progress_bar.n != total_size:\n                print(\"WARNING: Downloaded file size does not match expected size.\")\n            else:\n                print(\"Download completed successfully.\")\n\n    def extract_zip(self, zip_path, extract_to):\n        \"\"\"\n        Extracts the zip file to a specified directory.\n        \"\"\"\n        with zipfile.ZipFile(zip_path) as z:\n            z.extractall(extract_to)\n        print(f\"ZIP file extracted successfully: {zip_path}\")\n\n    def process_github_repo_zip(self, github_url):\n        \"\"\"\n        Download and process a GitHub repository ZIP.\n        \"\"\"\n        zip_url = self.format_github_zip_url(github_url)\n        temp_zip_path = os.path.join(self.download_dir, \"repo.zip\")\n        self.download_zip_with_progress(zip_url, temp_zip_path)\n        self.extract_zip(temp_zip_path, self.download_dir)"
            },
            {
              "type": "PythonEntity",
              "name": "__init__.py.top_level_module_code",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/github_repo_downloader/__init__.py.top_level_module_code",
              "text": "",
              "uuid": "40ae019a-9ee8-4244-b395-c159f36d79a9",
              "contents": [],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "4f6c0643-a253-488c-a9dd-42a7ed971d51",
              "node_type": "top_level_code",
              "decorator": null,
              "imports": [],
              "source": "import requests\n\nimport zipfile\n\nimport os\n\nimport tempfile\n\nfrom tqdm import tqdm\n\nimport re\n\n# def main(github_url):\n\n#     downloader = GitHubRepoDownloader()\n\n#     downloaded_path = downloader.process_github_repo_zip(github_url)\n\n#     print(f\"Downloaded and extracted repository to: {downloaded_path}\")\n\n# if __name__ == '__main__':\n\n#     fire.Fire(main)\n\n# TODO: CAPTURE \"MAIN\" comments what if this was fed to the kg then the commented out code on the outside would not be captured\n\n"
            }
          ],
          "explanation": null,
          "preliminary_context": "",
          "metadata": {},
          "dependencies": [],
          "expanded_state": "unexpanded",
          "parent_uuid": "5647f00f-7bdd-4cee-a99d-0bcdf4f7a8c9",
          "node_type": "module",
          "decorator": null,
          "imports": [
            "<Node type=module, start_point=(0, 0), end_point=(70, 0)>",
            "<Node type=module, start_point=(0, 0), end_point=(70, 0)>",
            "<Node type=module, start_point=(0, 0), end_point=(70, 0)>",
            "<Node type=module, start_point=(0, 0), end_point=(70, 0)>",
            "<Node type=module, start_point=(0, 0), end_point=(70, 0)>",
            "<Node type=module, start_point=(0, 0), end_point=(70, 0)>"
          ],
          "source": "import requests\nimport zipfile\nimport os\nimport tempfile\nfrom tqdm import tqdm\nimport re\n\nclass GitHubRepoDownloader:\n    def __init__(self, download_dir = None):\n        self.download_dir = download_dir or tempfile.gettempdir()\n\n    def format_github_zip_url(self, github_url):\n        \"\"\"\n        Format the provided GitHub URL to the ZIP download link.\n        \"\"\"\n        match = re.search(r\"github\\.com/([\\w-]+)/([\\w-]+)\", github_url)\n        if not match:\n            raise ValueError(\"Invalid GitHub URL provided.\")\n\n        username, repository = match.groups()\n        return f\"https://github.com/{username}/{repository}/archive/refs/heads/main.zip\"\n\n    def download_zip_with_progress(self, url, output_path):\n        \"\"\"\n        Download a ZIP file from a URL and show progress.\n        \"\"\"\n        print(f\"Downloading {url} to {output_path}\")\n        with requests.get(url, stream=True) as response:\n            total_size = int(response.headers.get('content-length', 0))\n            block_size = 1024  # 1 Kibibyte\n            progress_bar = tqdm(total=total_size, unit='iB', unit_scale=True)\n\n            with open(output_path, 'wb') as file:\n                for data in response.iter_content(block_size):\n                    progress_bar.update(len(data))\n                    file.write(data)\n            progress_bar.close()\n\n            if total_size != 0 and progress_bar.n != total_size:\n                print(\"WARNING: Downloaded file size does not match expected size.\")\n            else:\n                print(\"Download completed successfully.\")\n\n    def extract_zip(self, zip_path, extract_to):\n        \"\"\"\n        Extracts the zip file to a specified directory.\n        \"\"\"\n        with zipfile.ZipFile(zip_path) as z:\n            z.extractall(extract_to)\n        print(f\"ZIP file extracted successfully: {zip_path}\")\n\n    def process_github_repo_zip(self, github_url):\n        \"\"\"\n        Download and process a GitHub repository ZIP.\n        \"\"\"\n        zip_url = self.format_github_zip_url(github_url)\n        temp_zip_path = os.path.join(self.download_dir, \"repo.zip\")\n        self.download_zip_with_progress(zip_url, temp_zip_path)\n        self.extract_zip(temp_zip_path, self.download_dir)\n\n# def main(github_url):\n#     downloader = GitHubRepoDownloader()\n#     downloaded_path = downloader.process_github_repo_zip(github_url)\n#     print(f\"Downloaded and extracted repository to: {downloaded_path}\")\n\n# if __name__ == '__main__':\n#     fire.Fire(main)\n        \n# TODO: CAPTURE \"MAIN\" comments what if this was fed to the kg then the commented out code on the outside would not be captured\n\n"
        },
        {
          "type": "Directory",
          "name": "__pycache__",
          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/github_repo_downloader/__pycache__",
          "text": "__pycache__/\n\u2514\u2500\u2500 __init__.cpython-311.pyc\n",
          "uuid": "6ae28beb-7e16-4a8f-995b-d2400da895a1",
          "contents": [
            {
              "type": "UnsupportedFile",
              "name": "__init__.cpython-311.pyc",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/github_repo_downloader/__pycache__/__init__.cpython-311.pyc",
              "text": "",
              "uuid": "b0ca5980-b697-47bd-96b6-3eea494323bd",
              "contents": [],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {
                "file_size": 4538
              },
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "6ae28beb-7e16-4a8f-995b-d2400da895a1"
            }
          ],
          "explanation": null,
          "preliminary_context": "",
          "metadata": {
            "num_files": 1
          },
          "dependencies": [],
          "expanded_state": "expanded",
          "parent_uuid": "5647f00f-7bdd-4cee-a99d-0bcdf4f7a8c9"
        }
      ],
      "explanation": null,
      "preliminary_context": "",
      "metadata": {
        "num_files": 1,
        "num_folders": 1
      },
      "dependencies": [],
      "expanded_state": "expanded",
      "parent_uuid": "50206252-a034-45ed-944d-480be9d60b30"
    },
    {
      "type": "PythonEntity",
      "name": "main.py",
      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/main.py",
      "text": "",
      "uuid": "a804da6f-0ecc-4419-b025-50d3160df897",
      "contents": [
        {
          "type": "PythonEntity",
          "name": "main.py.main",
          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/main.py.main",
          "text": "",
          "uuid": "f492f5c4-25ce-40d6-a28b-c149d609e874",
          "contents": [
            {
              "type": "PythonEntity",
              "name": "main.py.main.top_level_function_definition_code",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/main.py.main.top_level_function_definition_code",
              "text": "",
              "uuid": "8909f00c-6bdd-4070-8bf3-013a507c0e13",
              "contents": [],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "f492f5c4-25ce-40d6-a28b-c149d609e874",
              "node_type": "top_level_code",
              "decorator": null,
              "imports": [],
              "source": "downloader = GitHubRepoDownloader()\n\n# type: ignore\n\ndownloader.process_github_repo_zip(github_url)\n\nprint(f\"Downloaded and extracted repository to: {downloader.download_dir}\")\n\n"
            }
          ],
          "explanation": null,
          "preliminary_context": "",
          "metadata": {},
          "dependencies": [
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abbaf50>",
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abbafd0>",
            "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abbb050>"
          ],
          "expanded_state": "unexpanded",
          "parent_uuid": "a804da6f-0ecc-4419-b025-50d3160df897",
          "node_type": "function_definition",
          "decorator": null,
          "imports": [],
          "source": "def main(github_url):\n    downloader = GitHubRepoDownloader()  # type: ignore\n    downloader.process_github_repo_zip(github_url)\n    print(f\"Downloaded and extracted repository to: {downloader.download_dir}\")"
        },
        {
          "type": "PythonEntity",
          "name": "main.py.top_level_module_code",
          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/main.py.top_level_module_code",
          "text": "",
          "uuid": "32f7c72e-e512-4fd8-bd38-71d49c6e0d03",
          "contents": [],
          "explanation": null,
          "preliminary_context": "",
          "metadata": {},
          "dependencies": [],
          "expanded_state": "unexpanded",
          "parent_uuid": "a804da6f-0ecc-4419-b025-50d3160df897",
          "node_type": "top_level_code",
          "decorator": null,
          "imports": [],
          "source": "from gitHub_repo_downloader import GitHubRepoDownloader\n\nimport fire\n\nif __name__ == '__main__':\n    fire.Fire(main)\n\n"
        }
      ],
      "explanation": null,
      "preliminary_context": "",
      "metadata": {},
      "dependencies": [
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abbbe10>"
      ],
      "expanded_state": "unexpanded",
      "parent_uuid": "50206252-a034-45ed-944d-480be9d60b30",
      "node_type": "module",
      "decorator": null,
      "imports": [
        "<Node type=module, start_point=(0, 0), end_point=(10, 19)>",
        "<Node type=module, start_point=(0, 0), end_point=(10, 19)>"
      ],
      "source": "from gitHub_repo_downloader import GitHubRepoDownloader\nimport fire\n\n\ndef main(github_url):\n    downloader = GitHubRepoDownloader()  # type: ignore\n    downloader.process_github_repo_zip(github_url)\n    print(f\"Downloaded and extracted repository to: {downloader.download_dir}\")\n\nif __name__ == '__main__':\n    fire.Fire(main)"
    },
    {
      "type": "UnsupportedFile",
      "name": "output.svg",
      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/output.svg",
      "text": "",
      "uuid": "fee48e02-27b5-4573-ad91-5256996e4a74",
      "contents": [],
      "explanation": null,
      "preliminary_context": "",
      "metadata": {
        "file_size": 395
      },
      "dependencies": [],
      "expanded_state": "unexpanded",
      "parent_uuid": "50206252-a034-45ed-944d-480be9d60b30"
    },
    {
      "type": "Directory",
      "name": "entities",
      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities",
      "text": "entities/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 __pycache__/\n\u251c\u2500\u2500 directory.py\n\u251c\u2500\u2500 entity.py\n\u251c\u2500\u2500 file.py\n\u251c\u2500\u2500 md.py\n\u251c\u2500\u2500 python.py\n\u2514\u2500\u2500 text.py\n",
      "uuid": "a419ab9a-2bad-475a-9cd6-ca0fe7ae3dde",
      "contents": [
        {
          "type": "PythonEntity",
          "name": "md.py",
          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/md.py",
          "text": "",
          "uuid": "1997f8bc-a235-4114-bf02-9bbcfc469078",
          "contents": [
            {
              "type": "PythonEntity",
              "name": "md.py.top_level_module_code",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/md.py.top_level_module_code",
              "text": "",
              "uuid": "82a74f3e-1b44-4227-bc7c-bddb9717a1df",
              "contents": [],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "1997f8bc-a235-4114-bf02-9bbcfc469078",
              "node_type": "top_level_code",
              "decorator": null,
              "imports": [],
              "source": "# from conversational_codebase.knowledge.models.entity import Entity, File\n\n# class MdFile(File):\n\n#     def __init__(self, name):\n\n#         super().__init__(name)\n\n#     def can_contain(self, entity):\n\n#         return entity.type == [Text]\n\n# class Text(Entity):\n\n#     def __init__(self, name):\n\n#         super().__init__(name)\n\n#     def can_contain(self, entity):\n\n#         return []\n\n"
            }
          ],
          "explanation": null,
          "preliminary_context": "",
          "metadata": {},
          "dependencies": [],
          "expanded_state": "unexpanded",
          "parent_uuid": "a419ab9a-2bad-475a-9cd6-ca0fe7ae3dde",
          "node_type": "module",
          "decorator": null,
          "imports": [],
          "source": "# from conversational_codebase.knowledge.models.entity import Entity, File\n\n# class MdFile(File):\n#     def __init__(self, name):\n#         super().__init__(name)\n\n#     def can_contain(self, entity):\n#         return entity.type == [Text]\n\n# class Text(Entity):\n#     def __init__(self, name):\n#         super().__init__(name)\n\n#     def can_contain(self, entity):\n#         return []"
        },
        {
          "type": "PythonEntity",
          "name": "__init__.py",
          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/__init__.py",
          "text": "",
          "uuid": "34b2fa7e-74e7-4caf-b0b8-40322b96b4f5",
          "contents": [
            {
              "type": "PythonEntity",
              "name": "__init__.py.CustomEncoder",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/__init__.py.CustomEncoder",
              "text": "",
              "uuid": "bedab1d8-0f48-4f37-8662-4d1b8887a99e",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "__init__.py.CustomEncoder.default",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/__init__.py.CustomEncoder.default",
                  "text": "",
                  "uuid": "d5b36bfa-4b41-46c0-9696-98d430de82e3",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "__init__.py.CustomEncoder.default.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/__init__.py.CustomEncoder.default.top_level_function_definition_code",
                      "text": "",
                      "uuid": "af9d9168-6d7b-47b1-a118-3e382adffeea",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "d5b36bfa-4b41-46c0-9696-98d430de82e3",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "log = False\n\nif isinstance(obj, PythonEntity):\n            if log: print(\"PythonEntity\")\n            # Serialize basic attributes from Entity\n            entity_data = {\n                \"type\": obj.get_type(),\n                \"name\": obj.name,\n                \"absolute_path\": obj.absolute_path,\n                \"text\": obj.text,\n                \"uuid\": str(obj.uuid),  # Convert UUID to string\n                \"contents\": [self.default(child) for child in obj.contents],\n                \"explanation\": obj.explanation,  # Assuming this can be serialized or is None\n                \"preliminary_context\": obj.preliminary_context,\n                \"metadata\": obj.metadata,\n                \"dependencies\": obj.dependencies,  # Assuming these can be serialized or are a list of serializable objects\n                \"expanded_state\": obj.expanded_state,\n                \"parent_uuid\": str(obj.parent.uuid) if obj.parent else None,\n                \n                # \"parent\": obj.parent  # Omitting parent to avoid circular references\n            }\n            # Add PythonEntity-specific properties\n            entity_data.update({\n                \"node_type\": obj.node_type,\n                # For 'node', consider serializing key properties or omitting it\n                # \"node\": serialize_node(obj.node),\n                \"decorator\": obj.decorator,  # Decide how to serialize decorator\n                \"imports\": obj.imports,  # Assuming imports are a list of serializable strings\n                # \"dependencies\": [self.default(dep) for dep in obj.dependencies],  # If dependencies are complex objects\n                \"expanded_state\": obj.expanded_state,\n                \"source\": obj.source,\n            })\n            return entity_data\n        elif isinstance(obj, RootDirectory):\n            if log: print(\"RootDirectory\")\n            # Entity\n            entity_data = {\n                \"type\": obj.get_type(),\n                \"name\": obj.name,\n                \"absolute_path\": obj.absolute_path,\n                \"text\": obj.text,\n                \"uuid\": str(obj.uuid),  # Convert UUID to string\n                \"contents\": [self.default(child) for child in obj.contents],\n                \"explanation\": obj.explanation,  # Assuming this can be serialized or is None\n                \"preliminary_context\": obj.preliminary_context,\n                \"metadata\": obj.metadata,\n                \"dependencies\": obj.dependencies,  # Assuming these can be serialized or are a list of serializable objects\n                \"expanded_state\": obj.expanded_state,\n                \"parent_uuid\": str(obj.parent.uuid) if obj.parent else None,\n                # \"parent\": obj.parent  # Omitting parent to avoid circular references\n            }\n            # Directory\n            entity_data.update({\n                \"text\": obj.text,\n                \"metadata\": obj.metadata,  # Ensure metadata like num_folders/num_files is included\n                # Contents are already included by the Entity serialization logic\n            })\n            \n            # Add RootDirectory-specific properties\n            entity_data.update({\n                \"ignored_directories\": obj.ignored_directories,\n                \"preliminary_context\": obj.preliminary_context,\n                \"directory_name\": obj.directory_name,\n            })\n            return entity_data\n        # Convert objects of specific types to a dictionary\n        elif isinstance(obj, Directory):\n            if log: print(\"Directory\")\n            # Start with the Entity serialization\n            entity_data = {\n                \"type\": obj.get_type(),\n                \"name\": obj.name,\n                \"absolute_path\": obj.absolute_path,\n                \"text\": obj.text,\n                \"uuid\": str(obj.uuid),  # Convert UUID to string\n                \"contents\": [self.default(child) for child in obj.contents],\n                \"explanation\": obj.explanation,  # Assuming this can be serialized or is None\n                \"preliminary_context\": obj.preliminary_context,\n                \"metadata\": obj.metadata,\n                \"dependencies\": obj.dependencies,  # Assuming these can be serialized or are a list of serializable objects\n                \"expanded_state\": obj.expanded_state,\n                \"parent_uuid\": str(obj.parent.uuid) if obj.parent else None,\n                # \"parent\": obj.parent  # Omitting parent to avoid circular references\n            }\n            \n            # Add Directory-specific properties\n            entity_data.update({\n                \"text\": obj.text,\n                \"metadata\": obj.metadata,  # Ensure metadata like num_folders/num_files is included\n                # Contents are already included by the Entity serialization logic\n            })\n            return entity_data\n        elif isinstance(obj, Entity):\n            if log: print(\"Entity\")\n            return {\n                \"type\": obj.get_type(),\n                \"name\": obj.name,\n                \"absolute_path\": obj.absolute_path,\n                \"text\": obj.text,\n                \"uuid\": str(obj.uuid),  # Convert UUID to string\n                \"contents\": [self.default(child) for child in obj.contents],\n                \"explanation\": obj.explanation,  # Assuming this can be serialized or is None\n                \"preliminary_context\": obj.preliminary_context,\n                \"metadata\": obj.metadata,\n                \"dependencies\": obj.dependencies,  # Assuming these can be serialized or are a list of serializable objects\n                \"expanded_state\": obj.expanded_state,\n                \"parent_uuid\": str(obj.parent.uuid) if obj.parent else None,\n                # \"parent\": obj.parent  # Omitting parent to avoid circular references\n            }\n\n# Add more elif blocks for other custom types\n\n# Fallback for unsupported types\n\nreturn str(obj)\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe0250>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe02d0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe0350>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe0410>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe04d0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe05d0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe0690>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe0750>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe0810>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe0590>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe0950>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe0a10>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe0ad0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe0b90>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe0c50>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe0d10>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe0dd0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe0e90>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe0f50>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe1010>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe10d0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe1190>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe1250>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe1310>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe13d0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe1490>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe1550>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe1610>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe16d0>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "bedab1d8-0f48-4f37-8662-4d1b8887a99e",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def default(self, obj):\n        log = False\n        if isinstance(obj, PythonEntity):\n            if log: print(\"PythonEntity\")\n            # Serialize basic attributes from Entity\n            entity_data = {\n                \"type\": obj.get_type(),\n                \"name\": obj.name,\n                \"absolute_path\": obj.absolute_path,\n                \"text\": obj.text,\n                \"uuid\": str(obj.uuid),  # Convert UUID to string\n                \"contents\": [self.default(child) for child in obj.contents],\n                \"explanation\": obj.explanation,  # Assuming this can be serialized or is None\n                \"preliminary_context\": obj.preliminary_context,\n                \"metadata\": obj.metadata,\n                \"dependencies\": obj.dependencies,  # Assuming these can be serialized or are a list of serializable objects\n                \"expanded_state\": obj.expanded_state,\n                \"parent_uuid\": str(obj.parent.uuid) if obj.parent else None,\n                \n                # \"parent\": obj.parent  # Omitting parent to avoid circular references\n            }\n            # Add PythonEntity-specific properties\n            entity_data.update({\n                \"node_type\": obj.node_type,\n                # For 'node', consider serializing key properties or omitting it\n                # \"node\": serialize_node(obj.node),\n                \"decorator\": obj.decorator,  # Decide how to serialize decorator\n                \"imports\": obj.imports,  # Assuming imports are a list of serializable strings\n                # \"dependencies\": [self.default(dep) for dep in obj.dependencies],  # If dependencies are complex objects\n                \"expanded_state\": obj.expanded_state,\n                \"source\": obj.source,\n            })\n            return entity_data\n        elif isinstance(obj, RootDirectory):\n            if log: print(\"RootDirectory\")\n            # Entity\n            entity_data = {\n                \"type\": obj.get_type(),\n                \"name\": obj.name,\n                \"absolute_path\": obj.absolute_path,\n                \"text\": obj.text,\n                \"uuid\": str(obj.uuid),  # Convert UUID to string\n                \"contents\": [self.default(child) for child in obj.contents],\n                \"explanation\": obj.explanation,  # Assuming this can be serialized or is None\n                \"preliminary_context\": obj.preliminary_context,\n                \"metadata\": obj.metadata,\n                \"dependencies\": obj.dependencies,  # Assuming these can be serialized or are a list of serializable objects\n                \"expanded_state\": obj.expanded_state,\n                \"parent_uuid\": str(obj.parent.uuid) if obj.parent else None,\n                # \"parent\": obj.parent  # Omitting parent to avoid circular references\n            }\n            # Directory\n            entity_data.update({\n                \"text\": obj.text,\n                \"metadata\": obj.metadata,  # Ensure metadata like num_folders/num_files is included\n                # Contents are already included by the Entity serialization logic\n            })\n            \n            # Add RootDirectory-specific properties\n            entity_data.update({\n                \"ignored_directories\": obj.ignored_directories,\n                \"preliminary_context\": obj.preliminary_context,\n                \"directory_name\": obj.directory_name,\n            })\n            return entity_data\n        # Convert objects of specific types to a dictionary\n        elif isinstance(obj, Directory):\n            if log: print(\"Directory\")\n            # Start with the Entity serialization\n            entity_data = {\n                \"type\": obj.get_type(),\n                \"name\": obj.name,\n                \"absolute_path\": obj.absolute_path,\n                \"text\": obj.text,\n                \"uuid\": str(obj.uuid),  # Convert UUID to string\n                \"contents\": [self.default(child) for child in obj.contents],\n                \"explanation\": obj.explanation,  # Assuming this can be serialized or is None\n                \"preliminary_context\": obj.preliminary_context,\n                \"metadata\": obj.metadata,\n                \"dependencies\": obj.dependencies,  # Assuming these can be serialized or are a list of serializable objects\n                \"expanded_state\": obj.expanded_state,\n                \"parent_uuid\": str(obj.parent.uuid) if obj.parent else None,\n                # \"parent\": obj.parent  # Omitting parent to avoid circular references\n            }\n            \n            # Add Directory-specific properties\n            entity_data.update({\n                \"text\": obj.text,\n                \"metadata\": obj.metadata,  # Ensure metadata like num_folders/num_files is included\n                # Contents are already included by the Entity serialization logic\n            })\n            return entity_data\n        elif isinstance(obj, Entity):\n            if log: print(\"Entity\")\n            return {\n                \"type\": obj.get_type(),\n                \"name\": obj.name,\n                \"absolute_path\": obj.absolute_path,\n                \"text\": obj.text,\n                \"uuid\": str(obj.uuid),  # Convert UUID to string\n                \"contents\": [self.default(child) for child in obj.contents],\n                \"explanation\": obj.explanation,  # Assuming this can be serialized or is None\n                \"preliminary_context\": obj.preliminary_context,\n                \"metadata\": obj.metadata,\n                \"dependencies\": obj.dependencies,  # Assuming these can be serialized or are a list of serializable objects\n                \"expanded_state\": obj.expanded_state,\n                \"parent_uuid\": str(obj.parent.uuid) if obj.parent else None,\n                # \"parent\": obj.parent  # Omitting parent to avoid circular references\n            }\n        \n        # Add more elif blocks for other custom types\n\n        # Fallback for unsupported types\n        return str(obj)"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "34b2fa7e-74e7-4caf-b0b8-40322b96b4f5",
              "node_type": "class_definition",
              "decorator": null,
              "imports": [],
              "source": "class CustomEncoder(json.JSONEncoder):\n    def default(self, obj):\n        log = False\n        if isinstance(obj, PythonEntity):\n            if log: print(\"PythonEntity\")\n            # Serialize basic attributes from Entity\n            entity_data = {\n                \"type\": obj.get_type(),\n                \"name\": obj.name,\n                \"absolute_path\": obj.absolute_path,\n                \"text\": obj.text,\n                \"uuid\": str(obj.uuid),  # Convert UUID to string\n                \"contents\": [self.default(child) for child in obj.contents],\n                \"explanation\": obj.explanation,  # Assuming this can be serialized or is None\n                \"preliminary_context\": obj.preliminary_context,\n                \"metadata\": obj.metadata,\n                \"dependencies\": obj.dependencies,  # Assuming these can be serialized or are a list of serializable objects\n                \"expanded_state\": obj.expanded_state,\n                \"parent_uuid\": str(obj.parent.uuid) if obj.parent else None,\n                \n                # \"parent\": obj.parent  # Omitting parent to avoid circular references\n            }\n            # Add PythonEntity-specific properties\n            entity_data.update({\n                \"node_type\": obj.node_type,\n                # For 'node', consider serializing key properties or omitting it\n                # \"node\": serialize_node(obj.node),\n                \"decorator\": obj.decorator,  # Decide how to serialize decorator\n                \"imports\": obj.imports,  # Assuming imports are a list of serializable strings\n                # \"dependencies\": [self.default(dep) for dep in obj.dependencies],  # If dependencies are complex objects\n                \"expanded_state\": obj.expanded_state,\n                \"source\": obj.source,\n            })\n            return entity_data\n        elif isinstance(obj, RootDirectory):\n            if log: print(\"RootDirectory\")\n            # Entity\n            entity_data = {\n                \"type\": obj.get_type(),\n                \"name\": obj.name,\n                \"absolute_path\": obj.absolute_path,\n                \"text\": obj.text,\n                \"uuid\": str(obj.uuid),  # Convert UUID to string\n                \"contents\": [self.default(child) for child in obj.contents],\n                \"explanation\": obj.explanation,  # Assuming this can be serialized or is None\n                \"preliminary_context\": obj.preliminary_context,\n                \"metadata\": obj.metadata,\n                \"dependencies\": obj.dependencies,  # Assuming these can be serialized or are a list of serializable objects\n                \"expanded_state\": obj.expanded_state,\n                \"parent_uuid\": str(obj.parent.uuid) if obj.parent else None,\n                # \"parent\": obj.parent  # Omitting parent to avoid circular references\n            }\n            # Directory\n            entity_data.update({\n                \"text\": obj.text,\n                \"metadata\": obj.metadata,  # Ensure metadata like num_folders/num_files is included\n                # Contents are already included by the Entity serialization logic\n            })\n            \n            # Add RootDirectory-specific properties\n            entity_data.update({\n                \"ignored_directories\": obj.ignored_directories,\n                \"preliminary_context\": obj.preliminary_context,\n                \"directory_name\": obj.directory_name,\n            })\n            return entity_data\n        # Convert objects of specific types to a dictionary\n        elif isinstance(obj, Directory):\n            if log: print(\"Directory\")\n            # Start with the Entity serialization\n            entity_data = {\n                \"type\": obj.get_type(),\n                \"name\": obj.name,\n                \"absolute_path\": obj.absolute_path,\n                \"text\": obj.text,\n                \"uuid\": str(obj.uuid),  # Convert UUID to string\n                \"contents\": [self.default(child) for child in obj.contents],\n                \"explanation\": obj.explanation,  # Assuming this can be serialized or is None\n                \"preliminary_context\": obj.preliminary_context,\n                \"metadata\": obj.metadata,\n                \"dependencies\": obj.dependencies,  # Assuming these can be serialized or are a list of serializable objects\n                \"expanded_state\": obj.expanded_state,\n                \"parent_uuid\": str(obj.parent.uuid) if obj.parent else None,\n                # \"parent\": obj.parent  # Omitting parent to avoid circular references\n            }\n            \n            # Add Directory-specific properties\n            entity_data.update({\n                \"text\": obj.text,\n                \"metadata\": obj.metadata,  # Ensure metadata like num_folders/num_files is included\n                # Contents are already included by the Entity serialization logic\n            })\n            return entity_data\n        elif isinstance(obj, Entity):\n            if log: print(\"Entity\")\n            return {\n                \"type\": obj.get_type(),\n                \"name\": obj.name,\n                \"absolute_path\": obj.absolute_path,\n                \"text\": obj.text,\n                \"uuid\": str(obj.uuid),  # Convert UUID to string\n                \"contents\": [self.default(child) for child in obj.contents],\n                \"explanation\": obj.explanation,  # Assuming this can be serialized or is None\n                \"preliminary_context\": obj.preliminary_context,\n                \"metadata\": obj.metadata,\n                \"dependencies\": obj.dependencies,  # Assuming these can be serialized or are a list of serializable objects\n                \"expanded_state\": obj.expanded_state,\n                \"parent_uuid\": str(obj.parent.uuid) if obj.parent else None,\n                # \"parent\": obj.parent  # Omitting parent to avoid circular references\n            }\n        \n        # Add more elif blocks for other custom types\n\n        # Fallback for unsupported types\n        return str(obj)"
            },
            {
              "type": "PythonEntity",
              "name": "__init__.py.top_level_module_code",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/__init__.py.top_level_module_code",
              "text": "",
              "uuid": "699471a3-960b-4218-b560-e3876ca08073",
              "contents": [],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "34b2fa7e-74e7-4caf-b0b8-40322b96b4f5",
              "node_type": "top_level_code",
              "decorator": null,
              "imports": [],
              "source": "# from conversational_codebase.knowledge.models.entity import Contents, DirectoryContents, Entity, FileContents\n\n# from typing import List\n\n# import os\n\n# class Directory(Entity):\n\n#     def __init__(self, path, parent=None):\n\n#         super().__init__(path, parent)\n\n#         self.contents = DirectoryContents(parent=self)\n\n# class File(Entity):\n\n#     def __init__(self, path, parent=None):\n\n#         super().__init__(path, parent)\n\n#         self.contents = FileContents(parent=self)\n\nimport json\n\nfrom conversational_codebase.entities.python import PythonEntity\n\nfrom conversational_codebase.entities.entity import Entity\n\nfrom conversational_codebase.entities.directory import Directory, RootDirectory\n\n# https://chat.openai.com/share/84f38ed3-324f-40d0-95fb-923a3a7e26fa\n\n# class CustomEncoder(json.JSONEncoder):\n\n#     def default(self, obj):\n\n#         log = True\n\n#         if isinstance(obj, PythonEntity):\n\n#             if log: print(\"PythonEntity\")\n\n#             # Serialize basic attributes from Entity\n\n#             entity_data = super().default(obj)\n\n#             # Add PythonEntity-specific properties\n\n#             entity_data.update({\n\n#                 \"node_type\": obj.node_type,\n\n#                 # For 'node', consider serializing key properties or omitting it\n\n#                 # \"node\": serialize_node(obj.node),\n\n#                 \"decorator\": obj.decorator,  # Decide how to serialize decorator\n\n#                 \"imports\": obj.imports,  # Assuming imports are a list of serializable strings\n\n#                 # \"dependencies\": [self.default(dep) for dep in obj.dependencies],  # If dependencies are complex objects\n\n#                 \"expanded_state\": obj.expanded_state,\n\n#             })\n\n#             return entity_data\n\n#         elif isinstance(obj, RootDirectory):\n\n#             if log: print(\"RootDirectory\")\n\n#             # Start with the Directory serialization\n\n#             directory_data = super().default(obj)\n\n#             # Add RootDirectory-specific properties\n\n#             directory_data.update({\n\n#                 \"ignored_directories\": obj.ignored_directories,\n\n#                 \"preliminary_context\": obj.preliminary_context,\n\n#                 \"directory_name\": obj.directory_name,\n\n#             })\n\n#             return directory_data\n\n#         # Convert objects of specific types to a dictionary\n\n#         elif isinstance(obj, Directory):\n\n#             if log: print(\"Directory\")\n\n#             # Start with the Entity serialization\n\n#             entity_data = super().default(obj)\n\n#             # Add Directory-specific properties\n\n#             entity_data.update({\n\n#                 \"text\": obj.text,\n\n#                 \"metadata\": obj.metadata,  # Ensure metadata like num_folders/num_files is included\n\n#                 # Contents are already included by the Entity serialization logic\n\n#             })\n\n#             return entity_data\n\n#         elif isinstance(obj, Entity):\n\n#             if log: print(\"Entity\")\n\n#             return {\n\n#                 \"name\": obj.name,\n\n#                 \"absolute_path\": obj.absolute_path,\n\n#                 \"text\": obj.text,\n\n#                 \"uuid\": str(obj.uuid),  # Convert UUID to string\n\n#                 \"contents\": [self.default(child) for child in obj.contents],\n\n#                 \"explanation\": obj.explanation,  # Assuming this can be serialized or is None\n\n#                 \"preliminary_context\": obj.preliminary_context,\n\n#                 \"metadata\": obj.metadata,\n\n#                 \"dependencies\": obj.dependencies,  # Assuming these can be serialized or are a list of serializable objects\n\n#                 \"expanded_state\": obj.expanded_state,\n\n#                 # \"parent\": obj.parent  # Omitting parent to avoid circular references\n\n#             }\n\n#         # Add more elif blocks for other custom types\n\n#         # Fallback for unsupported types\n\n#         return super().default(obj)\n\n"
            }
          ],
          "explanation": null,
          "preliminary_context": "",
          "metadata": {},
          "dependencies": [],
          "expanded_state": "unexpanded",
          "parent_uuid": "a419ab9a-2bad-475a-9cd6-ca0fe7ae3dde",
          "node_type": "module",
          "decorator": null,
          "imports": [
            "<Node type=module, start_point=(0, 0), end_point=(198, 37)>",
            "<Node type=module, start_point=(0, 0), end_point=(198, 37)>",
            "<Node type=module, start_point=(0, 0), end_point=(198, 37)>",
            "<Node type=module, start_point=(0, 0), end_point=(198, 37)>"
          ],
          "source": "# from conversational_codebase.knowledge.models.entity import Contents, DirectoryContents, Entity, FileContents\n# from typing import List\n# import os\n\n# class Directory(Entity):\n#     def __init__(self, path, parent=None):\n#         super().__init__(path, parent)\n#         self.contents = DirectoryContents(parent=self)\n\n\n# class File(Entity):\n#     def __init__(self, path, parent=None):\n#         super().__init__(path, parent)\n#         self.contents = FileContents(parent=self)\n\nimport json\nfrom conversational_codebase.entities.python import PythonEntity\nfrom conversational_codebase.entities.entity import Entity\nfrom conversational_codebase.entities.directory import Directory, RootDirectory\n\n# https://chat.openai.com/share/84f38ed3-324f-40d0-95fb-923a3a7e26fa\n\nclass CustomEncoder(json.JSONEncoder):\n    def default(self, obj):\n        log = False\n        if isinstance(obj, PythonEntity):\n            if log: print(\"PythonEntity\")\n            # Serialize basic attributes from Entity\n            entity_data = {\n                \"type\": obj.get_type(),\n                \"name\": obj.name,\n                \"absolute_path\": obj.absolute_path,\n                \"text\": obj.text,\n                \"uuid\": str(obj.uuid),  # Convert UUID to string\n                \"contents\": [self.default(child) for child in obj.contents],\n                \"explanation\": obj.explanation,  # Assuming this can be serialized or is None\n                \"preliminary_context\": obj.preliminary_context,\n                \"metadata\": obj.metadata,\n                \"dependencies\": obj.dependencies,  # Assuming these can be serialized or are a list of serializable objects\n                \"expanded_state\": obj.expanded_state,\n                \"parent_uuid\": str(obj.parent.uuid) if obj.parent else None,\n                \n                # \"parent\": obj.parent  # Omitting parent to avoid circular references\n            }\n            # Add PythonEntity-specific properties\n            entity_data.update({\n                \"node_type\": obj.node_type,\n                # For 'node', consider serializing key properties or omitting it\n                # \"node\": serialize_node(obj.node),\n                \"decorator\": obj.decorator,  # Decide how to serialize decorator\n                \"imports\": obj.imports,  # Assuming imports are a list of serializable strings\n                # \"dependencies\": [self.default(dep) for dep in obj.dependencies],  # If dependencies are complex objects\n                \"expanded_state\": obj.expanded_state,\n                \"source\": obj.source,\n            })\n            return entity_data\n        elif isinstance(obj, RootDirectory):\n            if log: print(\"RootDirectory\")\n            # Entity\n            entity_data = {\n                \"type\": obj.get_type(),\n                \"name\": obj.name,\n                \"absolute_path\": obj.absolute_path,\n                \"text\": obj.text,\n                \"uuid\": str(obj.uuid),  # Convert UUID to string\n                \"contents\": [self.default(child) for child in obj.contents],\n                \"explanation\": obj.explanation,  # Assuming this can be serialized or is None\n                \"preliminary_context\": obj.preliminary_context,\n                \"metadata\": obj.metadata,\n                \"dependencies\": obj.dependencies,  # Assuming these can be serialized or are a list of serializable objects\n                \"expanded_state\": obj.expanded_state,\n                \"parent_uuid\": str(obj.parent.uuid) if obj.parent else None,\n                # \"parent\": obj.parent  # Omitting parent to avoid circular references\n            }\n            # Directory\n            entity_data.update({\n                \"text\": obj.text,\n                \"metadata\": obj.metadata,  # Ensure metadata like num_folders/num_files is included\n                # Contents are already included by the Entity serialization logic\n            })\n            \n            # Add RootDirectory-specific properties\n            entity_data.update({\n                \"ignored_directories\": obj.ignored_directories,\n                \"preliminary_context\": obj.preliminary_context,\n                \"directory_name\": obj.directory_name,\n            })\n            return entity_data\n        # Convert objects of specific types to a dictionary\n        elif isinstance(obj, Directory):\n            if log: print(\"Directory\")\n            # Start with the Entity serialization\n            entity_data = {\n                \"type\": obj.get_type(),\n                \"name\": obj.name,\n                \"absolute_path\": obj.absolute_path,\n                \"text\": obj.text,\n                \"uuid\": str(obj.uuid),  # Convert UUID to string\n                \"contents\": [self.default(child) for child in obj.contents],\n                \"explanation\": obj.explanation,  # Assuming this can be serialized or is None\n                \"preliminary_context\": obj.preliminary_context,\n                \"metadata\": obj.metadata,\n                \"dependencies\": obj.dependencies,  # Assuming these can be serialized or are a list of serializable objects\n                \"expanded_state\": obj.expanded_state,\n                \"parent_uuid\": str(obj.parent.uuid) if obj.parent else None,\n                # \"parent\": obj.parent  # Omitting parent to avoid circular references\n            }\n            \n            # Add Directory-specific properties\n            entity_data.update({\n                \"text\": obj.text,\n                \"metadata\": obj.metadata,  # Ensure metadata like num_folders/num_files is included\n                # Contents are already included by the Entity serialization logic\n            })\n            return entity_data\n        elif isinstance(obj, Entity):\n            if log: print(\"Entity\")\n            return {\n                \"type\": obj.get_type(),\n                \"name\": obj.name,\n                \"absolute_path\": obj.absolute_path,\n                \"text\": obj.text,\n                \"uuid\": str(obj.uuid),  # Convert UUID to string\n                \"contents\": [self.default(child) for child in obj.contents],\n                \"explanation\": obj.explanation,  # Assuming this can be serialized or is None\n                \"preliminary_context\": obj.preliminary_context,\n                \"metadata\": obj.metadata,\n                \"dependencies\": obj.dependencies,  # Assuming these can be serialized or are a list of serializable objects\n                \"expanded_state\": obj.expanded_state,\n                \"parent_uuid\": str(obj.parent.uuid) if obj.parent else None,\n                # \"parent\": obj.parent  # Omitting parent to avoid circular references\n            }\n        \n        # Add more elif blocks for other custom types\n\n        # Fallback for unsupported types\n        return str(obj)\n\n# class CustomEncoder(json.JSONEncoder):\n#     def default(self, obj):\n#         log = True\n#         if isinstance(obj, PythonEntity):\n#             if log: print(\"PythonEntity\")\n#             # Serialize basic attributes from Entity\n#             entity_data = super().default(obj)\n#             # Add PythonEntity-specific properties\n#             entity_data.update({\n#                 \"node_type\": obj.node_type,\n#                 # For 'node', consider serializing key properties or omitting it\n#                 # \"node\": serialize_node(obj.node),\n#                 \"decorator\": obj.decorator,  # Decide how to serialize decorator\n#                 \"imports\": obj.imports,  # Assuming imports are a list of serializable strings\n#                 # \"dependencies\": [self.default(dep) for dep in obj.dependencies],  # If dependencies are complex objects\n#                 \"expanded_state\": obj.expanded_state,\n#             })\n#             return entity_data\n#         elif isinstance(obj, RootDirectory):\n#             if log: print(\"RootDirectory\")\n#             # Start with the Directory serialization\n#             directory_data = super().default(obj)\n#             # Add RootDirectory-specific properties\n#             directory_data.update({\n#                 \"ignored_directories\": obj.ignored_directories,\n#                 \"preliminary_context\": obj.preliminary_context,\n#                 \"directory_name\": obj.directory_name,\n#             })\n#             return directory_data\n#         # Convert objects of specific types to a dictionary\n#         elif isinstance(obj, Directory):\n#             if log: print(\"Directory\")\n#             # Start with the Entity serialization\n#             entity_data = super().default(obj)\n#             # Add Directory-specific properties\n#             entity_data.update({\n#                 \"text\": obj.text,\n#                 \"metadata\": obj.metadata,  # Ensure metadata like num_folders/num_files is included\n#                 # Contents are already included by the Entity serialization logic\n#             })\n#             return entity_data\n#         elif isinstance(obj, Entity):\n#             if log: print(\"Entity\")\n#             return {\n#                 \"name\": obj.name,\n#                 \"absolute_path\": obj.absolute_path,\n#                 \"text\": obj.text,\n#                 \"uuid\": str(obj.uuid),  # Convert UUID to string\n#                 \"contents\": [self.default(child) for child in obj.contents],\n#                 \"explanation\": obj.explanation,  # Assuming this can be serialized or is None\n#                 \"preliminary_context\": obj.preliminary_context,\n#                 \"metadata\": obj.metadata,\n#                 \"dependencies\": obj.dependencies,  # Assuming these can be serialized or are a list of serializable objects\n#                 \"expanded_state\": obj.expanded_state,\n#                 # \"parent\": obj.parent  # Omitting parent to avoid circular references\n#             }\n        \n#         # Add more elif blocks for other custom types\n\n#         # Fallback for unsupported types\n#         return super().default(obj)"
        },
        {
          "type": "Directory",
          "name": "__pycache__",
          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/__pycache__",
          "text": "__pycache__/\n\u251c\u2500\u2500 __init__.cpython-311.pyc\n\u251c\u2500\u2500 directory.cpython-311.pyc\n\u251c\u2500\u2500 entity.cpython-311.pyc\n\u251c\u2500\u2500 file.cpython-311.pyc\n\u2514\u2500\u2500 python.cpython-311.pyc\n",
          "uuid": "3f193b1e-114f-4c1e-92db-af1b514eb5d3",
          "contents": [
            {
              "type": "UnsupportedFile",
              "name": "file.cpython-311.pyc",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/__pycache__/file.cpython-311.pyc",
              "text": "",
              "uuid": "cd741648-57ac-4e8c-a62d-e774b53eb949",
              "contents": [],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {
                "file_size": 1716
              },
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "3f193b1e-114f-4c1e-92db-af1b514eb5d3"
            },
            {
              "type": "UnsupportedFile",
              "name": "entity.cpython-311.pyc",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/__pycache__/entity.cpython-311.pyc",
              "text": "",
              "uuid": "9ca8e9c8-4c68-40d4-9279-3e287ff50b6e",
              "contents": [],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {
                "file_size": 4374
              },
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "3f193b1e-114f-4c1e-92db-af1b514eb5d3"
            },
            {
              "type": "UnsupportedFile",
              "name": "directory.cpython-311.pyc",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/__pycache__/directory.cpython-311.pyc",
              "text": "",
              "uuid": "25528849-822e-41cd-a71b-4835191a2eaa",
              "contents": [],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {
                "file_size": 7253
              },
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "3f193b1e-114f-4c1e-92db-af1b514eb5d3"
            },
            {
              "type": "UnsupportedFile",
              "name": "python.cpython-311.pyc",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/__pycache__/python.cpython-311.pyc",
              "text": "",
              "uuid": "abdcd39b-b805-4018-a171-9a324937af62",
              "contents": [],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {
                "file_size": 27473
              },
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "3f193b1e-114f-4c1e-92db-af1b514eb5d3"
            },
            {
              "type": "UnsupportedFile",
              "name": "__init__.cpython-311.pyc",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/__pycache__/__init__.cpython-311.pyc",
              "text": "",
              "uuid": "54e0c577-ae4c-41b5-9bd2-02ddd21a8a25",
              "contents": [],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {
                "file_size": 4847
              },
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "3f193b1e-114f-4c1e-92db-af1b514eb5d3"
            }
          ],
          "explanation": null,
          "preliminary_context": "",
          "metadata": {
            "num_files": 5
          },
          "dependencies": [],
          "expanded_state": "expanded",
          "parent_uuid": "a419ab9a-2bad-475a-9cd6-ca0fe7ae3dde"
        },
        {
          "type": "PythonEntity",
          "name": "file.py",
          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/file.py",
          "text": "",
          "uuid": "0300c188-1570-49f0-adeb-1c4945cdd653",
          "contents": [
            {
              "type": "PythonEntity",
              "name": "file.py.File",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/file.py.File",
              "text": "",
              "uuid": "18d717f5-2628-40cd-81a5-964a4ffa7c76",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "file.py.File.__init__",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/file.py.File.__init__",
                  "text": "",
                  "uuid": "909ecf63-1dbe-4ee8-b510-37b4770e8417",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "file.py.File.__init__.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/file.py.File.__init__.top_level_function_definition_code",
                      "text": "",
                      "uuid": "846ea8f5-50a7-486b-8709-7ae350585627",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "909ecf63-1dbe-4ee8-b510-37b4770e8417",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "super().__init__(absolute_path, parent)\n\nself.metadata[\"file_size\"] = os.path.getsize(absolute_path)\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abd4dd0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abd4e10>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abd4e50>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "18d717f5-2628-40cd-81a5-964a4ffa7c76",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def __init__(self, absolute_path, parent):\n        super().__init__(absolute_path, parent)\n        self.metadata[\"file_size\"] = os.path.getsize(absolute_path)"
                },
                {
                  "type": "PythonEntity",
                  "name": "file.py.File.expand",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/file.py.File.expand",
                  "text": "",
                  "uuid": "d506463e-64eb-4a5b-98a8-3c0e2a30068a",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "file.py.File.expand.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/file.py.File.expand.top_level_function_definition_code",
                      "text": "",
                      "uuid": "5e55cb21-9a1c-45d1-b017-0a0c176a4837",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "d506463e-64eb-4a5b-98a8-3c0e2a30068a",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "pass\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "18d717f5-2628-40cd-81a5-964a4ffa7c76",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def expand(self): \n        pass"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "0300c188-1570-49f0-adeb-1c4945cdd653",
              "node_type": "class_definition",
              "decorator": null,
              "imports": [],
              "source": "class File(Entity):\n    def __init__(self, absolute_path, parent):\n        super().__init__(absolute_path, parent)\n        self.metadata[\"file_size\"] = os.path.getsize(absolute_path)\n\n    def expand(self): \n        pass"
            },
            {
              "type": "PythonEntity",
              "name": "file.py.UnsupportedFile",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/file.py.UnsupportedFile",
              "text": "",
              "uuid": "de7cde94-8247-49d1-869a-f71685bee9f8",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "file.py.UnsupportedFile.__init__",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/file.py.UnsupportedFile.__init__",
                  "text": "",
                  "uuid": "d6845e44-414b-4c61-b6a8-d58ec78c8ca5",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "file.py.UnsupportedFile.__init__.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/file.py.UnsupportedFile.__init__.top_level_function_definition_code",
                      "text": "",
                      "uuid": "ab672717-413d-426a-aa8f-a5cc59062b14",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "d6845e44-414b-4c61-b6a8-d58ec78c8ca5",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "super().__init__(absolute_path, parent)\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abd0b50>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abd0bd0>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "de7cde94-8247-49d1-869a-f71685bee9f8",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def __init__(self, absolute_path, parent=None):\n        super().__init__(absolute_path, parent)"
                },
                {
                  "type": "PythonEntity",
                  "name": "file.py.UnsupportedFile.expand",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/file.py.UnsupportedFile.expand",
                  "text": "",
                  "uuid": "b6e5fccb-057b-4297-9b23-6c67cdcc3f42",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "file.py.UnsupportedFile.expand.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/file.py.UnsupportedFile.expand.top_level_function_definition_code",
                      "text": "",
                      "uuid": "132318e1-cef5-4e4b-9552-65e109d09917",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "b6e5fccb-057b-4297-9b23-6c67cdcc3f42",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "pass\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "de7cde94-8247-49d1-869a-f71685bee9f8",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def expand(self):\n        pass"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "0300c188-1570-49f0-adeb-1c4945cdd653",
              "node_type": "class_definition",
              "decorator": null,
              "imports": [],
              "source": "class UnsupportedFile(File):\n    def __init__(self, absolute_path, parent=None):\n        super().__init__(absolute_path, parent)\n\n    def expand(self):\n        pass"
            },
            {
              "type": "PythonEntity",
              "name": "file.py.top_level_module_code",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/file.py.top_level_module_code",
              "text": "",
              "uuid": "b8a7c884-5397-4549-b192-0cf68f473593",
              "contents": [],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "0300c188-1570-49f0-adeb-1c4945cdd653",
              "node_type": "top_level_code",
              "decorator": null,
              "imports": [],
              "source": "import os\n\n# at the bottom to prevent circular imports\n\nfrom .entity import Entity\n\n"
            }
          ],
          "explanation": null,
          "preliminary_context": "",
          "metadata": {},
          "dependencies": [],
          "expanded_state": "unexpanded",
          "parent_uuid": "a419ab9a-2bad-475a-9cd6-ca0fe7ae3dde",
          "node_type": "module",
          "decorator": null,
          "imports": [
            "<Node type=module, start_point=(0, 0), end_point=(19, 0)>",
            "<Node type=module, start_point=(0, 0), end_point=(19, 0)>"
          ],
          "source": "import os\n# at the bottom to prevent circular imports\nfrom .entity import Entity\n\nclass File(Entity):\n    def __init__(self, absolute_path, parent):\n        super().__init__(absolute_path, parent)\n        self.metadata[\"file_size\"] = os.path.getsize(absolute_path)\n\n    def expand(self): \n        pass\n\nclass UnsupportedFile(File):\n    def __init__(self, absolute_path, parent=None):\n        super().__init__(absolute_path, parent)\n\n    def expand(self):\n        pass\n\n"
        },
        {
          "type": "PythonEntity",
          "name": "text.py",
          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/text.py",
          "text": "",
          "uuid": "b8cfa3eb-712d-4ae4-809c-89e0a6d63a94",
          "contents": [
            {
              "type": "PythonEntity",
              "name": "text.py.Text",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/text.py.Text",
              "text": "",
              "uuid": "ec4da2e7-d0c4-44bd-9830-6af9cc0663ba",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "text.py.Text.__init__",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/text.py.Text.__init__",
                  "text": "",
                  "uuid": "c1828c67-ad3d-4292-a23e-98813f25f228",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "text.py.Text.__init__.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/text.py.Text.__init__.top_level_function_definition_code",
                      "text": "",
                      "uuid": "7ff95f99-41fe-4865-acb4-b64055bf7afd",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "c1828c67-ad3d-4292-a23e-98813f25f228",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "super().__init__(f\"{parent.absolute_path}/#TEXT\", parent)\n\nself.text = text\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abd1290>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abd12d0>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "ec4da2e7-d0c4-44bd-9830-6af9cc0663ba",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def __init__(self, text, parent):\n        super().__init__(f\"{parent.absolute_path}/#TEXT\", parent)\n        self.text = text"
                },
                {
                  "type": "PythonEntity",
                  "name": "text.py.Text.expand",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/text.py.Text.expand",
                  "text": "",
                  "uuid": "64d037fc-a7a8-4e78-b17b-81e426f1db6d",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "text.py.Text.expand.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/text.py.Text.expand.top_level_function_definition_code",
                      "text": "",
                      "uuid": "63a60368-6753-4142-9f62-acd1108d12f3",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "64d037fc-a7a8-4e78-b17b-81e426f1db6d",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "pass\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "ec4da2e7-d0c4-44bd-9830-6af9cc0663ba",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def expand(self):\n        pass"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "b8cfa3eb-712d-4ae4-809c-89e0a6d63a94",
              "node_type": "class_definition",
              "decorator": null,
              "imports": [],
              "source": "class Text(Entity):\n    def __init__(self, text, parent):\n        super().__init__(f\"{parent.absolute_path}/#TEXT\", parent)\n        self.text = text\n    \n    def expand(self):\n        pass"
            },
            {
              "type": "PythonEntity",
              "name": "text.py.top_level_module_code",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/text.py.top_level_module_code",
              "text": "",
              "uuid": "3b22eb7f-1c8a-4df7-be8f-23dab253c32a",
              "contents": [],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "b8cfa3eb-712d-4ae4-809c-89e0a6d63a94",
              "node_type": "top_level_code",
              "decorator": null,
              "imports": [],
              "source": "# at the bottom to prevent circular imports\n\nfrom .entity import Entity\n\n"
            }
          ],
          "explanation": null,
          "preliminary_context": "",
          "metadata": {},
          "dependencies": [],
          "expanded_state": "unexpanded",
          "parent_uuid": "a419ab9a-2bad-475a-9cd6-ca0fe7ae3dde",
          "node_type": "module",
          "decorator": null,
          "imports": [
            "<Node type=module, start_point=(0, 0), end_point=(10, 0)>"
          ],
          "source": "# at the bottom to prevent circular imports\nfrom .entity import Entity\n\nclass Text(Entity):\n    def __init__(self, text, parent):\n        super().__init__(f\"{parent.absolute_path}/#TEXT\", parent)\n        self.text = text\n    \n    def expand(self):\n        pass\n"
        },
        {
          "type": "PythonEntity",
          "name": "python.py",
          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py",
          "text": "",
          "uuid": "032c3360-d193-4aa7-9f2c-0520d2609c6d",
          "contents": [
            {
              "type": "PythonEntity",
              "name": "python.py.convert_ast_to_source",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.convert_ast_to_source",
              "text": "",
              "uuid": "19629e6c-2f88-44e6-a332-6c3cd5bc899e",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "python.py.convert_ast_to_source.top_level_function_definition_code",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.convert_ast_to_source.top_level_function_definition_code",
                  "text": "",
                  "uuid": "be3bbcd4-acaa-4d5b-9d07-1f614a51fd2e",
                  "contents": [],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "19629e6c-2f88-44e6-a332-6c3cd5bc899e",
                  "node_type": "top_level_code",
                  "decorator": null,
                  "imports": [],
                  "source": "\"\"\"\n    Convert a list of AST nodes back to source code.\n    This function uses ast.get_source_segment to extract source code\n    for each AST node from the original source code string.\n    \"\"\"\n\nsource_segments = []\n\nfor node in node:\n        segment = ast.get_source_segment(source, node)\n        if segment:\n            source_segments.append(segment)\n\nreturn '\\n'.join(source_segments)\n\n"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abc8690>",
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abc86d0>",
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abc5a50>"
              ],
              "expanded_state": "unexpanded",
              "parent_uuid": "032c3360-d193-4aa7-9f2c-0520d2609c6d",
              "node_type": "function_definition",
              "decorator": null,
              "imports": [],
              "source": "def convert_ast_to_source(node, source):\n    \"\"\"\n    Convert a list of AST nodes back to source code.\n    This function uses ast.get_source_segment to extract source code\n    for each AST node from the original source code string.\n    \"\"\"\n    source_segments = []\n    for node in node:\n        segment = ast.get_source_segment(source, node)\n        if segment:\n            source_segments.append(segment)\n    return '\\n'.join(source_segments)"
            },
            {
              "type": "PythonEntity",
              "name": "python.py.SourceCode",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.SourceCode",
              "text": "",
              "uuid": "7ae86f7d-a510-4584-8f46-c950198195a5",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "python.py.SourceCode.__init__",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.SourceCode.__init__",
                  "text": "",
                  "uuid": "2dda8e39-f0f2-4387-bafe-d51f4409f655",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "python.py.SourceCode.__init__.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.SourceCode.__init__.top_level_function_definition_code",
                      "text": "",
                      "uuid": "376f6aab-e231-476e-9d1a-143caca98241",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "2dda8e39-f0f2-4387-bafe-d51f4409f655",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "super().__init__(f\"{parent.absolute_path}/{name}\", parent)\n\nself.source_code = source_code\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abc78d0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abc7ad0>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "7ae86f7d-a510-4584-8f46-c950198195a5",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def __init__(self, name, parent, source_code):\n        super().__init__(f\"{parent.absolute_path}/{name}\", parent)\n        self.source_code = source_code"
                },
                {
                  "type": "PythonEntity",
                  "name": "python.py.SourceCode.expand",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.SourceCode.expand",
                  "text": "",
                  "uuid": "4611e857-8a35-4efd-b5e1-c76ded2d47e8",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "python.py.SourceCode.expand.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.SourceCode.expand.top_level_function_definition_code",
                      "text": "",
                      "uuid": "ae76d45f-7cdc-47ee-bf96-93325163eab7",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "4611e857-8a35-4efd-b5e1-c76ded2d47e8",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "pass\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "7ae86f7d-a510-4584-8f46-c950198195a5",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def expand(self):\n        pass"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "032c3360-d193-4aa7-9f2c-0520d2609c6d",
              "node_type": "class_definition",
              "decorator": null,
              "imports": [],
              "source": "class SourceCode(Entity):\n    def __init__(self, name, parent, source_code):\n        super().__init__(f\"{parent.absolute_path}/{name}\", parent)\n        self.source_code = source_code\n    \n    def expand(self):\n        pass"
            },
            {
              "type": "PythonEntity",
              "name": "python.py.get_children_by_grammar_name",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.get_children_by_grammar_name",
              "text": "",
              "uuid": "95c1dd4d-0f1f-492e-b8c7-fbff7df762cd",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "python.py.get_children_by_grammar_name.top_level_function_definition_code",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.get_children_by_grammar_name.top_level_function_definition_code",
                  "text": "",
                  "uuid": "a869b8ce-3237-41db-82eb-011579000003",
                  "contents": [],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "95c1dd4d-0f1f-492e-b8c7-fbff7df762cd",
                  "node_type": "top_level_code",
                  "decorator": null,
                  "imports": [],
                  "source": "matched_children = []\n\nfor child in node.children:\n        if child.type == grammar_name:\n            matched_children.append(child)\n\nreturn matched_children\n\n"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abc3e50>"
              ],
              "expanded_state": "unexpanded",
              "parent_uuid": "032c3360-d193-4aa7-9f2c-0520d2609c6d",
              "node_type": "function_definition",
              "decorator": null,
              "imports": [],
              "source": "def get_children_by_grammar_name(node: Node, grammar_name: str) -> list[Node]:\n    matched_children = []\n    for child in node.children:\n        if child.type == grammar_name:\n            matched_children.append(child)\n\n    return matched_children"
            },
            {
              "type": "PythonEntity",
              "name": "python.py.PythonCallDependency",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonCallDependency",
              "text": "",
              "uuid": "0083637f-7ce9-4cd4-b021-6bc8d235a544",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "python.py.PythonCallDependency.__init__",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonCallDependency.__init__",
                  "text": "",
                  "uuid": "9b277889-10f0-4ae0-af9e-5afb6a089a6b",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "python.py.PythonCallDependency.__init__.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonCallDependency.__init__.top_level_function_definition_code",
                      "text": "",
                      "uuid": "3187f559-7aaa-46aa-8d8d-d2ee1381a95b",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "9b277889-10f0-4ae0-af9e-5afb6a089a6b",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "self.node = node\n\n# Name of the dependency (e.g., imported module, called function)\n\nself.entity = dependent_entity\n\nself.reference_start_location = node.start_point\n\n# Start location of the reference in the source code\n\nself.resolved = False\n\n# Status of dependency resolution\n\nself.resolved_entity = None\n\n# Where the dependency is resolved (e.g., file path)\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "0083637f-7ce9-4cd4-b021-6bc8d235a544",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def __init__(self, node, dependent_entity):\n        self.node = node  # Name of the dependency (e.g., imported module, called function)\n        self.entity = dependent_entity\n        self.reference_start_location = node.start_point # Start location of the reference in the source code\n        self.resolved = False # Status of dependency resolution\n        self.resolved_entity = None  # Where the dependency is resolved (e.g., file path)"
                },
                {
                  "type": "PythonEntity",
                  "name": "python.py.PythonCallDependency.resolve",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonCallDependency.resolve",
                  "text": "",
                  "uuid": "eea2ddd6-2df6-49ac-87c0-2babdcbcf737",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "python.py.PythonCallDependency.resolve.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonCallDependency.resolve.top_level_function_definition_code",
                      "text": "",
                      "uuid": "7683e48c-1e95-44ef-b6ca-a462ddf70a83",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "eea2ddd6-2df6-49ac-87c0-2babdcbcf737",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "self.resolved_entity = self._entity_definition_provider()\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abc30d0>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "0083637f-7ce9-4cd4-b021-6bc8d235a544",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def resolve(self):\n        # \"\"\"\n        # Implement the logic to resolve the dependency within the given codebase.\n        # The codebase parameter could be a structure representing the entire knowledge tree.\n        \n        # This method should update self.resolved and self.resolution_location based on whether\n        # and where the dependency is found within the codebase.\n        # \"\"\"\n        # # Example pseudocode for resolution logic:\n        # # 1. Search the codebase for the reference.\n        # # 2. If found, update self.resolved to True and self.resolution_location to the location found.\n        # # 3. If not found, self.resolved remains False.\n\n        # # This is a simplified representation. The actual implementation would depend on\n        # # the structure of your codebase and how you're tracking entities within it.\n        self.resolved_entity = self._entity_definition_provider()"
                },
                {
                  "type": "PythonEntity",
                  "name": "python.py.PythonCallDependency._entity_definition_provider",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonCallDependency._entity_definition_provider",
                  "text": "",
                  "uuid": "f8071b3d-0879-4f7a-a7bf-cb7398ce1d0b",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "python.py.PythonCallDependency._entity_definition_provider.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonCallDependency._entity_definition_provider.top_level_function_definition_code",
                      "text": "",
                      "uuid": "78533be1-3584-42a1-b6db-2bd21028a129",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "f8071b3d-0879-4f7a-a7bf-cb7398ce1d0b",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "project = jedi.Project(self.entity.get_root().absolute_path)\n\n# TODO: Could refactor this out if it causes unneccessary overhead\n\nscript = jedi.Script(path=self.entity.get_file_path(),\n                        # environment=\"/opt/homebrew/bin/python3\", # TODO: allow user to set environment\n                        project=project)\n\nline, col = self.reference_start_location\n\nresult = script.goto(line+1, col, follow_imports=True, follow_builtin_imports=True)\n\n# TODO: Determine if we need to add 1 to line- it seems like tree-sitter is off by 1\n\nif not result: result = script.goto(line+1, col) # TODO: Figure out why it cant find external packages with follow_imports=True\n\nif result:\n            if len(result) > 1: print(f\"Warning: multiple results for {self.name} at {self.reference_start_location}\")\n            result = result[0] # TODO: handle where there are multiple results\n            self.name_resolved = True\n\n            full_name = getattr(result, 'full_name', None)\n            if full_name is not None:\n                return self._find_entity_from_full_name(result)\n            else:\n                raise ValueError(f\"Result {result} does not have a full_name attribute\")\n\nreturn None\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe3e90>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe3f10>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe3fd0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe80d0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe8190>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe8290>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe8350>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe8410>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe84d0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe8250>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe8610>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "0083637f-7ce9-4cd4-b021-6bc8d235a544",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def _entity_definition_provider(self):\n        project = jedi.Project(self.entity.get_root().absolute_path) # TODO: Could refactor this out if it causes unneccessary overhead\n        script = jedi.Script(path=self.entity.get_file_path(),\n                        # environment=\"/opt/homebrew/bin/python3\", # TODO: allow user to set environment\n                        project=project)\n        line, col = self.reference_start_location\n        result = script.goto(line+1, col, follow_imports=True, follow_builtin_imports=True) # TODO: Determine if we need to add 1 to line- it seems like tree-sitter is off by 1\n        if not result: result = script.goto(line+1, col) # TODO: Figure out why it cant find external packages with follow_imports=True\n\n        if result:\n            if len(result) > 1: print(f\"Warning: multiple results for {self.name} at {self.reference_start_location}\")\n            result = result[0] # TODO: handle where there are multiple results\n            self.name_resolved = True\n\n            full_name = getattr(result, 'full_name', None)\n            if full_name is not None:\n                return self._find_entity_from_full_name(result)\n            else:\n                raise ValueError(f\"Result {result} does not have a full_name attribute\")\n        \n        return None"
                },
                {
                  "type": "PythonEntity",
                  "name": "python.py.PythonCallDependency._find_entity_from_full_name",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonCallDependency._find_entity_from_full_name",
                  "text": "",
                  "uuid": "48855ac2-451a-4a59-8f9e-72dfbbad0661",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "python.py.PythonCallDependency._find_entity_from_full_name.dfs",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonCallDependency._find_entity_from_full_name.dfs",
                      "text": "",
                      "uuid": "69eaa30c-688c-418b-9bc7-7caad67e16d9",
                      "contents": [
                        {
                          "type": "PythonEntity",
                          "name": "python.py.PythonCallDependency._find_entity_from_full_name.dfs.top_level_function_definition_code",
                          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonCallDependency._find_entity_from_full_name.dfs.top_level_function_definition_code",
                          "text": "",
                          "uuid": "f8d64f53-cf11-47cf-9493-494c1579cdee",
                          "contents": [],
                          "explanation": null,
                          "preliminary_context": "",
                          "metadata": {},
                          "dependencies": [],
                          "expanded_state": "unexpanded",
                          "parent_uuid": "69eaa30c-688c-418b-9bc7-7caad67e16d9",
                          "node_type": "top_level_code",
                          "decorator": null,
                          "imports": [],
                          "source": "if entity.get_absolute_path() == entity_path:\n                self.resolved = True\n                return entity\n\n# Base case: return if entity does not have contents or contents is empty\n\nif not hasattr(entity, 'contents') or not entity.contents:\n                print(f\"WARNING: Could not find {entity_path} in {entity.get_absolute_path()}, but the name was found in the codebase\")\n                return\n\nfor sub_entity in entity.contents:\n                dfs(sub_entity, entity_path)\n\n"
                        }
                      ],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe9210>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe9290>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe9350>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe9410>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe94d0>"
                      ],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "48855ac2-451a-4a59-8f9e-72dfbbad0661",
                      "node_type": "function_definition",
                      "decorator": null,
                      "imports": [],
                      "source": "def dfs(entity, entity_path):\n            if entity.get_absolute_path() == entity_path:\n                self.resolved = True\n                return entity\n            # Base case: return if entity does not have contents or contents is empty\n            if not hasattr(entity, 'contents') or not entity.contents:\n                print(f\"WARNING: Could not find {entity_path} in {entity.get_absolute_path()}, but the name was found in the codebase\")\n                return\n            for sub_entity in entity.contents:\n                dfs(sub_entity, entity_path)"
                    },
                    {
                      "type": "PythonEntity",
                      "name": "python.py.PythonCallDependency._find_entity_from_full_name.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonCallDependency._find_entity_from_full_name.top_level_function_definition_code",
                      "text": "",
                      "uuid": "d63b8832-128e-4ce0-87b0-6a1bae522d57",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "48855ac2-451a-4a59-8f9e-72dfbbad0661",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "entity_path = result.module_path + result.full_name\n\n# try to find the entity in the kg\n\nreturn dfs(self.entity.get_root(), entity_path)\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abdc950>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abe8990>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "0083637f-7ce9-4cd4-b021-6bc8d235a544",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def _find_entity_from_full_name(self, result: Name):\n        # first look for the first part of the name in the current directory (either file or folder)\n        entity_path = result.module_path + result.full_name\n\n        # try to find the entity in the kg\n        def dfs(entity, entity_path):\n            if entity.get_absolute_path() == entity_path:\n                self.resolved = True\n                return entity\n            # Base case: return if entity does not have contents or contents is empty\n            if not hasattr(entity, 'contents') or not entity.contents:\n                print(f\"WARNING: Could not find {entity_path} in {entity.get_absolute_path()}, but the name was found in the codebase\")\n                return\n            for sub_entity in entity.contents:\n                dfs(sub_entity, entity_path)\n\n        return dfs(self.entity.get_root(), entity_path)"
                },
                {
                  "type": "PythonEntity",
                  "name": "python.py.PythonCallDependency.top_level_class_definition_code",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonCallDependency.top_level_class_definition_code",
                  "text": "",
                  "uuid": "d5de579b-919a-409d-bb0d-c7970847eb13",
                  "contents": [],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "0083637f-7ce9-4cd4-b021-6bc8d235a544",
                  "node_type": "top_level_code",
                  "decorator": null,
                  "imports": [],
                  "source": "# Self try at jedi\n\n# def _entity_definition_provider(self):\n\n#     # in the current context (the parents contents) look for the name \n\n#     # if you dont see it go up a level until you are at the module level.\n\n#     # look first in contents when look at imports. \n\n#     # if you find it in imports, go to the file that is imported and look for the name there.\n\n#     # # Possible cases\n\n#     # class()\n\n#     # function()\n\n#     a = Knowledge()\n\n#     b = a\n\n#     b.root\n\n#     b.show()\n\n#     for content in self.entity.parent.contents:\n\n#         if content.name == self.name:\n\n#             return content\n\n"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "032c3360-d193-4aa7-9f2c-0520d2609c6d",
              "node_type": "class_definition",
              "decorator": null,
              "imports": [],
              "source": "class PythonCallDependency:\n    def __init__(self, node, dependent_entity):\n        self.node = node  # Name of the dependency (e.g., imported module, called function)\n        self.entity = dependent_entity\n        self.reference_start_location = node.start_point # Start location of the reference in the source code\n        self.resolved = False # Status of dependency resolution\n        self.resolved_entity = None  # Where the dependency is resolved (e.g., file path)\n\n    def resolve(self):\n        # \"\"\"\n        # Implement the logic to resolve the dependency within the given codebase.\n        # The codebase parameter could be a structure representing the entire knowledge tree.\n        \n        # This method should update self.resolved and self.resolution_location based on whether\n        # and where the dependency is found within the codebase.\n        # \"\"\"\n        # # Example pseudocode for resolution logic:\n        # # 1. Search the codebase for the reference.\n        # # 2. If found, update self.resolved to True and self.resolution_location to the location found.\n        # # 3. If not found, self.resolved remains False.\n\n        # # This is a simplified representation. The actual implementation would depend on\n        # # the structure of your codebase and how you're tracking entities within it.\n        self.resolved_entity = self._entity_definition_provider()\n        \n\n    # Self try at jedi\n    # def _entity_definition_provider(self):\n    #     # in the current context (the parents contents) look for the name \n    #     # if you dont see it go up a level until you are at the module level.\n    #     # look first in contents when look at imports. \n    #     # if you find it in imports, go to the file that is imported and look for the name there.\n\n    #     # # Possible cases\n    #     # class()\n    #     # function()\n    #     a = Knowledge()\n    #     b = a\n    #     b.root\n    #     b.show()\n\n    #     for content in self.entity.parent.contents:\n    #         if content.name == self.name:\n    #             return content\n        \n\n    def _entity_definition_provider(self):\n        project = jedi.Project(self.entity.get_root().absolute_path) # TODO: Could refactor this out if it causes unneccessary overhead\n        script = jedi.Script(path=self.entity.get_file_path(),\n                        # environment=\"/opt/homebrew/bin/python3\", # TODO: allow user to set environment\n                        project=project)\n        line, col = self.reference_start_location\n        result = script.goto(line+1, col, follow_imports=True, follow_builtin_imports=True) # TODO: Determine if we need to add 1 to line- it seems like tree-sitter is off by 1\n        if not result: result = script.goto(line+1, col) # TODO: Figure out why it cant find external packages with follow_imports=True\n\n        if result:\n            if len(result) > 1: print(f\"Warning: multiple results for {self.name} at {self.reference_start_location}\")\n            result = result[0] # TODO: handle where there are multiple results\n            self.name_resolved = True\n\n            full_name = getattr(result, 'full_name', None)\n            if full_name is not None:\n                return self._find_entity_from_full_name(result)\n            else:\n                raise ValueError(f\"Result {result} does not have a full_name attribute\")\n        \n        return None\n\n    def _find_entity_from_full_name(self, result: Name):\n        # first look for the first part of the name in the current directory (either file or folder)\n        entity_path = result.module_path + result.full_name\n\n        # try to find the entity in the kg\n        def dfs(entity, entity_path):\n            if entity.get_absolute_path() == entity_path:\n                self.resolved = True\n                return entity\n            # Base case: return if entity does not have contents or contents is empty\n            if not hasattr(entity, 'contents') or not entity.contents:\n                print(f\"WARNING: Could not find {entity_path} in {entity.get_absolute_path()}, but the name was found in the codebase\")\n                return\n            for sub_entity in entity.contents:\n                dfs(sub_entity, entity_path)\n\n        return dfs(self.entity.get_root(), entity_path)"
            },
            {
              "type": "PythonEntity",
              "name": "python.py.PythonEntity",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonEntity",
              "text": "",
              "uuid": "b3b0f21e-7e73-42b5-af9f-03aa47710e60",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "python.py.PythonEntity.__init__",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonEntity.__init__",
                  "text": "",
                  "uuid": "1d80721e-eccb-49c6-af7f-b4fd97a807a5",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "python.py.PythonEntity.__init__.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonEntity.__init__.top_level_function_definition_code",
                      "text": "",
                      "uuid": "802ea422-70b8-43aa-a27c-3bf75c3414b2",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "1d80721e-eccb-49c6-af7f-b4fd97a807a5",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "if node_type == \"module\":\n            super().__init__(f\"{parent.absolute_path}/{name}\", parent)\n        else:\n            if isinstance(name, bytes):\n                name = name.decode('utf-8')\n            super().__init__(f\"{parent.absolute_path}.{name}\", parent)\n\nself.node = node\n\nself.node_type = node_type\n\nself.decorator = None\n\nself.imports = []\n\nself.source = node.text.decode('utf-8')\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abf1d10>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abf1d90>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abf1e50>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abf1f10>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abf1fd0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abf20d0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abf2190>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "b3b0f21e-7e73-42b5-af9f-03aa47710e60",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def __init__(self, name, parent, node: Node, node_type):\n        if node_type == \"module\":\n            super().__init__(f\"{parent.absolute_path}/{name}\", parent)\n        else:\n            if isinstance(name, bytes):\n                name = name.decode('utf-8')\n            super().__init__(f\"{parent.absolute_path}.{name}\", parent)\n        self.node = node\n        self.node_type = node_type\n        self.decorator = None\n        self.imports = []\n        self.source = node.text.decode('utf-8')"
                },
                {
                  "type": "PythonEntity",
                  "name": "python.py.PythonEntity.get_file_parent",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonEntity.get_file_parent",
                  "text": "",
                  "uuid": "b12d6f22-ada7-4ac8-80a8-b098df109c62",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "python.py.PythonEntity.get_file_parent.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonEntity.get_file_parent.top_level_function_definition_code",
                      "text": "",
                      "uuid": "6499505c-d14f-4bfc-a827-3c2321e26a4b",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "b12d6f22-ada7-4ac8-80a8-b098df109c62",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "if self.parent and self.node_type==\"module\":\n            return self.parent\n        elif self.parent:\n            return self.parent.get_file_parent()\n        else:\n            return None\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abf1310>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "b3b0f21e-7e73-42b5-af9f-03aa47710e60",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def get_file_parent(self):\n        if self.parent and self.node_type==\"module\":\n            return self.parent\n        elif self.parent:\n            return self.parent.get_file_parent()\n        else:\n            return None"
                },
                {
                  "type": "PythonEntity",
                  "name": "python.py.PythonEntity.get_file_path",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonEntity.get_file_path",
                  "text": "",
                  "uuid": "f60d98e0-b422-46cc-8eab-7795d95a9bec",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "python.py.PythonEntity.get_file_path.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonEntity.get_file_path.top_level_function_definition_code",
                      "text": "",
                      "uuid": "db7184fc-76ec-4e3f-b727-a349ce6ef7a8",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "f60d98e0-b422-46cc-8eab-7795d95a9bec",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "if self.node_type == \"module\":\n            return self.absolute_path\n        else:\n            return self.get_file_parent().absolute_path\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abf2090>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "b3b0f21e-7e73-42b5-af9f-03aa47710e60",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def get_file_path(self):\n        if self.node_type == \"module\":\n            return self.absolute_path\n        else:\n            return self.get_file_parent().absolute_path"
                },
                {
                  "type": "PythonEntity",
                  "name": "python.py.PythonEntity.expand",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonEntity.expand",
                  "text": "",
                  "uuid": "58368a5b-8e7a-4789-8c62-90bd9d93c663",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "python.py.PythonEntity.expand.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonEntity.expand.top_level_function_definition_code",
                      "text": "",
                      "uuid": "cb5ed151-1c8c-4425-bfeb-7b932d24f70d",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "58368a5b-8e7a-4789-8c62-90bd9d93c663",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "match self.node_type:\n            case 'module':\n                self.expand_node_children(self.node)\n\n            # case 'import_statement' | 'import_from_statement':\n            #     self.imports.append(self.node)\n            #     # TODO: DEPENDENCY ACKNOWLEDGEMENT\n            #     # node_dependencies = figure out what other python file we depend on\n            #     # self.dependencies.extend(node_dependencies)\n            #     node_dependencies = self.get_import_node_dependencies(self.node)\n            #     self.dependencies.extend(node_dependencies)\n\n            case 'function_definition':\n                # TODO: DEPENDENCY ACKNOWLEDGEMENT\n                # node_dependencies = get dependencies from the type hints for params and the return type\n                node_dependencies = self.get_parameter_node_dependencies(self.node) \n                # TODO: DOES NOT HANDLE RETURN TYPE\n                if node_dependencies:\n                    self.dependencies.extend(node_dependencies)\n\n                defintion_block_node = self.node.child_by_field_name(\"body\")\n                self.expand_node_children(defintion_block_node)\n\n            case 'class_definition':    \n                # TODO: DEPENDENCY ACKNOWLEDGEMENT\n                # node_dependencies = get the superclass if it exists\n                node_dependencies = self.get_parameter_node_dependencies(self.node)\n                if node_dependencies:\n                    self.dependencies.extend(node_dependencies)\n\n                defintion_block_node = self.node.child_by_field_name(\"body\")\n                self.expand_node_children(defintion_block_node)\n                \n            case 'decorated_definition':\n                if self.node.children[0].type != \"decorator\":\n                    raise ValueError(f\"Expected first child of decorated_definition to be a decorator, but got {self.node.children[0].type}\")\n                \n                self.decorator = self.node.children[0] \n                node_dependencies = self.get_decorator_node_dependencies(self.node)\n\n                definition = self.node.child_by_field_name(\"definition\")\n                match definition.type:\n                    case 'function_definition':\n                        node_dependencies = self.get_parameter_node_dependencies(self.node)\n                        if node_dependencies:\n                            self.dependencies.extend(node_dependencies)\n                    case 'class_definition':\n                        node_dependencies = self.get_parameter_node_dependencies(self.node)\n                        if node_dependencies:\n                            self.dependencies.extend(node_dependencies)\n                        \n                defintion_block_node = definition.child_by_field_name(\"body\")\n                self.expand_node_children(defintion_block_node)\n\n            case _:\n                raise ValueError(f\"Node type {self.node_type} not handled\")\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae0b610>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae0b690>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae0b750>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae0b810>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae0b8d0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae0b9d0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae0ba90>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae0bb50>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae0bc10>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae0b990>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae0bd50>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae0be10>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae0bed0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae0bf90>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae0c090>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae0c150>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae0c210>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae0c2d0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae0c390>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "b3b0f21e-7e73-42b5-af9f-03aa47710e60",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def expand(self):\n\n        match self.node_type:\n            case 'module':\n                self.expand_node_children(self.node)\n\n            # case 'import_statement' | 'import_from_statement':\n            #     self.imports.append(self.node)\n            #     # TODO: DEPENDENCY ACKNOWLEDGEMENT\n            #     # node_dependencies = figure out what other python file we depend on\n            #     # self.dependencies.extend(node_dependencies)\n            #     node_dependencies = self.get_import_node_dependencies(self.node)\n            #     self.dependencies.extend(node_dependencies)\n\n            case 'function_definition':\n                # TODO: DEPENDENCY ACKNOWLEDGEMENT\n                # node_dependencies = get dependencies from the type hints for params and the return type\n                node_dependencies = self.get_parameter_node_dependencies(self.node) \n                # TODO: DOES NOT HANDLE RETURN TYPE\n                if node_dependencies:\n                    self.dependencies.extend(node_dependencies)\n\n                defintion_block_node = self.node.child_by_field_name(\"body\")\n                self.expand_node_children(defintion_block_node)\n\n            case 'class_definition':    \n                # TODO: DEPENDENCY ACKNOWLEDGEMENT\n                # node_dependencies = get the superclass if it exists\n                node_dependencies = self.get_parameter_node_dependencies(self.node)\n                if node_dependencies:\n                    self.dependencies.extend(node_dependencies)\n\n                defintion_block_node = self.node.child_by_field_name(\"body\")\n                self.expand_node_children(defintion_block_node)\n                \n            case 'decorated_definition':\n                if self.node.children[0].type != \"decorator\":\n                    raise ValueError(f\"Expected first child of decorated_definition to be a decorator, but got {self.node.children[0].type}\")\n                \n                self.decorator = self.node.children[0] \n                node_dependencies = self.get_decorator_node_dependencies(self.node)\n\n                definition = self.node.child_by_field_name(\"definition\")\n                match definition.type:\n                    case 'function_definition':\n                        node_dependencies = self.get_parameter_node_dependencies(self.node)\n                        if node_dependencies:\n                            self.dependencies.extend(node_dependencies)\n                    case 'class_definition':\n                        node_dependencies = self.get_parameter_node_dependencies(self.node)\n                        if node_dependencies:\n                            self.dependencies.extend(node_dependencies)\n                        \n                defintion_block_node = definition.child_by_field_name(\"body\")\n                self.expand_node_children(defintion_block_node)\n\n            case _:\n                raise ValueError(f\"Node type {self.node_type} not handled\")"
                },
                {
                  "type": "PythonEntity",
                  "name": "python.py.PythonEntity.expand_node_children",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonEntity.expand_node_children",
                  "text": "",
                  "uuid": "652e2469-e2e7-4821-b49a-d68ea182ce82",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "python.py.PythonEntity.expand_node_children.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonEntity.expand_node_children.top_level_function_definition_code",
                      "text": "",
                      "uuid": "661f6442-045c-4fc1-9827-936e8dc02dfc",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "652e2469-e2e7-4821-b49a-d68ea182ce82",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "top_level_nodes = []\n\nfor child in node.children:\n            match child.type:\n                case 'import_statement' | 'import_from_statement':\n                    # DEPENDENCY ACKNOWLEDGEMENT\n                    self.imports.append(self.node)\n                    node_dependencies = self.get_import_node_dependencies(self.node)\n                    if node_dependencies:\n                        self.dependencies.extend(node_dependencies)\n                    \n                    # Group in with top level nodes\n                    top_level_nodes.append(child)\n                case 'function_definition' | 'class_definition' | 'decorated_definition':\n                    entity = self.create_and_expand_entity(child)\n                    self.contents.append(entity)\n                case _:\n                    top_level_nodes.append(child)\n\nif top_level_nodes:\n            top_level_node, top_level_node_name = self.wrap_top_level_code(top_level_nodes)\n            top_level_entity = self.create_and_expand_entity(top_level_node, top_level_node_name)\n            \n            self.dependencies.extend(self.get_top_level_node_dependencies(top_level_nodes))\n            self.contents.append(top_level_entity)\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abf0a90>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae0da50>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae0db10>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae0dbd0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae0dc90>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae0dd90>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae0de50>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae0df10>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae0dfd0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae0dd50>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae0e110>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae0e1d0>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "b3b0f21e-7e73-42b5-af9f-03aa47710e60",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def expand_node_children(self, node):\n        top_level_nodes = []\n        for child in node.children:\n            match child.type:\n                case 'import_statement' | 'import_from_statement':\n                    # DEPENDENCY ACKNOWLEDGEMENT\n                    self.imports.append(self.node)\n                    node_dependencies = self.get_import_node_dependencies(self.node)\n                    if node_dependencies:\n                        self.dependencies.extend(node_dependencies)\n                    \n                    # Group in with top level nodes\n                    top_level_nodes.append(child)\n                case 'function_definition' | 'class_definition' | 'decorated_definition':\n                    entity = self.create_and_expand_entity(child)\n                    self.contents.append(entity)\n                case _:\n                    top_level_nodes.append(child)\n\n        if top_level_nodes:\n            top_level_node, top_level_node_name = self.wrap_top_level_code(top_level_nodes)\n            top_level_entity = self.create_and_expand_entity(top_level_node, top_level_node_name)\n            \n            self.dependencies.extend(self.get_top_level_node_dependencies(top_level_nodes))\n            self.contents.append(top_level_entity)"
                },
                {
                  "type": "PythonEntity",
                  "name": "python.py.PythonEntity.get_top_level_node_dependencies",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonEntity.get_top_level_node_dependencies",
                  "text": "",
                  "uuid": "83d750b8-a4cd-41a5-91f3-1963853afb8c",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "python.py.PythonEntity.get_top_level_node_dependencies.get_call_nodes",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonEntity.get_top_level_node_dependencies.get_call_nodes",
                      "text": "",
                      "uuid": "2fbba66a-6b99-4c62-bf7b-d374ae564de2",
                      "contents": [
                        {
                          "type": "PythonEntity",
                          "name": "python.py.PythonEntity.get_top_level_node_dependencies.get_call_nodes.top_level_function_definition_code",
                          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonEntity.get_top_level_node_dependencies.get_call_nodes.top_level_function_definition_code",
                          "text": "",
                          "uuid": "04bb8aff-f638-44f8-be9d-28b537243f7e",
                          "contents": [],
                          "explanation": null,
                          "preliminary_context": "",
                          "metadata": {},
                          "dependencies": [],
                          "expanded_state": "unexpanded",
                          "parent_uuid": "2fbba66a-6b99-4c62-bf7b-d374ae564de2",
                          "node_type": "top_level_code",
                          "decorator": null,
                          "imports": [],
                          "source": "call_nodes = []\n\nstack = [node]\n\nwhile stack:\n                node = stack.pop() \n\n                if node.type == 'call':\n                    call_nodes.append(node)\n                \n                stack.extend(node.children)\n\nreturn call_nodes\n\n"
                        }
                      ],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae0a650>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae09d50>",
                        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae0ab10>"
                      ],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "83d750b8-a4cd-41a5-91f3-1963853afb8c",
                      "node_type": "function_definition",
                      "decorator": null,
                      "imports": [],
                      "source": "def get_call_nodes(node):\n            call_nodes = []\n            stack = [node]\n            \n            while stack:\n                node = stack.pop() \n\n                if node.type == 'call':\n                    call_nodes.append(node)\n                \n                stack.extend(node.children)\n\n            return call_nodes"
                    },
                    {
                      "type": "PythonEntity",
                      "name": "python.py.PythonEntity.get_top_level_node_dependencies.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonEntity.get_top_level_node_dependencies.top_level_function_definition_code",
                      "text": "",
                      "uuid": "14d111dd-5d5f-4ba9-a248-d3e1f3ea2e98",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "83d750b8-a4cd-41a5-91f3-1963853afb8c",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "dependencies = []\n\ncall_nodes = []\n\nfor node in top_level_nodes:\n            call_nodes.extend(get_call_nodes(node))\n\nfor call_node in call_nodes:\n            dependencies.append(PythonCallDependency(call_node, self))\n\nreturn dependencies\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae0e710>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae0e790>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae0e850>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae0e910>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "b3b0f21e-7e73-42b5-af9f-03aa47710e60",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def get_top_level_node_dependencies(self, top_level_nodes):\n        def get_call_nodes(node):\n            call_nodes = []\n            stack = [node]\n            \n            while stack:\n                node = stack.pop() \n\n                if node.type == 'call':\n                    call_nodes.append(node)\n                \n                stack.extend(node.children)\n\n            return call_nodes\n        \n        dependencies = []\n        call_nodes = []\n        for node in top_level_nodes:\n            call_nodes.extend(get_call_nodes(node))\n\n        for call_node in call_nodes:\n            dependencies.append(PythonCallDependency(call_node, self))\n\n        return dependencies"
                },
                {
                  "type": "PythonEntity",
                  "name": "python.py.PythonEntity.get_parameter_node_dependencies",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonEntity.get_parameter_node_dependencies",
                  "text": "",
                  "uuid": "1a9693f0-887a-4db5-a94a-f3291dcd71b1",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "python.py.PythonEntity.get_parameter_node_dependencies.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonEntity.get_parameter_node_dependencies.top_level_function_definition_code",
                      "text": "",
                      "uuid": "828f2f87-59ef-4538-9f74-e07ba9f32856",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "1a9693f0-887a-4db5-a94a-f3291dcd71b1",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "return\n\nnode = function_defintion_node.children_by_field_name(\"parameters\")[0]\n\n# should only be one # TODO: node was down below that this didn't assign to anything to i just randomly assigned it to \"node\" might not be right \n\ntyped_parameters = get_children_by_grammar_name(node, \"typed_parameters\")\n\ntypes = []\n\nfor typed_parameter in typed_parameters:\n            types.extend(get_children_by_grammar_name(typed_parameter, \"type\"))\n\nreturn types\n\nraise NotImplementedError(\"get_parameter_node_dependencies not implemented\")\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae10890>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae10910>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae109d0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae10a90>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae10b50>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "b3b0f21e-7e73-42b5-af9f-03aa47710e60",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def get_parameter_node_dependencies(self, function_defintion_node):\n        return \n        node = function_defintion_node.children_by_field_name(\"parameters\")[0] # should only be one # TODO: node was down below that this didn't assign to anything to i just randomly assigned it to \"node\" might not be right \n        typed_parameters = get_children_by_grammar_name(node, \"typed_parameters\")\n        types = []\n        for typed_parameter in typed_parameters:\n            types.extend(get_children_by_grammar_name(typed_parameter, \"type\"))\n\n        return types\n    \n\n        raise NotImplementedError(\"get_parameter_node_dependencies not implemented\")"
                },
                {
                  "type": "PythonEntity",
                  "name": "python.py.PythonEntity.get_decorator_node_dependencies",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonEntity.get_decorator_node_dependencies",
                  "text": "",
                  "uuid": "e59f9764-c167-4e00-a33a-2040ecbf8bd7",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "python.py.PythonEntity.get_decorator_node_dependencies.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonEntity.get_decorator_node_dependencies.top_level_function_definition_code",
                      "text": "",
                      "uuid": "fe552169-c853-4374-a8cd-7259c755168a",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "e59f9764-c167-4e00-a33a-2040ecbf8bd7",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "return\n\nraise NotImplementedError(\"get_decorator_node_dependencies not implemented\")\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae03c10>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "b3b0f21e-7e73-42b5-af9f-03aa47710e60",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def get_decorator_node_dependencies(self, node):\n        # for a decorator, see if there are any arguments\n        # if there are, process them and add them to the dependencies\n        return\n        raise NotImplementedError(\"get_decorator_node_dependencies not implemented\")"
                },
                {
                  "type": "PythonEntity",
                  "name": "python.py.PythonEntity.get_import_node_dependencies",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonEntity.get_import_node_dependencies",
                  "text": "",
                  "uuid": "f8c890a2-8a76-4c32-a84e-0e6d440dd0d3",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "python.py.PythonEntity.get_import_node_dependencies.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonEntity.get_import_node_dependencies.top_level_function_definition_code",
                      "text": "",
                      "uuid": "777df0c3-e75c-440b-a635-95206656123d",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "f8c890a2-8a76-4c32-a84e-0e6d440dd0d3",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "return\n\nraise NotImplementedError(\"get_import_node_dependencies not implemented\")\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae101d0>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "b3b0f21e-7e73-42b5-af9f-03aa47710e60",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def get_import_node_dependencies(self, node):\n        # for an import, see if there are any aliases\n        # if there are, process them and add them to the dependencies\n        return\n        raise NotImplementedError(\"get_import_node_dependencies not implemented\")"
                },
                {
                  "type": "PythonEntity",
                  "name": "python.py.PythonEntity.create_and_expand_entity",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonEntity.create_and_expand_entity",
                  "text": "",
                  "uuid": "c64ce1fa-9090-4942-898d-7b7abeab8194",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "python.py.PythonEntity.create_and_expand_entity.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonEntity.create_and_expand_entity.top_level_function_definition_code",
                      "text": "",
                      "uuid": "998daff5-da61-47fa-9514-f0b6d14e74fb",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "c64ce1fa-9090-4942-898d-7b7abeab8194",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "if node_name:\n            # This is a top-level code node and does not need to be expanded\n            entity = PythonEntity(node_name, self, node, \"top_level_code\")\n        else:\n            match node.type:\n                case 'decorated_definition':\n                    node_name = node.child_by_field_name(\"definition\").child_by_field_name(\"name\").text\n                case 'class_definition' | 'function_definition':\n                    node_name = node.child_by_field_name(\"name\").text\n                case _:\n                    raise ValueError(f\"Node type {node.type} not handled\")\n            entity = PythonEntity(node_name, self, node, node.type)\n            entity.expand()\n\nreturn entity\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae16210>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae16290>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae16350>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae16410>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae164d0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae165d0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae16690>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "b3b0f21e-7e73-42b5-af9f-03aa47710e60",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def create_and_expand_entity(self, node, node_name=None):\n        if node_name:\n            # This is a top-level code node and does not need to be expanded\n            entity = PythonEntity(node_name, self, node, \"top_level_code\")\n        else:\n            match node.type:\n                case 'decorated_definition':\n                    node_name = node.child_by_field_name(\"definition\").child_by_field_name(\"name\").text\n                case 'class_definition' | 'function_definition':\n                    node_name = node.child_by_field_name(\"name\").text\n                case _:\n                    raise ValueError(f\"Node type {node.type} not handled\")\n            entity = PythonEntity(node_name, self, node, node.type)\n            entity.expand()\n        return entity"
                },
                {
                  "type": "PythonEntity",
                  "name": "python.py.PythonEntity.wrap_top_level_code",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonEntity.wrap_top_level_code",
                  "text": "",
                  "uuid": "416b7868-10e5-4060-8ae5-23870e67f28a",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "python.py.PythonEntity.wrap_top_level_code.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonEntity.wrap_top_level_code.top_level_function_definition_code",
                      "text": "",
                      "uuid": "1452d00b-72e4-4d32-8f9e-05fb46340726",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "416b7868-10e5-4060-8ae5-23870e67f28a",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "top_level_node_name = f\"top_level_{self.node_type}_code\"\n\n# # Generate the new function definition wrapping top-level code\n\nwrapped_code = \"\"\n\nfor node in nodes:\n            wrapped_code += f\"{node.text.decode('utf-8')}\\n\\n\"\n\nparser = Parser()\n\nparser.set_language(PY_LANGUAGE)\n\ntree = parser.parse(bytes(wrapped_code, \"utf8\"))\n\nreturn tree.root_node, top_level_node_name\n\n# for child in tree.root_node.children:\n\n#     self.contents.append(PythonEntity(top_level_code_name, self, child, \"top_level_code\") )\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae17d10>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae17d90>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae17e50>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae17f10>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae17fd0>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "b3b0f21e-7e73-42b5-af9f-03aa47710e60",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def wrap_top_level_code(self, nodes):\n        # Unique function name for the top-level code\n        top_level_node_name = f\"top_level_{self.node_type}_code\"\n\n        # # Generate the new function definition wrapping top-level code\n        wrapped_code = \"\"\n        for node in nodes:\n            wrapped_code += f\"{node.text.decode('utf-8')}\\n\\n\"\n\n        parser = Parser()\n        parser.set_language(PY_LANGUAGE)\n        tree = parser.parse(bytes(wrapped_code, \"utf8\"))\n\n        return tree.root_node, top_level_node_name\n\n        # for child in tree.root_node.children:\n        #     self.contents.append(PythonEntity(top_level_code_name, self, child, \"top_level_code\") )"
                },
                {
                  "type": "PythonEntity",
                  "name": "python.py.PythonEntity._build_dependency_graph",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonEntity._build_dependency_graph",
                  "text": "",
                  "uuid": "157c384d-281e-4dd1-a44b-4aa1f6a94aa4",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "python.py.PythonEntity._build_dependency_graph.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonEntity._build_dependency_graph.top_level_function_definition_code",
                      "text": "",
                      "uuid": "23b711bd-eabd-41ee-a0f2-be18ed62ff88",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "157c384d-281e-4dd1-a44b-4aa1f6a94aa4",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "for node in ast.walk(tree):\n            for child in ast.iter_child_nodes(node):\n                child.parent = node\n\nbuilder = DependencyGraphBuilder()\n\nbuilder.visit(tree)\n\nreturn builder.graph\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae18410>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae18490>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae18550>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae18610>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "b3b0f21e-7e73-42b5-af9f-03aa47710e60",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def _build_dependency_graph(self, tree):\n        # print(self.absolute_path)\n        # print(ast.unparse(tree))\n        # Add parent references to each node\n        for node in ast.walk(tree):\n            for child in ast.iter_child_nodes(node):\n                child.parent = node\n\n        builder = DependencyGraphBuilder()\n        builder.visit(tree)\n        return builder.graph"
                },
                {
                  "type": "PythonEntity",
                  "name": "python.py.PythonEntity._extract_main",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonEntity._extract_main",
                  "text": "",
                  "uuid": "6d8a77c8-d05c-418f-96e9-5ceaa391721d",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "python.py.PythonEntity._extract_main.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonEntity._extract_main.top_level_function_definition_code",
                      "text": "",
                      "uuid": "9131d369-529f-4690-8491-87ca6a758481",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "6d8a77c8-d05c-418f-96e9-5ceaa391721d",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "\"\"\"\n            Extracts the main block from the given source code.\n\n            Args:\n                source (str): The source code to extract the main block from.\n\n            Returns:\n                ast.Module: The modified abstract syntax tree with the main block extracted.\n            \"\"\"\n\ntree = ast.parse(source)\n\nmain_block_contents = []\n\nfile_nodes = []\n\nfor node in ast.iter_child_nodes(tree):\n                if isinstance(node, (ast.ClassDef, ast.FunctionDef, ast.AsyncFunctionDef)):\n                    file_nodes.append(node)\n                elif isinstance(node, (ast.Import, ast.ImportFrom)):\n                    self.imports.append(node)\n                else:\n                    main_block_contents.append(node)\n\nentry_point_name = f'main-{uuid.uuid4()}'\n\n# TODO: Think if this is the best inteface? It's possible this is None for a file \n\nif main_block_contents:\n                # Create a PythonMainBlock entity if there are top-level nodes\n                main_node = ast.FunctionDef(\n                    name=entry_point_name,\n                    args=ast.arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]),\n                    body=main_block_contents,\n                    decorator_list=[],\n                    returns=None,\n                    lineno=0,\n                    col_offset=0\n                )\n                file_nodes.append(main_node)\n\ntree.body = file_nodes\n\nreturn tree, entry_point_name\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae20410>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae20490>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae20550>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae20610>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae206d0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae207d0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae20890>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae20950>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae20a10>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae20790>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae20b50>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "b3b0f21e-7e73-42b5-af9f-03aa47710e60",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def _extract_main(self, source: str) -> ast.Module:\n            \"\"\"\n            Extracts the main block from the given source code.\n\n            Args:\n                source (str): The source code to extract the main block from.\n\n            Returns:\n                ast.Module: The modified abstract syntax tree with the main block extracted.\n            \"\"\"\n            tree = ast.parse(source)\n\n            main_block_contents = []\n\n            file_nodes = []\n\n            for node in ast.iter_child_nodes(tree):\n                if isinstance(node, (ast.ClassDef, ast.FunctionDef, ast.AsyncFunctionDef)):\n                    file_nodes.append(node)\n                elif isinstance(node, (ast.Import, ast.ImportFrom)):\n                    self.imports.append(node)\n                else:\n                    main_block_contents.append(node)\n\n            entry_point_name = f'main-{uuid.uuid4()}' # TODO: Think if this is the best inteface? It's possible this is None for a file \n\n            if main_block_contents:\n                # Create a PythonMainBlock entity if there are top-level nodes\n                main_node = ast.FunctionDef(\n                    name=entry_point_name,\n                    args=ast.arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]),\n                    body=main_block_contents,\n                    decorator_list=[],\n                    returns=None,\n                    lineno=0,\n                    col_offset=0\n                )\n                file_nodes.append(main_node)\n\n            tree.body = file_nodes\n\n            return tree, entry_point_name"
                },
                {
                  "type": "PythonEntity",
                  "name": "python.py.PythonEntity.explain",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonEntity.explain",
                  "text": "",
                  "uuid": "c92b7040-45cf-41e6-9eea-19e9a752c3f8",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "python.py.PythonEntity.explain.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonEntity.explain.top_level_function_definition_code",
                      "text": "",
                      "uuid": "f19b8112-388e-468f-a5c2-613f84739f3f",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "c92b7040-45cf-41e6-9eea-19e9a752c3f8",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "if self.expanded_state != \"expanded\":\n            raise ValueError(\"Python file must be expanded before it can be explained\")\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae19010>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "b3b0f21e-7e73-42b5-af9f-03aa47710e60",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def explain(self):\n        if self.expanded_state != \"expanded\":\n            raise ValueError(\"Python file must be expanded before it can be explained\")"
                },
                {
                  "type": "PythonEntity",
                  "name": "python.py.PythonEntity.top_level_class_definition_code",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonEntity.top_level_class_definition_code",
                  "text": "",
                  "uuid": "1bf7ad56-e8a1-4a04-ba82-d7ba4a02943e",
                  "contents": [],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "b3b0f21e-7e73-42b5-af9f-03aa47710e60",
                  "node_type": "top_level_code",
                  "decorator": null,
                  "imports": [],
                  "source": "# def get_class_definition_node_dependencies(self, node):\n\n#     self.get_parameter_node_dependencies(node)\n\n#     PythonCallDependency()\n\n#     raise NotImplementedError(\"get_class_definition_node_dependencies not implemented\")\n\n# def get_function_definition_node_dependencies(self, node):\n\n#     # for a function see if there are decorators\n\n#     # type hints are going to be dependencies\n\n#     # return type is going to be a dependency\n\n#     self.get_parameter_node_dependencies(node)\n\n#     raise NotImplementedError(\"get_function_definition_node_dependencies not implemented\")\n\n# def get_source_code(self):\n\n#     source_code = \"\"\n\n#     # get decorators\n\n#     for decorator in self.node.decorator_list:\n\n#         decorator_str = get_source_segment(self.get_file_parent().source_code, decorator)\n\n#         source_code += f\"@{decorator_str}\\n\"\n\n#     parent_source_code = self.get_file_parent().source_code\n\n#     source_code += get_source_segment(parent_source_code, self.node)\n\n#     return source_code\n\n# def get_source_code_main(self):\n\n#     return ast.unparse(self.node)\n\n# def expand(self):\n\n#     # TODO: add decorators to contents/depedencies\n\n#     print(f\"\\tExpanding python entity {self.node.name}\")\n\n#     for node in ast.iter_child_nodes(self.node):\n\n#         if isinstance(node, (ast.ClassDef, ast.FunctionDef, ast.AsyncFunctionDef)):\n\n#             if isinstance(node, ast.ClassDef):\n\n#                 # see if there is a parent class\n\n#                 if node.bases:\n\n#                     base_class = node.bases[0]\n\n#                     if isinstance(base_class, ast.Name):\n\n#                         self.dependencies.append((base_class.id, base_class))\n\n#                     else:\n\n#                         raise ValueError(\"Unhanded case for class inheritance for node: \" + str(node)+ \" with base class: \" + str(base_class))\n\n#             # add decorators to dependencies\n\n#             for decorator in node.decorator_list:\n\n#                 decorator_str = get_source_segment(self.get_file_parent().source_code, decorator)\n\n#                 self.dependencies.append((decorator_str, decorator))\n\n#             print(f\"\\t\\tFound class/function {node.name}\")\n\n#             class_entity = PythonEntity(node.name, self, node)\n\n#             class_entity.expand()\n\n#             self.contents.append(class_entity)\n\n#         else:\n\n#             dbuilder = DependencyBuilder()\n\n#             dbuilder.visit(node)\n\n#             dependencies = dbuilder.dependencies\n\n#             if dependencies != []:\n\n#                 print(f\"\\t\\tFound dependencies {dependencies}\")\n\n#                 self.dependencies.extend(dependencies)\n\n# def get_type(self):\n\n#     return self.node_type\n\n# def expand(self, dependency_graph):\n\n#     self.internal_dependencies = []\n\n#     self.external_dependencies = []\n\n#     # Retrieve dependencies from the graph for this entity\n\n#     node_deps = dependency_graph.get((self.node.name, self.node), {})\n\n#     for internal_dep in node_deps.get('internal_dependancies', []):\n\n#         # Resolve to PythonEntity if possible\n\n#         self.internal_dependencies.append(self._resolve_dependency(internal_dep, dependency_graph))\n\n#     for external_dep in node_deps.get('external_dependancies', []):\n\n#         self.external_dependencies.append(external_dep)  # Just store the external dependency as-is\n\n# def _resolve_dependency(self, dep, dependency_graph):\n\n#     # dep is a tuple (name, ast_node)\n\n#     dep_name, dep_node = dep\n\n#     # Check if this dependency is a key in the dependency graph\n\n#     if dep in dependency_graph:\n\n#         # Create a PythonEntity for this dependency\n\n#         return PythonEntity(dep_name, self.parent, dep_node)\n\n#     return dep \n\n# class PythonClass(PythonEntity):\n\n#     def __init__(self, name, parent, node):\n\n#         super().__init__(f\"{parent.absolute_path}/{name}\", parent, node)\n\n# def expand(self):\n\n#     self.expanded_state = \"expanding\"\n\n#     self.contents = []\n\n#     for node in self.node.body:\n\n#         if isinstance(node, ast.ClassDef):\n\n#             self.contents.append(PythonClass(node.name, self, node.body))\n\n#         elif isinstance(node, ast.FunctionDef):\n\n#             self.contents.append(PythonFunction(node.name, self, node.body))\n\n#     self.expanded_state = \"expanded\"\n\n#     def expand(self):\n\n#         self.expanded_state = \"expanding\"\n\n#         self.contents = []\n\n#         for node in ast.iter_child_nodes(self.node):\n\n#             if isinstance(node, ast.FunctionDef, ast.AsyncFunctionDef):\n\n#                 method_entity = PythonFunction(node.name, self, node)\n\n#                 method_entity.expand()\n\n#                 self.contents.append(method_entity)\n\n#             # Handle other possible internal structures like nested classes if needed\n\n#         self.expanded_state = \"expanded\"\n\n#     def get_source_code(self):\n\n#         return ast.unparse(self.node)\n\n#         return ast.get_source_segment(self.get_file_parent.source_code, self.node)\n\n# class PythonFunction(PythonEntity):\n\n#     def __init__(self, name, parent, node):\n\n#         super().__init__(f\"{parent.absolute_path}/{name}\", parent, node)\n\n#     def expand(self):\n\n#         self.expanded_state = \"expanding\"\n\n#         self.contents = []\n\n#         for node in self.node.body:\n\n#             if isinstance(node, ast.FunctionDef):\n\n#                 self.contents.append(PythonFunction(node.name, self, node.body))\n\n#         self.expanded_state = \"expanded\"\n\n# class PythonMainBlock(PythonEntity):\n\n#     def __init__(self, parent, nodes):\n\n#         super().__init__(f\"{parent.absolute_path}/main\", parent, nodes)\n\n#     def expand(self):\n\n#         self.expanded_state = \"expanding\"\n\n#         self.contents = []\n\n#         for node in self.node:\n\n#             if isinstance(node, ast.FunctionDef):\n\n#                 self.contents.append(PythonFunction(node.name, self, node.body))\n\n#             elif isinstance(node, ast.ClassDef):\n\n#                 self.contents.append(PythonClass(node.name, self, node.body))\n\n#         self.expanded_state = \"expanded\"\n\n# class PythonFile(File):\n\n#     def __init__(self, absolute_path, parent=None):\n\n#         super().__init__(absolute_path, parent)\n\n#         with open(self.absolute_path, 'r') as file:\n\n#             self.source_code = file.read()\n\n#             self.modified_source_code = None\n\n#             self.imports = []\n\n#             self.name_to_entity = {}  # Map function names to their entities\n\n#             self.dependency_graph = None\n\n#             self.pseudo_main_contents = []\n\n#     def get_source_code(self):\n\n#         return self.source_code\n\n#     def expand(self):\n\n#         self.expanded_state = \"expanding\"\n\n#         parser = Parser()\n\n#         parser.set_language(PY_LANGUAGE)\n\n#         with open(self.absolute_path, 'r') as file:\n\n#             source_code = file.read()\n\n#         tree = parser.parse(bytes(source_code, \"utf8\"))\n\n#         self._process_node(tree.root_node, parent=self, is_root=True)\n\n#         # # After processing, if there's top-level code, wrap it and modify the source code\n\n#         # if self.pseudo_main_contents:\n\n#         #     self._wrap_top_level_code()\n\n#     def _process_node(self, node, parent, is_root=False):\n\n#         # if node.type in ['import_statement', 'import_from_statement']:\n\n#         #     self.imports.append(node.text.decode('utf8'))  # Assuming source_code is utf-8 encoded\n\n#         if node.type in ['class_definition', 'function_definition', 'decorated_definition']:\n\n#             # Initialize PythonEntity with the node's text as a simple representation\n\n#             # entity_text = node.text.decode('utf8')  # Assuming source_code is utf-8 encoded\n\n#             entity = None\n\n#             match node.type:\n\n#                 case 'import_statement':\n\n#                     self.imports = node\n\n#                 case 'class_definition':\n\n#                     # class has a \"identifier\" possibly an \"argument_list\" and a \"block\"\n\n#                     # entity = PythonEntity(get_tree_sitter_definition_node_name(node), parent, node, \"class\")\n\n#                     self.contents.append(\n\n#                         self.expand_class(node)\n\n#                     )\n\n#                     entity = PythonEntity(get_tree_sitter_definition_node_name(node), parent, node, \"class\")\n\n#                 case 'function_definition':\n\n#                     entity = PythonEntity(get_tree_sitter_definition_node_name(node), parent, node, \"function\")\n\n#                 case 'decorated_definition':\n\n#                     match node.children[1].type:\n\n#                         case \"class_definition\":\n\n#                             entity = PythonEntity(get_tree_sitter_definition_node_name(node), parent, node, \"decorated_class\")\n\n#                         case \"function_definition\":\n\n#                             entity = PythonEntity(get_tree_sitter_definition_node_name(node), parent, node, \"decorated_function\")\n\n#                         case _:\n\n#                             raise ValueError(f\"Node type {node.children[1].type} not handled for decorated_definition\")\n\n#                 case _:\n\n#                     raise ValueError(f\"Node type {node.type} not handled\")\n\n#             # Choose where to add the new entity: to the file or to a parent entity\n\n#             if parent:\n\n#                 parent.contents.append(entity)\n\n#             else:\n\n#                 self.contents.append(entity)\n\n#             # Recursively process children, passing the current entity as the new parent\n\n#             for child in node.children:\n\n#                 self._process_node(child, parent=entity)\n\n#         elif is_root:\n\n#             # For the root node, process all children, but treat non-import/class/function nodes as pseudo-main\n\n#             for child in node.children:\n\n#                 if child.type not in ['class_definition', 'function_definition', 'decorated_definition']:\n\n#                     # These nodes are part of the top-level code\n\n#                     self.pseudo_main_contents.append(child.text.decode('utf8'))\n\n#                 else:\n\n#                     self._process_node(child, parent=parent)\n\n#     def expand_class(self, node):\n\n#         entity = PythonEntity(get_tree_sitter_definition_node_name(node), self, node, \"class\")\n\n#     def _wrap_top_level_code(self):\n\n#         # Unique function name for the top-level code\n\n#         pseudo_main_name = \"top_level_module_code_\" + str(uuid.uuid4()).replace(\"-\", \"_\")\n\n#         # Generate the new function definition wrapping top-level code\n\n#         wrapped_code = f\"def {pseudo_main_name}():\\n\"\n\n#         for line in self.pseudo_main_contents:\n\n#             wrapped_code += f\"    {line}\\n\"\n\n#         # # Add a call to the newly defined function at the end\n\n#         # wrapped_code += f\"\\nif __name__ == '__main__':\\n    {pseudo_main_name}()\\n\"\n\n#         parser = Parser()\n\n#         parser.set_language(PY_LANGUAGE)\n\n#         tree = parser.parse(bytes(wrapped_code, \"utf8\"))\n\n#         for child in tree.root_node.children:\n\n#             self.contents.append(PythonEntity(pseudo_main_name, self, child, \"top_level_code\") )\n\n# def expand(self):\n\n#     self.expanded_state = \"expanding\"\n\n#     print(\"Expanding python file\")\n\n#     self.contents = []\n\n# with open(self.absolute_path, 'r') as file:\n\n#     source = file.read()\n\n# modified_tree, self.entry_point_name = self._extract_main(source)\n\n# self.modified_source_code = ast.unparse(modified_tree)\n\n#     for node in ast.iter_child_nodes(modified_tree): #ast.walk(tree):\n\n#         class_entity = PythonEntity(node.name, self, node)\n\n#         class_entity.expand()\n\n#         self.contents.append(class_entity)\n\n#         if isinstance(node, (ast.ClassDef, ast.FunctionDef, ast.AsyncFunctionDef)):\n\n#             print(f\"Found class/function {node.name}\")\n\n#             self.name_to_entity[node.name] = class_entity\n\n#         elif isinstance(node, (ast.Call, ast.Attribute)):\n\n#             function_name = get_full_function_name(node)\n\n#             print(f\"Found call {function_name}\")\n\n#             self.dependencies.append((function_name, node))\n\n# self.dependency_graph = self._build_dependency_graph(modified_tree)\n\n# # Create PythonEntity instances for each node in the dependency graph\n\n# for node, deps in self.dependency_graph.items():\n\n#     name = node[0] if isinstance(node, tuple) else node.name\n\n#     python_entity = PythonEntity(name, self, node[1] if isinstance(node, tuple) else node)\n\n#     python_entity.expand(self.dependency_graph)\n\n#     self.contents.append(python_entity)\n\n# self.expanded_state = \"expanded\"\n\n#     self.resolve_dependencies(self.entry_point_name\n\n#     # use self.call_graph to get the order of functions to explain\n\n#     # use self.name_to_entity to get the entity for each function\n\n# def _explain_dependencies(self, call_graph, start_points):\n\n#     explanation_order = []\n\n#     visited = set()\n\n#     external_dependencies = set()\n\n#     def dfs(function_name):\n\n#         if function_name in visited:\n\n#             return\n\n#         visited.add(function_name)\n\n#         for dependency in self.call_graph.get(function_name, []):\n\n#             if is_internal(dependency):  # Implement this function based on your project's context\n\n#                 dfs(dependency)\n\n#             else:\n\n#                 external_dependencies.add(dependency)\n\n#         explanation_order.append(function_name)\n\n#     for start_point in start_points:\n\n#         dfs(start_point)\n\n#     return explanation_order, external_dependencies\n\n"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "032c3360-d193-4aa7-9f2c-0520d2609c6d",
              "node_type": "class_definition",
              "decorator": null,
              "imports": [],
              "source": "class PythonEntity(Entity):\n    def __init__(self, name, parent, node: Node, node_type):\n        if node_type == \"module\":\n            super().__init__(f\"{parent.absolute_path}/{name}\", parent)\n        else:\n            if isinstance(name, bytes):\n                name = name.decode('utf-8')\n            super().__init__(f\"{parent.absolute_path}.{name}\", parent)\n        self.node = node\n        self.node_type = node_type\n        self.decorator = None\n        self.imports = []\n        self.source = node.text.decode('utf-8')\n    \n    def get_file_parent(self):\n        if self.parent and self.node_type==\"module\":\n            return self.parent\n        elif self.parent:\n            return self.parent.get_file_parent()\n        else:\n            return None\n        \n    def get_file_path(self):\n        if self.node_type == \"module\":\n            return self.absolute_path\n        else:\n            return self.get_file_parent().absolute_path\n        \n    def expand(self):\n\n        match self.node_type:\n            case 'module':\n                self.expand_node_children(self.node)\n\n            # case 'import_statement' | 'import_from_statement':\n            #     self.imports.append(self.node)\n            #     # TODO: DEPENDENCY ACKNOWLEDGEMENT\n            #     # node_dependencies = figure out what other python file we depend on\n            #     # self.dependencies.extend(node_dependencies)\n            #     node_dependencies = self.get_import_node_dependencies(self.node)\n            #     self.dependencies.extend(node_dependencies)\n\n            case 'function_definition':\n                # TODO: DEPENDENCY ACKNOWLEDGEMENT\n                # node_dependencies = get dependencies from the type hints for params and the return type\n                node_dependencies = self.get_parameter_node_dependencies(self.node) \n                # TODO: DOES NOT HANDLE RETURN TYPE\n                if node_dependencies:\n                    self.dependencies.extend(node_dependencies)\n\n                defintion_block_node = self.node.child_by_field_name(\"body\")\n                self.expand_node_children(defintion_block_node)\n\n            case 'class_definition':    \n                # TODO: DEPENDENCY ACKNOWLEDGEMENT\n                # node_dependencies = get the superclass if it exists\n                node_dependencies = self.get_parameter_node_dependencies(self.node)\n                if node_dependencies:\n                    self.dependencies.extend(node_dependencies)\n\n                defintion_block_node = self.node.child_by_field_name(\"body\")\n                self.expand_node_children(defintion_block_node)\n                \n            case 'decorated_definition':\n                if self.node.children[0].type != \"decorator\":\n                    raise ValueError(f\"Expected first child of decorated_definition to be a decorator, but got {self.node.children[0].type}\")\n                \n                self.decorator = self.node.children[0] \n                node_dependencies = self.get_decorator_node_dependencies(self.node)\n\n                definition = self.node.child_by_field_name(\"definition\")\n                match definition.type:\n                    case 'function_definition':\n                        node_dependencies = self.get_parameter_node_dependencies(self.node)\n                        if node_dependencies:\n                            self.dependencies.extend(node_dependencies)\n                    case 'class_definition':\n                        node_dependencies = self.get_parameter_node_dependencies(self.node)\n                        if node_dependencies:\n                            self.dependencies.extend(node_dependencies)\n                        \n                defintion_block_node = definition.child_by_field_name(\"body\")\n                self.expand_node_children(defintion_block_node)\n\n            case _:\n                raise ValueError(f\"Node type {self.node_type} not handled\")\n            \n    def expand_node_children(self, node):\n        top_level_nodes = []\n        for child in node.children:\n            match child.type:\n                case 'import_statement' | 'import_from_statement':\n                    # DEPENDENCY ACKNOWLEDGEMENT\n                    self.imports.append(self.node)\n                    node_dependencies = self.get_import_node_dependencies(self.node)\n                    if node_dependencies:\n                        self.dependencies.extend(node_dependencies)\n                    \n                    # Group in with top level nodes\n                    top_level_nodes.append(child)\n                case 'function_definition' | 'class_definition' | 'decorated_definition':\n                    entity = self.create_and_expand_entity(child)\n                    self.contents.append(entity)\n                case _:\n                    top_level_nodes.append(child)\n\n        if top_level_nodes:\n            top_level_node, top_level_node_name = self.wrap_top_level_code(top_level_nodes)\n            top_level_entity = self.create_and_expand_entity(top_level_node, top_level_node_name)\n            \n            self.dependencies.extend(self.get_top_level_node_dependencies(top_level_nodes))\n            self.contents.append(top_level_entity)\n\n\n    def get_top_level_node_dependencies(self, top_level_nodes):\n        def get_call_nodes(node):\n            call_nodes = []\n            stack = [node]\n            \n            while stack:\n                node = stack.pop() \n\n                if node.type == 'call':\n                    call_nodes.append(node)\n                \n                stack.extend(node.children)\n\n            return call_nodes\n        \n        dependencies = []\n        call_nodes = []\n        for node in top_level_nodes:\n            call_nodes.extend(get_call_nodes(node))\n\n        for call_node in call_nodes:\n            dependencies.append(PythonCallDependency(call_node, self))\n\n        return dependencies\n            \n    # def get_class_definition_node_dependencies(self, node):\n    #     self.get_parameter_node_dependencies(node)\n        \n    #     PythonCallDependency()\n    #     raise NotImplementedError(\"get_class_definition_node_dependencies not implemented\")\n    \n    # def get_function_definition_node_dependencies(self, node):\n    #     # for a function see if there are decorators\n    #     # type hints are going to be dependencies\n    #     # return type is going to be a dependency\n    #     self.get_parameter_node_dependencies(node)\n    #     raise NotImplementedError(\"get_function_definition_node_dependencies not implemented\")\n\n    def get_parameter_node_dependencies(self, function_defintion_node):\n        return \n        node = function_defintion_node.children_by_field_name(\"parameters\")[0] # should only be one # TODO: node was down below that this didn't assign to anything to i just randomly assigned it to \"node\" might not be right \n        typed_parameters = get_children_by_grammar_name(node, \"typed_parameters\")\n        types = []\n        for typed_parameter in typed_parameters:\n            types.extend(get_children_by_grammar_name(typed_parameter, \"type\"))\n\n        return types\n    \n\n        raise NotImplementedError(\"get_parameter_node_dependencies not implemented\")\n    \n    def get_decorator_node_dependencies(self, node):\n        # for a decorator, see if there are any arguments\n        # if there are, process them and add them to the dependencies\n        return\n        raise NotImplementedError(\"get_decorator_node_dependencies not implemented\")\n    \n    def get_import_node_dependencies(self, node):\n        # for an import, see if there are any aliases\n        # if there are, process them and add them to the dependencies\n        return\n        raise NotImplementedError(\"get_import_node_dependencies not implemented\")\n\n    \n    def create_and_expand_entity(self, node, node_name=None):\n        if node_name:\n            # This is a top-level code node and does not need to be expanded\n            entity = PythonEntity(node_name, self, node, \"top_level_code\")\n        else:\n            match node.type:\n                case 'decorated_definition':\n                    node_name = node.child_by_field_name(\"definition\").child_by_field_name(\"name\").text\n                case 'class_definition' | 'function_definition':\n                    node_name = node.child_by_field_name(\"name\").text\n                case _:\n                    raise ValueError(f\"Node type {node.type} not handled\")\n            entity = PythonEntity(node_name, self, node, node.type)\n            entity.expand()\n        return entity\n    \n    def wrap_top_level_code(self, nodes):\n        # Unique function name for the top-level code\n        top_level_node_name = f\"top_level_{self.node_type}_code\"\n\n        # # Generate the new function definition wrapping top-level code\n        wrapped_code = \"\"\n        for node in nodes:\n            wrapped_code += f\"{node.text.decode('utf-8')}\\n\\n\"\n\n        parser = Parser()\n        parser.set_language(PY_LANGUAGE)\n        tree = parser.parse(bytes(wrapped_code, \"utf8\"))\n\n        return tree.root_node, top_level_node_name\n\n        # for child in tree.root_node.children:\n        #     self.contents.append(PythonEntity(top_level_code_name, self, child, \"top_level_code\") )\n\n        \n    # def get_source_code(self):\n    #     source_code = \"\"\n    #     # get decorators\n    #     for decorator in self.node.decorator_list:\n    #         decorator_str = get_source_segment(self.get_file_parent().source_code, decorator)\n    #         source_code += f\"@{decorator_str}\\n\"\n\n    #     parent_source_code = self.get_file_parent().source_code\n    #     source_code += get_source_segment(parent_source_code, self.node)\n\n    #     return source_code\n    \n    # def get_source_code_main(self):\n    #     return ast.unparse(self.node)\n\n    # def expand(self):\n    #     # TODO: add decorators to contents/depedencies\n    #     print(f\"\\tExpanding python entity {self.node.name}\")\n    #     for node in ast.iter_child_nodes(self.node):\n    #         if isinstance(node, (ast.ClassDef, ast.FunctionDef, ast.AsyncFunctionDef)):\n    #             if isinstance(node, ast.ClassDef):\n    #                 # see if there is a parent class\n    #                 if node.bases:\n    #                     base_class = node.bases[0]\n    #                     if isinstance(base_class, ast.Name):\n    #                         self.dependencies.append((base_class.id, base_class))\n    #                     else:\n    #                         raise ValueError(\"Unhanded case for class inheritance for node: \" + str(node)+ \" with base class: \" + str(base_class))\n                        \n    #             # add decorators to dependencies\n    #             for decorator in node.decorator_list:\n    #                 decorator_str = get_source_segment(self.get_file_parent().source_code, decorator)\n    #                 self.dependencies.append((decorator_str, decorator))\n\n    #             print(f\"\\t\\tFound class/function {node.name}\")\n    #             class_entity = PythonEntity(node.name, self, node)\n    #             class_entity.expand()\n    #             self.contents.append(class_entity)\n    #         else:\n    #             dbuilder = DependencyBuilder()\n    #             dbuilder.visit(node)\n    #             dependencies = dbuilder.dependencies\n\n    #             if dependencies != []:\n    #                 print(f\"\\t\\tFound dependencies {dependencies}\")\n    #                 self.dependencies.extend(dependencies)\n    \n    # def get_type(self):\n    #     return self.node_type\n\n    # def expand(self, dependency_graph):\n    #     self.internal_dependencies = []\n    #     self.external_dependencies = []\n\n    #     # Retrieve dependencies from the graph for this entity\n    #     node_deps = dependency_graph.get((self.node.name, self.node), {})\n    #     for internal_dep in node_deps.get('internal_dependancies', []):\n    #         # Resolve to PythonEntity if possible\n    #         self.internal_dependencies.append(self._resolve_dependency(internal_dep, dependency_graph))\n\n    #     for external_dep in node_deps.get('external_dependancies', []):\n    #         self.external_dependencies.append(external_dep)  # Just store the external dependency as-is\n\n    # def _resolve_dependency(self, dep, dependency_graph):\n    #     # dep is a tuple (name, ast_node)\n    #     dep_name, dep_node = dep\n\n    #     # Check if this dependency is a key in the dependency graph\n    #     if dep in dependency_graph:\n    #         # Create a PythonEntity for this dependency\n    #         return PythonEntity(dep_name, self.parent, dep_node)\n    #     return dep \n    \n                    \n\n\n# class PythonClass(PythonEntity):\n#     def __init__(self, name, parent, node):\n#         super().__init__(f\"{parent.absolute_path}/{name}\", parent, node)\n\n    # def expand(self):\n    #     self.expanded_state = \"expanding\"\n    #     self.contents = []\n    #     for node in self.node.body:\n    #         if isinstance(node, ast.ClassDef):\n    #             self.contents.append(PythonClass(node.name, self, node.body))\n    #         elif isinstance(node, ast.FunctionDef):\n    #             self.contents.append(PythonFunction(node.name, self, node.body))\n    #     self.expanded_state = \"expanded\"\n\n#     def expand(self):\n#         self.expanded_state = \"expanding\"\n#         self.contents = []\n#         for node in ast.iter_child_nodes(self.node):\n#             if isinstance(node, ast.FunctionDef, ast.AsyncFunctionDef):\n#                 method_entity = PythonFunction(node.name, self, node)\n#                 method_entity.expand()\n#                 self.contents.append(method_entity)\n#             # Handle other possible internal structures like nested classes if needed\n\n#         self.expanded_state = \"expanded\"\n    \n#     def get_source_code(self):\n#         return ast.unparse(self.node)\n#         return ast.get_source_segment(self.get_file_parent.source_code, self.node)\n\n\n# class PythonFunction(PythonEntity):\n#     def __init__(self, name, parent, node):\n#         super().__init__(f\"{parent.absolute_path}/{name}\", parent, node)\n    \n#     def expand(self):\n#         self.expanded_state = \"expanding\"\n#         self.contents = []\n#         for node in self.node.body:\n#             if isinstance(node, ast.FunctionDef):\n#                 self.contents.append(PythonFunction(node.name, self, node.body))\n#         self.expanded_state = \"expanded\"\n\n# class PythonMainBlock(PythonEntity):\n#     def __init__(self, parent, nodes):\n#         super().__init__(f\"{parent.absolute_path}/main\", parent, nodes)\n    \n#     def expand(self):\n#         self.expanded_state = \"expanding\"\n#         self.contents = []\n#         for node in self.node:\n#             if isinstance(node, ast.FunctionDef):\n#                 self.contents.append(PythonFunction(node.name, self, node.body))\n#             elif isinstance(node, ast.ClassDef):\n#                 self.contents.append(PythonClass(node.name, self, node.body))\n#         self.expanded_state = \"expanded\"\n\n# class PythonFile(File):\n#     def __init__(self, absolute_path, parent=None):\n#         super().__init__(absolute_path, parent)\n#         with open(self.absolute_path, 'r') as file:\n#             self.source_code = file.read()\n#             self.modified_source_code = None\n#             self.imports = []\n#             self.name_to_entity = {}  # Map function names to their entities\n#             self.dependency_graph = None\n#             self.pseudo_main_contents = []\n\n\n#     def get_source_code(self):\n#         return self.source_code\n    \n\n#     def expand(self):\n#         self.expanded_state = \"expanding\"\n#         parser = Parser()\n#         parser.set_language(PY_LANGUAGE)\n\n#         with open(self.absolute_path, 'r') as file:\n#             source_code = file.read()\n\n#         tree = parser.parse(bytes(source_code, \"utf8\"))\n#         self._process_node(tree.root_node, parent=self, is_root=True)\n\n#         # # After processing, if there's top-level code, wrap it and modify the source code\n#         # if self.pseudo_main_contents:\n#         #     self._wrap_top_level_code()\n\n#     def _process_node(self, node, parent, is_root=False):\n#         # if node.type in ['import_statement', 'import_from_statement']:\n#         #     self.imports.append(node.text.decode('utf8'))  # Assuming source_code is utf-8 encoded\n\n#         if node.type in ['class_definition', 'function_definition', 'decorated_definition']:\n#             # Initialize PythonEntity with the node's text as a simple representation\n#             # entity_text = node.text.decode('utf8')  # Assuming source_code is utf-8 encoded\n        \n#             entity = None\n#             match node.type:\n#                 case 'import_statement':\n#                     self.imports = node\n#                 case 'class_definition':\n#                     # class has a \"identifier\" possibly an \"argument_list\" and a \"block\"\n#                     # entity = PythonEntity(get_tree_sitter_definition_node_name(node), parent, node, \"class\")\n#                     self.contents.append(\n#                         self.expand_class(node)\n#                     )\n#                     entity = PythonEntity(get_tree_sitter_definition_node_name(node), parent, node, \"class\")\n#                 case 'function_definition':\n#                     entity = PythonEntity(get_tree_sitter_definition_node_name(node), parent, node, \"function\")\n#                 case 'decorated_definition':\n#                     match node.children[1].type:\n#                         case \"class_definition\":\n#                             entity = PythonEntity(get_tree_sitter_definition_node_name(node), parent, node, \"decorated_class\")\n#                         case \"function_definition\":\n#                             entity = PythonEntity(get_tree_sitter_definition_node_name(node), parent, node, \"decorated_function\")\n#                         case _:\n#                             raise ValueError(f\"Node type {node.children[1].type} not handled for decorated_definition\")\n#                 case _:\n#                     raise ValueError(f\"Node type {node.type} not handled\")\n\n#             # Choose where to add the new entity: to the file or to a parent entity\n#             if parent:\n#                 parent.contents.append(entity)\n#             else:\n#                 self.contents.append(entity)\n            \n#             # Recursively process children, passing the current entity as the new parent\n#             for child in node.children:\n#                 self._process_node(child, parent=entity)\n\n#         elif is_root:\n#             # For the root node, process all children, but treat non-import/class/function nodes as pseudo-main\n#             for child in node.children:\n#                 if child.type not in ['class_definition', 'function_definition', 'decorated_definition']:\n#                     # These nodes are part of the top-level code\n#                     self.pseudo_main_contents.append(child.text.decode('utf8'))\n#                 else:\n#                     self._process_node(child, parent=parent)\n\n#     def expand_class(self, node):\n#         entity = PythonEntity(get_tree_sitter_definition_node_name(node), self, node, \"class\")\n\n#     def _wrap_top_level_code(self):\n#         # Unique function name for the top-level code\n#         pseudo_main_name = \"top_level_module_code_\" + str(uuid.uuid4()).replace(\"-\", \"_\")\n\n#         # Generate the new function definition wrapping top-level code\n#         wrapped_code = f\"def {pseudo_main_name}():\\n\"\n#         for line in self.pseudo_main_contents:\n#             wrapped_code += f\"    {line}\\n\"\n        \n#         # # Add a call to the newly defined function at the end\n#         # wrapped_code += f\"\\nif __name__ == '__main__':\\n    {pseudo_main_name}()\\n\"\n\n#         parser = Parser()\n#         parser.set_language(PY_LANGUAGE)\n#         tree = parser.parse(bytes(wrapped_code, \"utf8\"))\n\n#         for child in tree.root_node.children:\n#             self.contents.append(PythonEntity(pseudo_main_name, self, child, \"top_level_code\") )\n\n\n\n\n\n\n    # def expand(self):\n    #     self.expanded_state = \"expanding\"\n    #     print(\"Expanding python file\")\n    #     self.contents = []\n\n        # with open(self.absolute_path, 'r') as file:\n        #     source = file.read()\n        \n        # modified_tree, self.entry_point_name = self._extract_main(source)\n        # self.modified_source_code = ast.unparse(modified_tree)\n        \n    #     for node in ast.iter_child_nodes(modified_tree): #ast.walk(tree):\n    #         class_entity = PythonEntity(node.name, self, node)\n    #         class_entity.expand()\n    #         self.contents.append(class_entity)\n    #         if isinstance(node, (ast.ClassDef, ast.FunctionDef, ast.AsyncFunctionDef)):\n    #             print(f\"Found class/function {node.name}\")\n    #             self.name_to_entity[node.name] = class_entity\n    #         elif isinstance(node, (ast.Call, ast.Attribute)):\n    #             function_name = get_full_function_name(node)\n    #             print(f\"Found call {function_name}\")\n    #             self.dependencies.append((function_name, node))\n\n        # self.dependency_graph = self._build_dependency_graph(modified_tree)\n\n        # # Create PythonEntity instances for each node in the dependency graph\n        # for node, deps in self.dependency_graph.items():\n        #     name = node[0] if isinstance(node, tuple) else node.name\n        #     python_entity = PythonEntity(name, self, node[1] if isinstance(node, tuple) else node)\n        #     python_entity.expand(self.dependency_graph)\n        #     self.contents.append(python_entity)\n\n        \n        # self.expanded_state = \"expanded\"\n\n    def _build_dependency_graph(self, tree):\n        # print(self.absolute_path)\n        # print(ast.unparse(tree))\n        # Add parent references to each node\n        for node in ast.walk(tree):\n            for child in ast.iter_child_nodes(node):\n                child.parent = node\n\n        builder = DependencyGraphBuilder()\n        builder.visit(tree)\n        return builder.graph\n\n    def _extract_main(self, source: str) -> ast.Module:\n            \"\"\"\n            Extracts the main block from the given source code.\n\n            Args:\n                source (str): The source code to extract the main block from.\n\n            Returns:\n                ast.Module: The modified abstract syntax tree with the main block extracted.\n            \"\"\"\n            tree = ast.parse(source)\n\n            main_block_contents = []\n\n            file_nodes = []\n\n            for node in ast.iter_child_nodes(tree):\n                if isinstance(node, (ast.ClassDef, ast.FunctionDef, ast.AsyncFunctionDef)):\n                    file_nodes.append(node)\n                elif isinstance(node, (ast.Import, ast.ImportFrom)):\n                    self.imports.append(node)\n                else:\n                    main_block_contents.append(node)\n\n            entry_point_name = f'main-{uuid.uuid4()}' # TODO: Think if this is the best inteface? It's possible this is None for a file \n\n            if main_block_contents:\n                # Create a PythonMainBlock entity if there are top-level nodes\n                main_node = ast.FunctionDef(\n                    name=entry_point_name,\n                    args=ast.arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]),\n                    body=main_block_contents,\n                    decorator_list=[],\n                    returns=None,\n                    lineno=0,\n                    col_offset=0\n                )\n                file_nodes.append(main_node)\n\n            tree.body = file_nodes\n\n            return tree, entry_point_name\n\n\n    def explain(self):\n        if self.expanded_state != \"expanded\":\n            raise ValueError(\"Python file must be expanded before it can be explained\")\n\n\n    #     self.resolve_dependencies(self.entry_point_name\n    #     # use self.call_graph to get the order of functions to explain\n    #     # use self.name_to_entity to get the entity for each function\n\n    # def _explain_dependencies(self, call_graph, start_points):\n    #     explanation_order = []\n    #     visited = set()\n    #     external_dependencies = set()\n\n    #     def dfs(function_name):\n    #         if function_name in visited:\n    #             return\n    #         visited.add(function_name)\n\n    #         for dependency in self.call_graph.get(function_name, []):\n    #             if is_internal(dependency):  # Implement this function based on your project's context\n    #                 dfs(dependency)\n    #             else:\n    #                 external_dependencies.add(dependency)\n\n    #         explanation_order.append(function_name)\n\n    #     for start_point in start_points:\n    #         dfs(start_point)\n\n    #     return explanation_order, external_dependencies"
            },
            {
              "type": "PythonEntity",
              "name": "python.py.PythonExplainer",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonExplainer",
              "text": "",
              "uuid": "c7b7c202-618b-45da-b2a6-a8d551f604c3",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "python.py.PythonExplainer.__init__",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonExplainer.__init__",
                  "text": "",
                  "uuid": "8c5380a1-a93a-4491-bf9a-ee7a1bf380ac",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "python.py.PythonExplainer.__init__.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonExplainer.__init__.top_level_function_definition_code",
                      "text": "",
                      "uuid": "677ca32d-9252-4f93-a1cc-362f8e4d7bbb",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "8c5380a1-a93a-4491-bf9a-ee7a1bf380ac",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "super().__init__(entity)\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae1ba50>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae18810>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "c7b7c202-618b-45da-b2a6-a8d551f604c3",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def __init__(self, entity: Entity):\n        super().__init__(entity)"
                },
                {
                  "type": "PythonEntity",
                  "name": "python.py.PythonExplainer.explain",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonExplainer.explain",
                  "text": "",
                  "uuid": "c33485eb-513d-49af-af6e-39f4d4967775",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "python.py.PythonExplainer.explain.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.PythonExplainer.explain.top_level_function_definition_code",
                      "text": "",
                      "uuid": "8aaaeaa2-9346-43c0-8666-160e4eb45801",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "c33485eb-513d-49af-af6e-39f4d4967775",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "prompt = f\"Write a Python docstring for the following {self.entity.get_type().lower()}:\\n\\n\"\n\nprompt += self.entity.get_source_code() + \"\\n\"\n\n# Generate the explanation\n\nexplanation_text = LLM(prompt, \"gpt-3.5-turbo-1106\")\n\n# Format the explanation as a Python docstring\n\nformatted_explanation = '\"\"\"' + explanation_text + '\"\"\"'\n\nreturn Explanation(formatted_explanation)\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abea590>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abea610>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abea6d0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abea790>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abea850>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "c7b7c202-618b-45da-b2a6-a8d551f604c3",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def explain(self) -> Explanation:\n        # Create a prompt for the AI model\n        prompt = f\"Write a Python docstring for the following {self.entity.get_type().lower()}:\\n\\n\"\n        prompt += self.entity.get_source_code() + \"\\n\"\n\n        # Generate the explanation\n        explanation_text = LLM(prompt, \"gpt-3.5-turbo-1106\")\n\n        # Format the explanation as a Python docstring\n        formatted_explanation = '\"\"\"' + explanation_text + '\"\"\"'\n\n        return Explanation(formatted_explanation)"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "032c3360-d193-4aa7-9f2c-0520d2609c6d",
              "node_type": "class_definition",
              "decorator": null,
              "imports": [],
              "source": "class PythonExplainer(Explainer):\n    def __init__(self, entity: Entity):\n        super().__init__(entity)\n\n    def explain(self) -> Explanation:\n        # Create a prompt for the AI model\n        prompt = f\"Write a Python docstring for the following {self.entity.get_type().lower()}:\\n\\n\"\n        prompt += self.entity.get_source_code() + \"\\n\"\n\n        # Generate the explanation\n        explanation_text = LLM(prompt, \"gpt-3.5-turbo-1106\")\n\n        # Format the explanation as a Python docstring\n        formatted_explanation = '\"\"\"' + explanation_text + '\"\"\"'\n\n        return Explanation(formatted_explanation)"
            },
            {
              "type": "PythonEntity",
              "name": "python.py.DependencyGraphBuilder",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.DependencyGraphBuilder",
              "text": "",
              "uuid": "3a227910-51cc-43da-960d-2f9ad8e80278",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "python.py.DependencyGraphBuilder.__init__",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.DependencyGraphBuilder.__init__",
                  "text": "",
                  "uuid": "e27cb628-7bd9-4fd9-a0f0-5e8d370a4c34",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "python.py.DependencyGraphBuilder.__init__.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.DependencyGraphBuilder.__init__.top_level_function_definition_code",
                      "text": "",
                      "uuid": "e1c76a1d-ef8f-480d-8625-9042e943cbfd",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "e27cb628-7bd9-4fd9-a0f0-5e8d370a4c34",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "self.graph = {}\n\nself.current_function = None\n\nself.current_class = None\n\nself.class_map = {}\n\nself.function_map = {}\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "3a227910-51cc-43da-960d-2f9ad8e80278",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def __init__(self):\n        self.graph = {}\n        self.current_function = None\n        self.current_class = None\n        self.class_map = {}\n        self.function_map = {}"
                },
                {
                  "type": "PythonEntity",
                  "name": "python.py.DependencyGraphBuilder._get_node_name_pair",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.DependencyGraphBuilder._get_node_name_pair",
                  "text": "",
                  "uuid": "9d3f91b5-2883-43e5-83be-056b41fadf8d",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "python.py.DependencyGraphBuilder._get_node_name_pair.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.DependencyGraphBuilder._get_node_name_pair.top_level_function_definition_code",
                      "text": "",
                      "uuid": "801aad18-57d7-4c97-baf9-f3127640e706",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "9d3f91b5-2883-43e5-83be-056b41fadf8d",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "return (node.name, node)\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "3a227910-51cc-43da-960d-2f9ad8e80278",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def _get_node_name_pair(self, node):\n        return (node.name, node)"
                },
                {
                  "type": "PythonEntity",
                  "name": "python.py.DependencyGraphBuilder.visit_ClassDef",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.DependencyGraphBuilder.visit_ClassDef",
                  "text": "",
                  "uuid": "43c3e88c-d9f6-4ad8-83d4-031d1d7dcd7e",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "python.py.DependencyGraphBuilder.visit_ClassDef.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.DependencyGraphBuilder.visit_ClassDef.top_level_function_definition_code",
                      "text": "",
                      "uuid": "2ea303a2-17af-44a1-87c9-45b4bfe9a5e4",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "43c3e88c-d9f6-4ad8-83d4-031d1d7dcd7e",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "self.class_map[node.name] = node\n\nself.current_class = node\n\nclass_info = {'internal_dependancies': [], 'external_dependancies': []}\n\nfor base in node.bases:\n            # Resolve base class if it's in class_map\n            if isinstance(base, ast.Name) and base.id in self.class_map:\n                class_info['internal_dependancies'].append(self._get_node_name_pair(self.class_map[base.id]))\n            else:\n                class_info['internal_dependancies'].append(base)\n\nself.graph[self._get_node_name_pair(node)] = class_info\n\nself.generic_visit(node)\n\nself.current_class = None\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae28750>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae287d0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae28890>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae28950>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae28a10>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae28b10>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "3a227910-51cc-43da-960d-2f9ad8e80278",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def visit_ClassDef(self, node):\n        self.class_map[node.name] = node\n        self.current_class = node\n        class_info = {'internal_dependancies': [], 'external_dependancies': []}\n\n        for base in node.bases:\n            # Resolve base class if it's in class_map\n            if isinstance(base, ast.Name) and base.id in self.class_map:\n                class_info['internal_dependancies'].append(self._get_node_name_pair(self.class_map[base.id]))\n            else:\n                class_info['internal_dependancies'].append(base)\n\n        self.graph[self._get_node_name_pair(node)] = class_info\n        self.generic_visit(node)\n        self.current_class = None"
                },
                {
                  "type": "PythonEntity",
                  "name": "python.py.DependencyGraphBuilder.visit_FunctionDef",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.DependencyGraphBuilder.visit_FunctionDef",
                  "text": "",
                  "uuid": "6a8bc2ab-5718-4db4-942a-59f14d6c02c0",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "python.py.DependencyGraphBuilder.visit_FunctionDef.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.DependencyGraphBuilder.visit_FunctionDef.top_level_function_definition_code",
                      "text": "",
                      "uuid": "b75b8e8a-2a01-40ba-9d4b-05200cd1b545",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "6a8bc2ab-5718-4db4-942a-59f14d6c02c0",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "self.function_map[node.name] = node\n\nself.current_function = node\n\nfunc_info = {'internal_dependancies': [], 'external_dependancies': []}\n\n# Add the function to the graph immediately\n\nif self.current_class:\n            self.graph[self._get_node_name_pair(self.current_class)]['internal_dependancies'].append(self._get_node_name_pair(node))\n            # If the function is part of a class, we add it to the class's functions\n        else:\n            self.graph[self._get_node_name_pair(node)] = func_info  # Add standalone function\n\nself.generic_visit(node)\n\nself.current_function = None\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae2a490>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae2a510>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae2a5d0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae2a690>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae2a750>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "3a227910-51cc-43da-960d-2f9ad8e80278",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def visit_FunctionDef(self, node):\n        self.function_map[node.name] = node\n        self.current_function = node\n        func_info = {'internal_dependancies': [], 'external_dependancies': []}\n\n        # Add the function to the graph immediately\n        if self.current_class:\n            self.graph[self._get_node_name_pair(self.current_class)]['internal_dependancies'].append(self._get_node_name_pair(node))\n            # If the function is part of a class, we add it to the class's functions\n        else:\n            self.graph[self._get_node_name_pair(node)] = func_info  # Add standalone function\n\n        self.generic_visit(node)\n        self.current_function = None"
                },
                {
                  "type": "PythonEntity",
                  "name": "python.py.DependencyGraphBuilder.visit_Call",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.DependencyGraphBuilder.visit_Call",
                  "text": "",
                  "uuid": "0b4c326b-7e12-4711-938f-a8fce7eaf323",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "python.py.DependencyGraphBuilder.visit_Call.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.DependencyGraphBuilder.visit_Call.top_level_function_definition_code",
                      "text": "",
                      "uuid": "629bc50b-0080-48a1-a4fd-21136d2c8185",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "0b4c326b-7e12-4711-938f-a8fce7eaf323",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "called_func_name = self._get_full_function_name(node.func)\n\nif called_func_name in self.function_map:\n            # Internal dependency\n            target = self.function_map[called_func_name]\n            dep_key = 'internal_dependancies'\n        else:\n            # External dependency\n            target = (called_func_name, node.func) if called_func_name else node.func\n            dep_key = 'external_dependancies'\n\ncurrent_scope = self.current_function or self.current_class\n\nif current_scope:\n            scope_key = self._get_node_name_pair(current_scope)\n            if scope_key not in self.graph:\n                self.graph[scope_key] = {'internal_dependancies': [], 'external_dependancies': []}\n            self.graph[scope_key][dep_key].append(target)\n\nself.generic_visit(node)\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae2dfd0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae2e050>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae2e110>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae2e1d0>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "3a227910-51cc-43da-960d-2f9ad8e80278",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def visit_Call(self, node):\n        called_func_name = self._get_full_function_name(node.func)\n\n        if called_func_name in self.function_map:\n            # Internal dependency\n            target = self.function_map[called_func_name]\n            dep_key = 'internal_dependancies'\n        else:\n            # External dependency\n            target = (called_func_name, node.func) if called_func_name else node.func\n            dep_key = 'external_dependancies'\n\n        current_scope = self.current_function or self.current_class\n        if current_scope:\n            scope_key = self._get_node_name_pair(current_scope)\n            if scope_key not in self.graph:\n                self.graph[scope_key] = {'internal_dependancies': [], 'external_dependancies': []}\n            self.graph[scope_key][dep_key].append(target)\n\n        self.generic_visit(node)"
                },
                {
                  "type": "PythonEntity",
                  "name": "python.py.DependencyGraphBuilder.first_pass",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.DependencyGraphBuilder.first_pass",
                  "text": "",
                  "uuid": "40d7746c-95ce-402b-91ce-e564dcd2eb06",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "python.py.DependencyGraphBuilder.first_pass.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.DependencyGraphBuilder.first_pass.top_level_function_definition_code",
                      "text": "",
                      "uuid": "13c74154-fb3f-4cfd-97d4-718b8aafced4",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "40d7746c-95ce-402b-91ce-e564dcd2eb06",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "\"\"\"First pass to build function and class maps.\"\"\"\n\nif isinstance(node, ast.FunctionDef):\n            self.function_map[node.name] = node\n        elif isinstance(node, ast.ClassDef):\n            self.class_map[node.name] = node\n\nfor child in ast.iter_child_nodes(node):\n            self.first_pass(child)\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae2ac90>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae2ad50>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae2b150>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae2b290>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "3a227910-51cc-43da-960d-2f9ad8e80278",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def first_pass(self, node):\n        \"\"\"First pass to build function and class maps.\"\"\"\n        if isinstance(node, ast.FunctionDef):\n            self.function_map[node.name] = node\n        elif isinstance(node, ast.ClassDef):\n            self.class_map[node.name] = node\n        for child in ast.iter_child_nodes(node):\n            self.first_pass(child)"
                },
                {
                  "type": "PythonEntity",
                  "name": "python.py.DependencyGraphBuilder.build",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.DependencyGraphBuilder.build",
                  "text": "",
                  "uuid": "476251a7-0f8d-4377-b098-70191d356336",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "python.py.DependencyGraphBuilder.build.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.DependencyGraphBuilder.build.top_level_function_definition_code",
                      "text": "",
                      "uuid": "2d044bcf-713e-4aff-b516-fed94884583d",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "476251a7-0f8d-4377-b098-70191d356336",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "\"\"\"Build the dependency graph in two passes.\"\"\"\n\n# First pass: build function and class maps\n\nself.first_pass(tree)\n\n# Second pass: build the actual dependency graph\n\nself.visit(tree)\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abeb890>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29abeb110>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "3a227910-51cc-43da-960d-2f9ad8e80278",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def build(self, tree):\n        \"\"\"Build the dependency graph in two passes.\"\"\"\n        # First pass: build function and class maps\n        self.first_pass(tree)\n\n        # Second pass: build the actual dependency graph\n        self.visit(tree)"
                },
                {
                  "type": "PythonEntity",
                  "name": "python.py.DependencyGraphBuilder._get_called_function_name",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.DependencyGraphBuilder._get_called_function_name",
                  "text": "",
                  "uuid": "142dabc3-2489-40c9-a42c-218803b845ae",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "python.py.DependencyGraphBuilder._get_called_function_name.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.DependencyGraphBuilder._get_called_function_name.top_level_function_definition_code",
                      "text": "",
                      "uuid": "4db1df76-8231-4c84-88e5-f1f5d4d3c8ad",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "142dabc3-2489-40c9-a42c-218803b845ae",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "\"\"\"\n        Extract the function name from a call node.\n        \"\"\"\n\nif isinstance(node, ast.Name):\n            return node.id\n        elif isinstance(node, ast.Attribute):\n            # If it's an attribute, return the attribute name\n            # (e.g., 'method_name' for 'obj.method_name()')\n            return node.attr\n\n# Handle more cases if necessary\n\nreturn None\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae2e310>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae2e390>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "3a227910-51cc-43da-960d-2f9ad8e80278",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def _get_called_function_name(self, node):\n        \"\"\"\n        Extract the function name from a call node.\n        \"\"\"\n        if isinstance(node, ast.Name):\n            return node.id\n        elif isinstance(node, ast.Attribute):\n            # If it's an attribute, return the attribute name\n            # (e.g., 'method_name' for 'obj.method_name()')\n            return node.attr\n        # Handle more cases if necessary\n        return None"
                },
                {
                  "type": "PythonEntity",
                  "name": "python.py.DependencyGraphBuilder._get_full_function_name",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.DependencyGraphBuilder._get_full_function_name",
                  "text": "",
                  "uuid": "6f77c85a-fb08-467a-9506-25bf410453e2",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "python.py.DependencyGraphBuilder._get_full_function_name.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.DependencyGraphBuilder._get_full_function_name.top_level_function_definition_code",
                      "text": "",
                      "uuid": "88b9afa1-c4eb-4a96-9df0-a2cbdf0819d3",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "6f77c85a-fb08-467a-9506-25bf410453e2",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "\"\"\"\n        Recursively extract the full function name from an AST node.\n        \"\"\"\n\nif isinstance(node, ast.Name):\n            return node.id\n        elif isinstance(node, ast.Attribute):\n            value = self._get_full_function_name(node.value)\n            return f\"{value}.{node.attr}\" if value else node.attr\n\nreturn None\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae38350>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae383d0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae38490>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "3a227910-51cc-43da-960d-2f9ad8e80278",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def _get_full_function_name(self, node):\n        \"\"\"\n        Recursively extract the full function name from an AST node.\n        \"\"\"\n        if isinstance(node, ast.Name):\n            return node.id\n        elif isinstance(node, ast.Attribute):\n            value = self._get_full_function_name(node.value)\n            return f\"{value}.{node.attr}\" if value else node.attr\n        return None"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "032c3360-d193-4aa7-9f2c-0520d2609c6d",
              "node_type": "class_definition",
              "decorator": null,
              "imports": [],
              "source": "class DependencyGraphBuilder(ast.NodeVisitor):\n    def __init__(self):\n        self.graph = {}\n        self.current_function = None\n        self.current_class = None\n        self.class_map = {}\n        self.function_map = {}\n\n    def _get_node_name_pair(self, node):\n        return (node.name, node)\n\n    def visit_ClassDef(self, node):\n        self.class_map[node.name] = node\n        self.current_class = node\n        class_info = {'internal_dependancies': [], 'external_dependancies': []}\n\n        for base in node.bases:\n            # Resolve base class if it's in class_map\n            if isinstance(base, ast.Name) and base.id in self.class_map:\n                class_info['internal_dependancies'].append(self._get_node_name_pair(self.class_map[base.id]))\n            else:\n                class_info['internal_dependancies'].append(base)\n\n        self.graph[self._get_node_name_pair(node)] = class_info\n        self.generic_visit(node)\n        self.current_class = None\n\n    def visit_FunctionDef(self, node):\n        self.function_map[node.name] = node\n        self.current_function = node\n        func_info = {'internal_dependancies': [], 'external_dependancies': []}\n\n        # Add the function to the graph immediately\n        if self.current_class:\n            self.graph[self._get_node_name_pair(self.current_class)]['internal_dependancies'].append(self._get_node_name_pair(node))\n            # If the function is part of a class, we add it to the class's functions\n        else:\n            self.graph[self._get_node_name_pair(node)] = func_info  # Add standalone function\n\n        self.generic_visit(node)\n        self.current_function = None\n\n    def visit_Call(self, node):\n        called_func_name = self._get_full_function_name(node.func)\n\n        if called_func_name in self.function_map:\n            # Internal dependency\n            target = self.function_map[called_func_name]\n            dep_key = 'internal_dependancies'\n        else:\n            # External dependency\n            target = (called_func_name, node.func) if called_func_name else node.func\n            dep_key = 'external_dependancies'\n\n        current_scope = self.current_function or self.current_class\n        if current_scope:\n            scope_key = self._get_node_name_pair(current_scope)\n            if scope_key not in self.graph:\n                self.graph[scope_key] = {'internal_dependancies': [], 'external_dependancies': []}\n            self.graph[scope_key][dep_key].append(target)\n\n        self.generic_visit(node)\n        \n    def first_pass(self, node):\n        \"\"\"First pass to build function and class maps.\"\"\"\n        if isinstance(node, ast.FunctionDef):\n            self.function_map[node.name] = node\n        elif isinstance(node, ast.ClassDef):\n            self.class_map[node.name] = node\n        for child in ast.iter_child_nodes(node):\n            self.first_pass(child)\n\n    def build(self, tree):\n        \"\"\"Build the dependency graph in two passes.\"\"\"\n        # First pass: build function and class maps\n        self.first_pass(tree)\n\n        # Second pass: build the actual dependency graph\n        self.visit(tree)\n\n    def _get_called_function_name(self, node):\n        \"\"\"\n        Extract the function name from a call node.\n        \"\"\"\n        if isinstance(node, ast.Name):\n            return node.id\n        elif isinstance(node, ast.Attribute):\n            # If it's an attribute, return the attribute name\n            # (e.g., 'method_name' for 'obj.method_name()')\n            return node.attr\n        # Handle more cases if necessary\n        return None\n\n    def _get_full_function_name(self, node):\n        \"\"\"\n        Recursively extract the full function name from an AST node.\n        \"\"\"\n        if isinstance(node, ast.Name):\n            return node.id\n        elif isinstance(node, ast.Attribute):\n            value = self._get_full_function_name(node.value)\n            return f\"{value}.{node.attr}\" if value else node.attr\n        return None"
            },
            {
              "type": "PythonEntity",
              "name": "python.py.build_dependency_graph",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.build_dependency_graph",
              "text": "",
              "uuid": "a949859f-91c5-44e0-b7cb-c8b38924b718",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "python.py.build_dependency_graph.top_level_function_definition_code",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.build_dependency_graph.top_level_function_definition_code",
                  "text": "",
                  "uuid": "d1b3660f-bbf3-4296-a47e-b28f45c0bc4e",
                  "contents": [],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "a949859f-91c5-44e0-b7cb-c8b38924b718",
                  "node_type": "top_level_code",
                  "decorator": null,
                  "imports": [],
                  "source": "tree = ast.parse(source_code)\n\n# Add parent references to each node\n\nfor node in ast.walk(tree):\n        for child in ast.iter_child_nodes(node):\n            child.parent = node\n\nbuilder = DependencyGraphBuilder()\n\nbuilder.build(tree)\n\nreturn builder.graph\n\n"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae39550>",
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae395d0>",
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae39690>",
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae39750>",
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae39810>"
              ],
              "expanded_state": "unexpanded",
              "parent_uuid": "032c3360-d193-4aa7-9f2c-0520d2609c6d",
              "node_type": "function_definition",
              "decorator": null,
              "imports": [],
              "source": "def build_dependency_graph(source_code):\n    tree = ast.parse(source_code)\n\n    # Add parent references to each node\n    for node in ast.walk(tree):\n        for child in ast.iter_child_nodes(node):\n            child.parent = node\n\n    builder = DependencyGraphBuilder()\n    builder.build(tree)\n    return builder.graph"
            },
            {
              "type": "PythonEntity",
              "name": "python.py.DependencyBuilder",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.DependencyBuilder",
              "text": "",
              "uuid": "c7d7bb7a-5ed4-4126-a4c7-7eb384ce44bf",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "python.py.DependencyBuilder.__init__",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.DependencyBuilder.__init__",
                  "text": "",
                  "uuid": "fa9dc924-c352-4e2f-af5c-fce417d9c15b",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "python.py.DependencyBuilder.__init__.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.DependencyBuilder.__init__.top_level_function_definition_code",
                      "text": "",
                      "uuid": "61281abe-904c-4b52-80df-2cbde82924e4",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "fa9dc924-c352-4e2f-af5c-fce417d9c15b",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "self.dependencies = []\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "c7d7bb7a-5ed4-4126-a4c7-7eb384ce44bf",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def __init__(self):\n        self.dependencies = []"
                },
                {
                  "type": "PythonEntity",
                  "name": "python.py.DependencyBuilder.visit_Call",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.DependencyBuilder.visit_Call",
                  "text": "",
                  "uuid": "c7b4d4dd-6e7a-4425-8fa8-4b53b7161e7b",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "python.py.DependencyBuilder.visit_Call.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.DependencyBuilder.visit_Call.top_level_function_definition_code",
                      "text": "",
                      "uuid": "4c6a4097-8604-438b-838b-11248902b240",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "c7b4d4dd-6e7a-4425-8fa8-4b53b7161e7b",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "called_func_name = self._get_full_function_name(node.func)\n\ntarget = (called_func_name, node.func)\n\n#if called_func_name else node.func\n\nself.dependencies.append(target)\n\nself.generic_visit(node)\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae3abd0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae3ac50>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae3ad10>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "c7d7bb7a-5ed4-4126-a4c7-7eb384ce44bf",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def visit_Call(self, node):\n        called_func_name = self._get_full_function_name(node.func)\n        target = (called_func_name, node.func) #if called_func_name else node.func\n        self.dependencies.append(target)\n        self.generic_visit(node)"
                },
                {
                  "type": "PythonEntity",
                  "name": "python.py.DependencyBuilder._get_called_function_name",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.DependencyBuilder._get_called_function_name",
                  "text": "",
                  "uuid": "7720436b-6591-4674-be12-7146cc801cef",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "python.py.DependencyBuilder._get_called_function_name.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.DependencyBuilder._get_called_function_name.top_level_function_definition_code",
                      "text": "",
                      "uuid": "a5c9a3cb-e2e4-46fb-8784-f4052ee311d7",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "7720436b-6591-4674-be12-7146cc801cef",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "\"\"\"\n        Extract the function name from a call node.\n        \"\"\"\n\nif isinstance(node, ast.Name):\n            return node.id\n        elif isinstance(node, ast.Attribute):\n            # If it's an attribute, return the attribute name\n            # (e.g., 'method_name' for 'obj.method_name()')\n            return node.attr\n\n# Handle more cases if necessary\n\nreturn None\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae3c210>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae3c290>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "c7d7bb7a-5ed4-4126-a4c7-7eb384ce44bf",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def _get_called_function_name(self, node):\n        \"\"\"\n        Extract the function name from a call node.\n        \"\"\"\n        if isinstance(node, ast.Name):\n            return node.id\n        elif isinstance(node, ast.Attribute):\n            # If it's an attribute, return the attribute name\n            # (e.g., 'method_name' for 'obj.method_name()')\n            return node.attr\n        # Handle more cases if necessary\n        return None"
                },
                {
                  "type": "PythonEntity",
                  "name": "python.py.DependencyBuilder._get_full_function_name",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.DependencyBuilder._get_full_function_name",
                  "text": "",
                  "uuid": "1cf3b16e-f6e6-43b1-a0ac-84ee3f8c24d1",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "python.py.DependencyBuilder._get_full_function_name.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.DependencyBuilder._get_full_function_name.top_level_function_definition_code",
                      "text": "",
                      "uuid": "acb106eb-2556-425c-a5e7-62c6e013bc38",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "1cf3b16e-f6e6-43b1-a0ac-84ee3f8c24d1",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "\"\"\"\n        Recursively extract the full function name from an AST node.\n        \"\"\"\n\nif isinstance(node, ast.Name):\n            return node.id\n        elif isinstance(node, ast.Attribute):\n            value = self._get_full_function_name(node.value)\n            return f\"{value}.{node.attr}\" if value else node.attr\n\nreturn None\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae3e210>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae3e290>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae3e350>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "c7d7bb7a-5ed4-4126-a4c7-7eb384ce44bf",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def _get_full_function_name(self, node):\n        \"\"\"\n        Recursively extract the full function name from an AST node.\n        \"\"\"\n        if isinstance(node, ast.Name):\n            return node.id\n        elif isinstance(node, ast.Attribute):\n            value = self._get_full_function_name(node.value)\n            return f\"{value}.{node.attr}\" if value else node.attr\n        return None"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "032c3360-d193-4aa7-9f2c-0520d2609c6d",
              "node_type": "class_definition",
              "decorator": null,
              "imports": [],
              "source": "class DependencyBuilder(ast.NodeVisitor):\n    def __init__(self):\n        self.dependencies = []\n\n    def visit_Call(self, node):\n        called_func_name = self._get_full_function_name(node.func)\n        target = (called_func_name, node.func) #if called_func_name else node.func\n        self.dependencies.append(target)\n        self.generic_visit(node)\n        \n    def _get_called_function_name(self, node):\n        \"\"\"\n        Extract the function name from a call node.\n        \"\"\"\n        if isinstance(node, ast.Name):\n            return node.id\n        elif isinstance(node, ast.Attribute):\n            # If it's an attribute, return the attribute name\n            # (e.g., 'method_name' for 'obj.method_name()')\n            return node.attr\n        # Handle more cases if necessary\n        return None\n\n    def _get_full_function_name(self, node):\n        \"\"\"\n        Recursively extract the full function name from an AST node.\n        \"\"\"\n        if isinstance(node, ast.Name):\n            return node.id\n        elif isinstance(node, ast.Attribute):\n            value = self._get_full_function_name(node.value)\n            return f\"{value}.{node.attr}\" if value else node.attr\n        return None"
            },
            {
              "type": "PythonEntity",
              "name": "python.py.get_called_function_name",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.get_called_function_name",
              "text": "",
              "uuid": "73be4e7e-4105-4708-b7f6-d71396528d84",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "python.py.get_called_function_name.top_level_function_definition_code",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.get_called_function_name.top_level_function_definition_code",
                  "text": "",
                  "uuid": "0e5184a0-a0ba-44f8-8434-420d146bf662",
                  "contents": [],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "73be4e7e-4105-4708-b7f6-d71396528d84",
                  "node_type": "top_level_code",
                  "decorator": null,
                  "imports": [],
                  "source": "\"\"\"\n        Extract the function name from a call node.\n        \"\"\"\n\nif isinstance(node, ast.Name):\n            return node.id\n        elif isinstance(node, ast.Attribute):\n            # If it's an attribute, return the attribute name\n            # (e.g., 'method_name' for 'obj.method_name()')\n            return node.attr\n\n# Handle more cases if necessary\n\nreturn None\n\n"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae3e790>",
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae3e810>"
              ],
              "expanded_state": "unexpanded",
              "parent_uuid": "032c3360-d193-4aa7-9f2c-0520d2609c6d",
              "node_type": "function_definition",
              "decorator": null,
              "imports": [],
              "source": "def get_called_function_name(node: ast.AST):\n        \"\"\"\n        Extract the function name from a call node.\n        \"\"\"\n        if isinstance(node, ast.Name):\n            return node.id\n        elif isinstance(node, ast.Attribute):\n            # If it's an attribute, return the attribute name\n            # (e.g., 'method_name' for 'obj.method_name()')\n            return node.attr\n        # Handle more cases if necessary\n        return None"
            },
            {
              "type": "PythonEntity",
              "name": "python.py.get_full_function_name",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.get_full_function_name",
              "text": "",
              "uuid": "268a7cfd-3dd8-47f2-88bd-22546513f58a",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "python.py.get_full_function_name.top_level_function_definition_code",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.get_full_function_name.top_level_function_definition_code",
                  "text": "",
                  "uuid": "50189ff0-716a-4bde-873d-ac4d38addd5f",
                  "contents": [],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "268a7cfd-3dd8-47f2-88bd-22546513f58a",
                  "node_type": "top_level_code",
                  "decorator": null,
                  "imports": [],
                  "source": "\"\"\"\n    Recursively extract the full function name from an AST node.\n    \"\"\"\n\nif isinstance(node, ast.Name):\n        return node.id\n    elif isinstance(node, ast.Attribute):\n        value = get_full_function_name(node.value)\n        return f\"{value}.{node.attr}\" if value else node.attr\n\nraise ValueError(\"Node is not a function call, or unhandles case for: \" + str(node))\n\n"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae40e50>",
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae40ed0>",
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae40f90>",
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae41050>",
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae41110>"
              ],
              "expanded_state": "unexpanded",
              "parent_uuid": "032c3360-d193-4aa7-9f2c-0520d2609c6d",
              "node_type": "function_definition",
              "decorator": null,
              "imports": [],
              "source": "def get_full_function_name(node: ast.AST):\n    \"\"\"\n    Recursively extract the full function name from an AST node.\n    \"\"\"\n    if isinstance(node, ast.Name):\n        return node.id\n    elif isinstance(node, ast.Attribute):\n        value = get_full_function_name(node.value)\n        return f\"{value}.{node.attr}\" if value else node.attr\n    raise ValueError(\"Node is not a function call, or unhandles case for: \" + str(node))"
            },
            {
              "type": "PythonEntity",
              "name": "python.py.top_level_module_code",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/python.py.top_level_module_code",
              "text": "",
              "uuid": "85127dc6-1529-4315-a2cb-a92f6cacf067",
              "contents": [],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "032c3360-d193-4aa7-9f2c-0520d2609c6d",
              "node_type": "top_level_code",
              "decorator": null,
              "imports": [],
              "source": "import uuid\n\nimport ast\n\nfrom ast import get_source_segment\n\nfrom py import process\n\nfrom sklearn.metrics import top_k_accuracy_score\n\nfrom tree_sitter import Parser, Node, Language\n\nfrom conversational_codebase.parser import PY_LANGUAGE\n\n# import conversational_codebase.parser._build_library \n\nimport re\n\nfrom .file import File\n\n# at the bottom to prevent circular imports\n\nfrom .entity import Entity, Explainer\n\nfrom conversational_codebase.explanation import LLM, Explanation\n\nimport os\n\nfrom conversational_codebase.entities import entity\n\nimport jedi\n\nfrom jedi.api.classes import Name\n\n# from dotenv import dotenv_values\n\n# config = dotenv_values(\".env\")\n\n# try: \n\n#     TREE_SITTER_BUILD_PATH = config.get(\"TREE_SITTER_BUILD_PATH\")\n\n# except:\n\n#     raise ValueError(\"TREE_SITTER_BUILD_PATH not found in .env file\")\n\n# try:\n\n#     TREE_SITTER_VENDOR_PATH = config.get(\"TREE_SITTER_VENDOR_PATH\")\n\n# except:\n\n#     raise ValueError(\"TREE_SITTER_VENDOR_PATH not found in .env file\")\n\n# Language.build_library(\n\n#     os.path.join(TREE_SITTER_BUILD_PATH, \"my-languages.so\"),\n\n#     [os.path.join(TREE_SITTER_VENDOR_PATH, \"tree-sitter-python\")],\n\n# )\n\n# PY_LANGUAGE = Language(TREE_SITTER_BUILD_PATH, \"python\")\n\n# # Language.build_library(\n\n# #     # Store the library in the `build` directory\n\n# #     \"build/my-languages.so\",\n\n# #     # Include one or more languages\n\n# #     [\n\n# #      \"vendor/tree-sitter-python\",\n\n# #     #  \"vendor/tree-sitter-javascript\",\n\n# #     #  \"vendor/tree-sitter-typescript/typescript\",\n\n# #     #  \"vendor/tree-sitter-typescript/tsx\",\n\n# #     #  \"vendor/tree-sitter-c\",\n\n# #      ],\n\n# # )\n\n# try:\n\n#     TREE_SITTER_BUILD_PATH = config.get(\"TREE_SITTER_BUILD_PATH\")\n\n# except:\n\n#     raise ValueError(\"TREE_SITTER_BUILD_PATH not found in .env file\")\n\n# def get_tree_sitter_definition_node_name(node: Node):\n\n#     # TODO: figure out if byte string is what I want or if we want \".decode('utf8')\"\n\n#     match node.type:\n\n#         case \"class_definition\":\n\n#             return node.children[1].text\n\n#         case \"function_definition\":\n\n#             return node.children[1].text\n\n#         case \"decorated_definition\":\n\n#             return node.children[1].children[1].text\n\n#         case _:\n\n#             raise ValueError(f\"Node type {node.type} not handled\")\n\nimport ast\n\n# # Dependency resolution function\n\n# def resolve_dependencies(call_graph):\n\n#     resolved = set()\n\n#     order = []\n\n#     def resolve(entity):\n\n#         if entity in resolved:\n\n#             return\n\n#         for dep in call_graph[entity]['functions'] + call_graph[entity]['classes']:\n\n#             if dep in call_graph:  # Check if dependency is in the call graph\n\n#                 resolve(dep)\n\n#         order.append(entity)\n\n#         resolved.add(entity)\n\n#     for entity in call_graph:\n\n#         resolve(entity)\n\n#     return order\n\n# def is_internal(function_name):\n\n#     # Implement logic to determine if a function is internal or external\n\n#     # For example, check if the function is defined in your codebase\n\n#     pass\n\n# def is_builtin(function_name):\n\n#     # Implement logic to determine if a function is internal or external\n\n#     # For example, check if the function is defined in your codebase\n\n#     pass\n\n# # Example usage\n\n# call_graph = {\n\n#     '__init__': [], \n\n#     'embed': ['Embedding', 'tuple', 'BaseException', 'lru_cache'], \n\n#     'compare_embeddings': ['BaseException', 'lru_cache'], \n\n#     'main': ['load_dotenv', 'OpenAI']\n\n# }\n\n# start_points = ['main']  # Assuming 'main' is your entry point\n\n# explanation_order, external_dependencies = resolve_dependencies(call_graph, start_points)\n\n# print(\"Explanation Order:\", explanation_order)\n\n# print(\"External Dependencies:\", external_dependencies)\n\n"
            }
          ],
          "explanation": null,
          "preliminary_context": "",
          "metadata": {},
          "dependencies": [],
          "expanded_state": "unexpanded",
          "parent_uuid": "a419ab9a-2bad-475a-9cd6-ca0fe7ae3dde",
          "node_type": "module",
          "decorator": null,
          "imports": [
            "<Node type=module, start_point=(0, 0), end_point=(1027, 88)>",
            "<Node type=module, start_point=(0, 0), end_point=(1027, 88)>",
            "<Node type=module, start_point=(0, 0), end_point=(1027, 88)>",
            "<Node type=module, start_point=(0, 0), end_point=(1027, 88)>",
            "<Node type=module, start_point=(0, 0), end_point=(1027, 88)>",
            "<Node type=module, start_point=(0, 0), end_point=(1027, 88)>",
            "<Node type=module, start_point=(0, 0), end_point=(1027, 88)>",
            "<Node type=module, start_point=(0, 0), end_point=(1027, 88)>",
            "<Node type=module, start_point=(0, 0), end_point=(1027, 88)>",
            "<Node type=module, start_point=(0, 0), end_point=(1027, 88)>",
            "<Node type=module, start_point=(0, 0), end_point=(1027, 88)>",
            "<Node type=module, start_point=(0, 0), end_point=(1027, 88)>",
            "<Node type=module, start_point=(0, 0), end_point=(1027, 88)>",
            "<Node type=module, start_point=(0, 0), end_point=(1027, 88)>",
            "<Node type=module, start_point=(0, 0), end_point=(1027, 88)>",
            "<Node type=module, start_point=(0, 0), end_point=(1027, 88)>"
          ],
          "source": "import uuid\nimport ast\nfrom ast import get_source_segment\nfrom py import process\nfrom sklearn.metrics import top_k_accuracy_score\n\nfrom tree_sitter import Parser, Node, Language\nfrom conversational_codebase.parser import PY_LANGUAGE\n# import conversational_codebase.parser._build_library \nimport re\n\nfrom .file import File\n# at the bottom to prevent circular imports\nfrom .entity import Entity, Explainer\nfrom conversational_codebase.explanation import LLM, Explanation\nimport os\n\nfrom conversational_codebase.entities import entity\nimport jedi\nfrom jedi.api.classes import Name\n\n# from dotenv import dotenv_values\n# config = dotenv_values(\".env\")\n\n# try: \n#     TREE_SITTER_BUILD_PATH = config.get(\"TREE_SITTER_BUILD_PATH\")\n# except:\n#     raise ValueError(\"TREE_SITTER_BUILD_PATH not found in .env file\")\n# try:\n#     TREE_SITTER_VENDOR_PATH = config.get(\"TREE_SITTER_VENDOR_PATH\")\n# except:\n#     raise ValueError(\"TREE_SITTER_VENDOR_PATH not found in .env file\")\n\n# Language.build_library(\n#     os.path.join(TREE_SITTER_BUILD_PATH, \"my-languages.so\"),\n#     [os.path.join(TREE_SITTER_VENDOR_PATH, \"tree-sitter-python\")],\n# )\n\n# PY_LANGUAGE = Language(TREE_SITTER_BUILD_PATH, \"python\")\n\n\n\n# # Language.build_library(\n# #     # Store the library in the `build` directory\n# #     \"build/my-languages.so\",\n# #     # Include one or more languages\n# #     [\n# #      \"vendor/tree-sitter-python\",\n# #     #  \"vendor/tree-sitter-javascript\",\n# #     #  \"vendor/tree-sitter-typescript/typescript\",\n# #     #  \"vendor/tree-sitter-typescript/tsx\",\n# #     #  \"vendor/tree-sitter-c\",\n# #      ],\n# # )\n\n# try:\n#     TREE_SITTER_BUILD_PATH = config.get(\"TREE_SITTER_BUILD_PATH\")\n# except:\n#     raise ValueError(\"TREE_SITTER_BUILD_PATH not found in .env file\")\n\n\n\ndef convert_ast_to_source(node, source):\n    \"\"\"\n    Convert a list of AST nodes back to source code.\n    This function uses ast.get_source_segment to extract source code\n    for each AST node from the original source code string.\n    \"\"\"\n    source_segments = []\n    for node in node:\n        segment = ast.get_source_segment(source, node)\n        if segment:\n            source_segments.append(segment)\n    return '\\n'.join(source_segments)\n\nclass SourceCode(Entity):\n    def __init__(self, name, parent, source_code):\n        super().__init__(f\"{parent.absolute_path}/{name}\", parent)\n        self.source_code = source_code\n    \n    def expand(self):\n        pass\n\ndef get_children_by_grammar_name(node: Node, grammar_name: str) -> list[Node]:\n    matched_children = []\n    for child in node.children:\n        if child.type == grammar_name:\n            matched_children.append(child)\n\n    return matched_children\n\n\n\nclass PythonCallDependency:\n    def __init__(self, node, dependent_entity):\n        self.node = node  # Name of the dependency (e.g., imported module, called function)\n        self.entity = dependent_entity\n        self.reference_start_location = node.start_point # Start location of the reference in the source code\n        self.resolved = False # Status of dependency resolution\n        self.resolved_entity = None  # Where the dependency is resolved (e.g., file path)\n\n    def resolve(self):\n        # \"\"\"\n        # Implement the logic to resolve the dependency within the given codebase.\n        # The codebase parameter could be a structure representing the entire knowledge tree.\n        \n        # This method should update self.resolved and self.resolution_location based on whether\n        # and where the dependency is found within the codebase.\n        # \"\"\"\n        # # Example pseudocode for resolution logic:\n        # # 1. Search the codebase for the reference.\n        # # 2. If found, update self.resolved to True and self.resolution_location to the location found.\n        # # 3. If not found, self.resolved remains False.\n\n        # # This is a simplified representation. The actual implementation would depend on\n        # # the structure of your codebase and how you're tracking entities within it.\n        self.resolved_entity = self._entity_definition_provider()\n        \n\n    # Self try at jedi\n    # def _entity_definition_provider(self):\n    #     # in the current context (the parents contents) look for the name \n    #     # if you dont see it go up a level until you are at the module level.\n    #     # look first in contents when look at imports. \n    #     # if you find it in imports, go to the file that is imported and look for the name there.\n\n    #     # # Possible cases\n    #     # class()\n    #     # function()\n    #     a = Knowledge()\n    #     b = a\n    #     b.root\n    #     b.show()\n\n    #     for content in self.entity.parent.contents:\n    #         if content.name == self.name:\n    #             return content\n        \n\n    def _entity_definition_provider(self):\n        project = jedi.Project(self.entity.get_root().absolute_path) # TODO: Could refactor this out if it causes unneccessary overhead\n        script = jedi.Script(path=self.entity.get_file_path(),\n                        # environment=\"/opt/homebrew/bin/python3\", # TODO: allow user to set environment\n                        project=project)\n        line, col = self.reference_start_location\n        result = script.goto(line+1, col, follow_imports=True, follow_builtin_imports=True) # TODO: Determine if we need to add 1 to line- it seems like tree-sitter is off by 1\n        if not result: result = script.goto(line+1, col) # TODO: Figure out why it cant find external packages with follow_imports=True\n\n        if result:\n            if len(result) > 1: print(f\"Warning: multiple results for {self.name} at {self.reference_start_location}\")\n            result = result[0] # TODO: handle where there are multiple results\n            self.name_resolved = True\n\n            full_name = getattr(result, 'full_name', None)\n            if full_name is not None:\n                return self._find_entity_from_full_name(result)\n            else:\n                raise ValueError(f\"Result {result} does not have a full_name attribute\")\n        \n        return None\n\n    def _find_entity_from_full_name(self, result: Name):\n        # first look for the first part of the name in the current directory (either file or folder)\n        entity_path = result.module_path + result.full_name\n\n        # try to find the entity in the kg\n        def dfs(entity, entity_path):\n            if entity.get_absolute_path() == entity_path:\n                self.resolved = True\n                return entity\n            # Base case: return if entity does not have contents or contents is empty\n            if not hasattr(entity, 'contents') or not entity.contents:\n                print(f\"WARNING: Could not find {entity_path} in {entity.get_absolute_path()}, but the name was found in the codebase\")\n                return\n            for sub_entity in entity.contents:\n                dfs(sub_entity, entity_path)\n\n        return dfs(self.entity.get_root(), entity_path)\n            \n        \n\nclass PythonEntity(Entity):\n    def __init__(self, name, parent, node: Node, node_type):\n        if node_type == \"module\":\n            super().__init__(f\"{parent.absolute_path}/{name}\", parent)\n        else:\n            if isinstance(name, bytes):\n                name = name.decode('utf-8')\n            super().__init__(f\"{parent.absolute_path}.{name}\", parent)\n        self.node = node\n        self.node_type = node_type\n        self.decorator = None\n        self.imports = []\n        self.source = node.text.decode('utf-8')\n    \n    def get_file_parent(self):\n        if self.parent and self.node_type==\"module\":\n            return self.parent\n        elif self.parent:\n            return self.parent.get_file_parent()\n        else:\n            return None\n        \n    def get_file_path(self):\n        if self.node_type == \"module\":\n            return self.absolute_path\n        else:\n            return self.get_file_parent().absolute_path\n        \n    def expand(self):\n\n        match self.node_type:\n            case 'module':\n                self.expand_node_children(self.node)\n\n            # case 'import_statement' | 'import_from_statement':\n            #     self.imports.append(self.node)\n            #     # TODO: DEPENDENCY ACKNOWLEDGEMENT\n            #     # node_dependencies = figure out what other python file we depend on\n            #     # self.dependencies.extend(node_dependencies)\n            #     node_dependencies = self.get_import_node_dependencies(self.node)\n            #     self.dependencies.extend(node_dependencies)\n\n            case 'function_definition':\n                # TODO: DEPENDENCY ACKNOWLEDGEMENT\n                # node_dependencies = get dependencies from the type hints for params and the return type\n                node_dependencies = self.get_parameter_node_dependencies(self.node) \n                # TODO: DOES NOT HANDLE RETURN TYPE\n                if node_dependencies:\n                    self.dependencies.extend(node_dependencies)\n\n                defintion_block_node = self.node.child_by_field_name(\"body\")\n                self.expand_node_children(defintion_block_node)\n\n            case 'class_definition':    \n                # TODO: DEPENDENCY ACKNOWLEDGEMENT\n                # node_dependencies = get the superclass if it exists\n                node_dependencies = self.get_parameter_node_dependencies(self.node)\n                if node_dependencies:\n                    self.dependencies.extend(node_dependencies)\n\n                defintion_block_node = self.node.child_by_field_name(\"body\")\n                self.expand_node_children(defintion_block_node)\n                \n            case 'decorated_definition':\n                if self.node.children[0].type != \"decorator\":\n                    raise ValueError(f\"Expected first child of decorated_definition to be a decorator, but got {self.node.children[0].type}\")\n                \n                self.decorator = self.node.children[0] \n                node_dependencies = self.get_decorator_node_dependencies(self.node)\n\n                definition = self.node.child_by_field_name(\"definition\")\n                match definition.type:\n                    case 'function_definition':\n                        node_dependencies = self.get_parameter_node_dependencies(self.node)\n                        if node_dependencies:\n                            self.dependencies.extend(node_dependencies)\n                    case 'class_definition':\n                        node_dependencies = self.get_parameter_node_dependencies(self.node)\n                        if node_dependencies:\n                            self.dependencies.extend(node_dependencies)\n                        \n                defintion_block_node = definition.child_by_field_name(\"body\")\n                self.expand_node_children(defintion_block_node)\n\n            case _:\n                raise ValueError(f\"Node type {self.node_type} not handled\")\n            \n    def expand_node_children(self, node):\n        top_level_nodes = []\n        for child in node.children:\n            match child.type:\n                case 'import_statement' | 'import_from_statement':\n                    # DEPENDENCY ACKNOWLEDGEMENT\n                    self.imports.append(self.node)\n                    node_dependencies = self.get_import_node_dependencies(self.node)\n                    if node_dependencies:\n                        self.dependencies.extend(node_dependencies)\n                    \n                    # Group in with top level nodes\n                    top_level_nodes.append(child)\n                case 'function_definition' | 'class_definition' | 'decorated_definition':\n                    entity = self.create_and_expand_entity(child)\n                    self.contents.append(entity)\n                case _:\n                    top_level_nodes.append(child)\n\n        if top_level_nodes:\n            top_level_node, top_level_node_name = self.wrap_top_level_code(top_level_nodes)\n            top_level_entity = self.create_and_expand_entity(top_level_node, top_level_node_name)\n            \n            self.dependencies.extend(self.get_top_level_node_dependencies(top_level_nodes))\n            self.contents.append(top_level_entity)\n\n\n    def get_top_level_node_dependencies(self, top_level_nodes):\n        def get_call_nodes(node):\n            call_nodes = []\n            stack = [node]\n            \n            while stack:\n                node = stack.pop() \n\n                if node.type == 'call':\n                    call_nodes.append(node)\n                \n                stack.extend(node.children)\n\n            return call_nodes\n        \n        dependencies = []\n        call_nodes = []\n        for node in top_level_nodes:\n            call_nodes.extend(get_call_nodes(node))\n\n        for call_node in call_nodes:\n            dependencies.append(PythonCallDependency(call_node, self))\n\n        return dependencies\n            \n    # def get_class_definition_node_dependencies(self, node):\n    #     self.get_parameter_node_dependencies(node)\n        \n    #     PythonCallDependency()\n    #     raise NotImplementedError(\"get_class_definition_node_dependencies not implemented\")\n    \n    # def get_function_definition_node_dependencies(self, node):\n    #     # for a function see if there are decorators\n    #     # type hints are going to be dependencies\n    #     # return type is going to be a dependency\n    #     self.get_parameter_node_dependencies(node)\n    #     raise NotImplementedError(\"get_function_definition_node_dependencies not implemented\")\n\n    def get_parameter_node_dependencies(self, function_defintion_node):\n        return \n        node = function_defintion_node.children_by_field_name(\"parameters\")[0] # should only be one # TODO: node was down below that this didn't assign to anything to i just randomly assigned it to \"node\" might not be right \n        typed_parameters = get_children_by_grammar_name(node, \"typed_parameters\")\n        types = []\n        for typed_parameter in typed_parameters:\n            types.extend(get_children_by_grammar_name(typed_parameter, \"type\"))\n\n        return types\n    \n\n        raise NotImplementedError(\"get_parameter_node_dependencies not implemented\")\n    \n    def get_decorator_node_dependencies(self, node):\n        # for a decorator, see if there are any arguments\n        # if there are, process them and add them to the dependencies\n        return\n        raise NotImplementedError(\"get_decorator_node_dependencies not implemented\")\n    \n    def get_import_node_dependencies(self, node):\n        # for an import, see if there are any aliases\n        # if there are, process them and add them to the dependencies\n        return\n        raise NotImplementedError(\"get_import_node_dependencies not implemented\")\n\n    \n    def create_and_expand_entity(self, node, node_name=None):\n        if node_name:\n            # This is a top-level code node and does not need to be expanded\n            entity = PythonEntity(node_name, self, node, \"top_level_code\")\n        else:\n            match node.type:\n                case 'decorated_definition':\n                    node_name = node.child_by_field_name(\"definition\").child_by_field_name(\"name\").text\n                case 'class_definition' | 'function_definition':\n                    node_name = node.child_by_field_name(\"name\").text\n                case _:\n                    raise ValueError(f\"Node type {node.type} not handled\")\n            entity = PythonEntity(node_name, self, node, node.type)\n            entity.expand()\n        return entity\n    \n    def wrap_top_level_code(self, nodes):\n        # Unique function name for the top-level code\n        top_level_node_name = f\"top_level_{self.node_type}_code\"\n\n        # # Generate the new function definition wrapping top-level code\n        wrapped_code = \"\"\n        for node in nodes:\n            wrapped_code += f\"{node.text.decode('utf-8')}\\n\\n\"\n\n        parser = Parser()\n        parser.set_language(PY_LANGUAGE)\n        tree = parser.parse(bytes(wrapped_code, \"utf8\"))\n\n        return tree.root_node, top_level_node_name\n\n        # for child in tree.root_node.children:\n        #     self.contents.append(PythonEntity(top_level_code_name, self, child, \"top_level_code\") )\n\n        \n    # def get_source_code(self):\n    #     source_code = \"\"\n    #     # get decorators\n    #     for decorator in self.node.decorator_list:\n    #         decorator_str = get_source_segment(self.get_file_parent().source_code, decorator)\n    #         source_code += f\"@{decorator_str}\\n\"\n\n    #     parent_source_code = self.get_file_parent().source_code\n    #     source_code += get_source_segment(parent_source_code, self.node)\n\n    #     return source_code\n    \n    # def get_source_code_main(self):\n    #     return ast.unparse(self.node)\n\n    # def expand(self):\n    #     # TODO: add decorators to contents/depedencies\n    #     print(f\"\\tExpanding python entity {self.node.name}\")\n    #     for node in ast.iter_child_nodes(self.node):\n    #         if isinstance(node, (ast.ClassDef, ast.FunctionDef, ast.AsyncFunctionDef)):\n    #             if isinstance(node, ast.ClassDef):\n    #                 # see if there is a parent class\n    #                 if node.bases:\n    #                     base_class = node.bases[0]\n    #                     if isinstance(base_class, ast.Name):\n    #                         self.dependencies.append((base_class.id, base_class))\n    #                     else:\n    #                         raise ValueError(\"Unhanded case for class inheritance for node: \" + str(node)+ \" with base class: \" + str(base_class))\n                        \n    #             # add decorators to dependencies\n    #             for decorator in node.decorator_list:\n    #                 decorator_str = get_source_segment(self.get_file_parent().source_code, decorator)\n    #                 self.dependencies.append((decorator_str, decorator))\n\n    #             print(f\"\\t\\tFound class/function {node.name}\")\n    #             class_entity = PythonEntity(node.name, self, node)\n    #             class_entity.expand()\n    #             self.contents.append(class_entity)\n    #         else:\n    #             dbuilder = DependencyBuilder()\n    #             dbuilder.visit(node)\n    #             dependencies = dbuilder.dependencies\n\n    #             if dependencies != []:\n    #                 print(f\"\\t\\tFound dependencies {dependencies}\")\n    #                 self.dependencies.extend(dependencies)\n    \n    # def get_type(self):\n    #     return self.node_type\n\n    # def expand(self, dependency_graph):\n    #     self.internal_dependencies = []\n    #     self.external_dependencies = []\n\n    #     # Retrieve dependencies from the graph for this entity\n    #     node_deps = dependency_graph.get((self.node.name, self.node), {})\n    #     for internal_dep in node_deps.get('internal_dependancies', []):\n    #         # Resolve to PythonEntity if possible\n    #         self.internal_dependencies.append(self._resolve_dependency(internal_dep, dependency_graph))\n\n    #     for external_dep in node_deps.get('external_dependancies', []):\n    #         self.external_dependencies.append(external_dep)  # Just store the external dependency as-is\n\n    # def _resolve_dependency(self, dep, dependency_graph):\n    #     # dep is a tuple (name, ast_node)\n    #     dep_name, dep_node = dep\n\n    #     # Check if this dependency is a key in the dependency graph\n    #     if dep in dependency_graph:\n    #         # Create a PythonEntity for this dependency\n    #         return PythonEntity(dep_name, self.parent, dep_node)\n    #     return dep \n    \n                    \n\n\n# class PythonClass(PythonEntity):\n#     def __init__(self, name, parent, node):\n#         super().__init__(f\"{parent.absolute_path}/{name}\", parent, node)\n\n    # def expand(self):\n    #     self.expanded_state = \"expanding\"\n    #     self.contents = []\n    #     for node in self.node.body:\n    #         if isinstance(node, ast.ClassDef):\n    #             self.contents.append(PythonClass(node.name, self, node.body))\n    #         elif isinstance(node, ast.FunctionDef):\n    #             self.contents.append(PythonFunction(node.name, self, node.body))\n    #     self.expanded_state = \"expanded\"\n\n#     def expand(self):\n#         self.expanded_state = \"expanding\"\n#         self.contents = []\n#         for node in ast.iter_child_nodes(self.node):\n#             if isinstance(node, ast.FunctionDef, ast.AsyncFunctionDef):\n#                 method_entity = PythonFunction(node.name, self, node)\n#                 method_entity.expand()\n#                 self.contents.append(method_entity)\n#             # Handle other possible internal structures like nested classes if needed\n\n#         self.expanded_state = \"expanded\"\n    \n#     def get_source_code(self):\n#         return ast.unparse(self.node)\n#         return ast.get_source_segment(self.get_file_parent.source_code, self.node)\n\n\n# class PythonFunction(PythonEntity):\n#     def __init__(self, name, parent, node):\n#         super().__init__(f\"{parent.absolute_path}/{name}\", parent, node)\n    \n#     def expand(self):\n#         self.expanded_state = \"expanding\"\n#         self.contents = []\n#         for node in self.node.body:\n#             if isinstance(node, ast.FunctionDef):\n#                 self.contents.append(PythonFunction(node.name, self, node.body))\n#         self.expanded_state = \"expanded\"\n\n# class PythonMainBlock(PythonEntity):\n#     def __init__(self, parent, nodes):\n#         super().__init__(f\"{parent.absolute_path}/main\", parent, nodes)\n    \n#     def expand(self):\n#         self.expanded_state = \"expanding\"\n#         self.contents = []\n#         for node in self.node:\n#             if isinstance(node, ast.FunctionDef):\n#                 self.contents.append(PythonFunction(node.name, self, node.body))\n#             elif isinstance(node, ast.ClassDef):\n#                 self.contents.append(PythonClass(node.name, self, node.body))\n#         self.expanded_state = \"expanded\"\n\n# class PythonFile(File):\n#     def __init__(self, absolute_path, parent=None):\n#         super().__init__(absolute_path, parent)\n#         with open(self.absolute_path, 'r') as file:\n#             self.source_code = file.read()\n#             self.modified_source_code = None\n#             self.imports = []\n#             self.name_to_entity = {}  # Map function names to their entities\n#             self.dependency_graph = None\n#             self.pseudo_main_contents = []\n\n\n#     def get_source_code(self):\n#         return self.source_code\n    \n\n#     def expand(self):\n#         self.expanded_state = \"expanding\"\n#         parser = Parser()\n#         parser.set_language(PY_LANGUAGE)\n\n#         with open(self.absolute_path, 'r') as file:\n#             source_code = file.read()\n\n#         tree = parser.parse(bytes(source_code, \"utf8\"))\n#         self._process_node(tree.root_node, parent=self, is_root=True)\n\n#         # # After processing, if there's top-level code, wrap it and modify the source code\n#         # if self.pseudo_main_contents:\n#         #     self._wrap_top_level_code()\n\n#     def _process_node(self, node, parent, is_root=False):\n#         # if node.type in ['import_statement', 'import_from_statement']:\n#         #     self.imports.append(node.text.decode('utf8'))  # Assuming source_code is utf-8 encoded\n\n#         if node.type in ['class_definition', 'function_definition', 'decorated_definition']:\n#             # Initialize PythonEntity with the node's text as a simple representation\n#             # entity_text = node.text.decode('utf8')  # Assuming source_code is utf-8 encoded\n        \n#             entity = None\n#             match node.type:\n#                 case 'import_statement':\n#                     self.imports = node\n#                 case 'class_definition':\n#                     # class has a \"identifier\" possibly an \"argument_list\" and a \"block\"\n#                     # entity = PythonEntity(get_tree_sitter_definition_node_name(node), parent, node, \"class\")\n#                     self.contents.append(\n#                         self.expand_class(node)\n#                     )\n#                     entity = PythonEntity(get_tree_sitter_definition_node_name(node), parent, node, \"class\")\n#                 case 'function_definition':\n#                     entity = PythonEntity(get_tree_sitter_definition_node_name(node), parent, node, \"function\")\n#                 case 'decorated_definition':\n#                     match node.children[1].type:\n#                         case \"class_definition\":\n#                             entity = PythonEntity(get_tree_sitter_definition_node_name(node), parent, node, \"decorated_class\")\n#                         case \"function_definition\":\n#                             entity = PythonEntity(get_tree_sitter_definition_node_name(node), parent, node, \"decorated_function\")\n#                         case _:\n#                             raise ValueError(f\"Node type {node.children[1].type} not handled for decorated_definition\")\n#                 case _:\n#                     raise ValueError(f\"Node type {node.type} not handled\")\n\n#             # Choose where to add the new entity: to the file or to a parent entity\n#             if parent:\n#                 parent.contents.append(entity)\n#             else:\n#                 self.contents.append(entity)\n            \n#             # Recursively process children, passing the current entity as the new parent\n#             for child in node.children:\n#                 self._process_node(child, parent=entity)\n\n#         elif is_root:\n#             # For the root node, process all children, but treat non-import/class/function nodes as pseudo-main\n#             for child in node.children:\n#                 if child.type not in ['class_definition', 'function_definition', 'decorated_definition']:\n#                     # These nodes are part of the top-level code\n#                     self.pseudo_main_contents.append(child.text.decode('utf8'))\n#                 else:\n#                     self._process_node(child, parent=parent)\n\n#     def expand_class(self, node):\n#         entity = PythonEntity(get_tree_sitter_definition_node_name(node), self, node, \"class\")\n\n#     def _wrap_top_level_code(self):\n#         # Unique function name for the top-level code\n#         pseudo_main_name = \"top_level_module_code_\" + str(uuid.uuid4()).replace(\"-\", \"_\")\n\n#         # Generate the new function definition wrapping top-level code\n#         wrapped_code = f\"def {pseudo_main_name}():\\n\"\n#         for line in self.pseudo_main_contents:\n#             wrapped_code += f\"    {line}\\n\"\n        \n#         # # Add a call to the newly defined function at the end\n#         # wrapped_code += f\"\\nif __name__ == '__main__':\\n    {pseudo_main_name}()\\n\"\n\n#         parser = Parser()\n#         parser.set_language(PY_LANGUAGE)\n#         tree = parser.parse(bytes(wrapped_code, \"utf8\"))\n\n#         for child in tree.root_node.children:\n#             self.contents.append(PythonEntity(pseudo_main_name, self, child, \"top_level_code\") )\n\n\n\n\n\n\n    # def expand(self):\n    #     self.expanded_state = \"expanding\"\n    #     print(\"Expanding python file\")\n    #     self.contents = []\n\n        # with open(self.absolute_path, 'r') as file:\n        #     source = file.read()\n        \n        # modified_tree, self.entry_point_name = self._extract_main(source)\n        # self.modified_source_code = ast.unparse(modified_tree)\n        \n    #     for node in ast.iter_child_nodes(modified_tree): #ast.walk(tree):\n    #         class_entity = PythonEntity(node.name, self, node)\n    #         class_entity.expand()\n    #         self.contents.append(class_entity)\n    #         if isinstance(node, (ast.ClassDef, ast.FunctionDef, ast.AsyncFunctionDef)):\n    #             print(f\"Found class/function {node.name}\")\n    #             self.name_to_entity[node.name] = class_entity\n    #         elif isinstance(node, (ast.Call, ast.Attribute)):\n    #             function_name = get_full_function_name(node)\n    #             print(f\"Found call {function_name}\")\n    #             self.dependencies.append((function_name, node))\n\n        # self.dependency_graph = self._build_dependency_graph(modified_tree)\n\n        # # Create PythonEntity instances for each node in the dependency graph\n        # for node, deps in self.dependency_graph.items():\n        #     name = node[0] if isinstance(node, tuple) else node.name\n        #     python_entity = PythonEntity(name, self, node[1] if isinstance(node, tuple) else node)\n        #     python_entity.expand(self.dependency_graph)\n        #     self.contents.append(python_entity)\n\n        \n        # self.expanded_state = \"expanded\"\n\n    def _build_dependency_graph(self, tree):\n        # print(self.absolute_path)\n        # print(ast.unparse(tree))\n        # Add parent references to each node\n        for node in ast.walk(tree):\n            for child in ast.iter_child_nodes(node):\n                child.parent = node\n\n        builder = DependencyGraphBuilder()\n        builder.visit(tree)\n        return builder.graph\n\n    def _extract_main(self, source: str) -> ast.Module:\n            \"\"\"\n            Extracts the main block from the given source code.\n\n            Args:\n                source (str): The source code to extract the main block from.\n\n            Returns:\n                ast.Module: The modified abstract syntax tree with the main block extracted.\n            \"\"\"\n            tree = ast.parse(source)\n\n            main_block_contents = []\n\n            file_nodes = []\n\n            for node in ast.iter_child_nodes(tree):\n                if isinstance(node, (ast.ClassDef, ast.FunctionDef, ast.AsyncFunctionDef)):\n                    file_nodes.append(node)\n                elif isinstance(node, (ast.Import, ast.ImportFrom)):\n                    self.imports.append(node)\n                else:\n                    main_block_contents.append(node)\n\n            entry_point_name = f'main-{uuid.uuid4()}' # TODO: Think if this is the best inteface? It's possible this is None for a file \n\n            if main_block_contents:\n                # Create a PythonMainBlock entity if there are top-level nodes\n                main_node = ast.FunctionDef(\n                    name=entry_point_name,\n                    args=ast.arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]),\n                    body=main_block_contents,\n                    decorator_list=[],\n                    returns=None,\n                    lineno=0,\n                    col_offset=0\n                )\n                file_nodes.append(main_node)\n\n            tree.body = file_nodes\n\n            return tree, entry_point_name\n\n\n    def explain(self):\n        if self.expanded_state != \"expanded\":\n            raise ValueError(\"Python file must be expanded before it can be explained\")\n\n\n    #     self.resolve_dependencies(self.entry_point_name\n    #     # use self.call_graph to get the order of functions to explain\n    #     # use self.name_to_entity to get the entity for each function\n\n    # def _explain_dependencies(self, call_graph, start_points):\n    #     explanation_order = []\n    #     visited = set()\n    #     external_dependencies = set()\n\n    #     def dfs(function_name):\n    #         if function_name in visited:\n    #             return\n    #         visited.add(function_name)\n\n    #         for dependency in self.call_graph.get(function_name, []):\n    #             if is_internal(dependency):  # Implement this function based on your project's context\n    #                 dfs(dependency)\n    #             else:\n    #                 external_dependencies.add(dependency)\n\n    #         explanation_order.append(function_name)\n\n    #     for start_point in start_points:\n    #         dfs(start_point)\n\n    #     return explanation_order, external_dependencies\n        \n\n        \n\n# def get_tree_sitter_definition_node_name(node: Node):\n#     # TODO: figure out if byte string is what I want or if we want \".decode('utf8')\"\n#     match node.type:\n#         case \"class_definition\":\n#             return node.children[1].text\n#         case \"function_definition\":\n#             return node.children[1].text\n#         case \"decorated_definition\":\n#             return node.children[1].children[1].text\n#         case _:\n#             raise ValueError(f\"Node type {node.type} not handled\")\n        \n\n\n\nclass PythonExplainer(Explainer):\n    def __init__(self, entity: Entity):\n        super().__init__(entity)\n\n    def explain(self) -> Explanation:\n        # Create a prompt for the AI model\n        prompt = f\"Write a Python docstring for the following {self.entity.get_type().lower()}:\\n\\n\"\n        prompt += self.entity.get_source_code() + \"\\n\"\n\n        # Generate the explanation\n        explanation_text = LLM(prompt, \"gpt-3.5-turbo-1106\")\n\n        # Format the explanation as a Python docstring\n        formatted_explanation = '\"\"\"' + explanation_text + '\"\"\"'\n\n        return Explanation(formatted_explanation)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport ast\n\nclass DependencyGraphBuilder(ast.NodeVisitor):\n    def __init__(self):\n        self.graph = {}\n        self.current_function = None\n        self.current_class = None\n        self.class_map = {}\n        self.function_map = {}\n\n    def _get_node_name_pair(self, node):\n        return (node.name, node)\n\n    def visit_ClassDef(self, node):\n        self.class_map[node.name] = node\n        self.current_class = node\n        class_info = {'internal_dependancies': [], 'external_dependancies': []}\n\n        for base in node.bases:\n            # Resolve base class if it's in class_map\n            if isinstance(base, ast.Name) and base.id in self.class_map:\n                class_info['internal_dependancies'].append(self._get_node_name_pair(self.class_map[base.id]))\n            else:\n                class_info['internal_dependancies'].append(base)\n\n        self.graph[self._get_node_name_pair(node)] = class_info\n        self.generic_visit(node)\n        self.current_class = None\n\n    def visit_FunctionDef(self, node):\n        self.function_map[node.name] = node\n        self.current_function = node\n        func_info = {'internal_dependancies': [], 'external_dependancies': []}\n\n        # Add the function to the graph immediately\n        if self.current_class:\n            self.graph[self._get_node_name_pair(self.current_class)]['internal_dependancies'].append(self._get_node_name_pair(node))\n            # If the function is part of a class, we add it to the class's functions\n        else:\n            self.graph[self._get_node_name_pair(node)] = func_info  # Add standalone function\n\n        self.generic_visit(node)\n        self.current_function = None\n\n    def visit_Call(self, node):\n        called_func_name = self._get_full_function_name(node.func)\n\n        if called_func_name in self.function_map:\n            # Internal dependency\n            target = self.function_map[called_func_name]\n            dep_key = 'internal_dependancies'\n        else:\n            # External dependency\n            target = (called_func_name, node.func) if called_func_name else node.func\n            dep_key = 'external_dependancies'\n\n        current_scope = self.current_function or self.current_class\n        if current_scope:\n            scope_key = self._get_node_name_pair(current_scope)\n            if scope_key not in self.graph:\n                self.graph[scope_key] = {'internal_dependancies': [], 'external_dependancies': []}\n            self.graph[scope_key][dep_key].append(target)\n\n        self.generic_visit(node)\n        \n    def first_pass(self, node):\n        \"\"\"First pass to build function and class maps.\"\"\"\n        if isinstance(node, ast.FunctionDef):\n            self.function_map[node.name] = node\n        elif isinstance(node, ast.ClassDef):\n            self.class_map[node.name] = node\n        for child in ast.iter_child_nodes(node):\n            self.first_pass(child)\n\n    def build(self, tree):\n        \"\"\"Build the dependency graph in two passes.\"\"\"\n        # First pass: build function and class maps\n        self.first_pass(tree)\n\n        # Second pass: build the actual dependency graph\n        self.visit(tree)\n\n    def _get_called_function_name(self, node):\n        \"\"\"\n        Extract the function name from a call node.\n        \"\"\"\n        if isinstance(node, ast.Name):\n            return node.id\n        elif isinstance(node, ast.Attribute):\n            # If it's an attribute, return the attribute name\n            # (e.g., 'method_name' for 'obj.method_name()')\n            return node.attr\n        # Handle more cases if necessary\n        return None\n\n    def _get_full_function_name(self, node):\n        \"\"\"\n        Recursively extract the full function name from an AST node.\n        \"\"\"\n        if isinstance(node, ast.Name):\n            return node.id\n        elif isinstance(node, ast.Attribute):\n            value = self._get_full_function_name(node.value)\n            return f\"{value}.{node.attr}\" if value else node.attr\n        return None\n    \n\ndef build_dependency_graph(source_code):\n    tree = ast.parse(source_code)\n\n    # Add parent references to each node\n    for node in ast.walk(tree):\n        for child in ast.iter_child_nodes(node):\n            child.parent = node\n\n    builder = DependencyGraphBuilder()\n    builder.build(tree)\n    return builder.graph\n\n\n# # Dependency resolution function\n# def resolve_dependencies(call_graph):\n#     resolved = set()\n#     order = []\n\n#     def resolve(entity):\n#         if entity in resolved:\n#             return\n#         for dep in call_graph[entity]['functions'] + call_graph[entity]['classes']:\n#             if dep in call_graph:  # Check if dependency is in the call graph\n#                 resolve(dep)\n#         order.append(entity)\n#         resolved.add(entity)\n\n#     for entity in call_graph:\n#         resolve(entity)\n\n#     return order\n\n# def is_internal(function_name):\n#     # Implement logic to determine if a function is internal or external\n#     # For example, check if the function is defined in your codebase\n#     pass\n\n# def is_builtin(function_name):\n#     # Implement logic to determine if a function is internal or external\n#     # For example, check if the function is defined in your codebase\n#     pass\n\nclass DependencyBuilder(ast.NodeVisitor):\n    def __init__(self):\n        self.dependencies = []\n\n    def visit_Call(self, node):\n        called_func_name = self._get_full_function_name(node.func)\n        target = (called_func_name, node.func) #if called_func_name else node.func\n        self.dependencies.append(target)\n        self.generic_visit(node)\n        \n    def _get_called_function_name(self, node):\n        \"\"\"\n        Extract the function name from a call node.\n        \"\"\"\n        if isinstance(node, ast.Name):\n            return node.id\n        elif isinstance(node, ast.Attribute):\n            # If it's an attribute, return the attribute name\n            # (e.g., 'method_name' for 'obj.method_name()')\n            return node.attr\n        # Handle more cases if necessary\n        return None\n\n    def _get_full_function_name(self, node):\n        \"\"\"\n        Recursively extract the full function name from an AST node.\n        \"\"\"\n        if isinstance(node, ast.Name):\n            return node.id\n        elif isinstance(node, ast.Attribute):\n            value = self._get_full_function_name(node.value)\n            return f\"{value}.{node.attr}\" if value else node.attr\n        return None\n    \n\n# # Example usage\n# call_graph = {\n#     '__init__': [], \n#     'embed': ['Embedding', 'tuple', 'BaseException', 'lru_cache'], \n#     'compare_embeddings': ['BaseException', 'lru_cache'], \n#     'main': ['load_dotenv', 'OpenAI']\n# }\n# start_points = ['main']  # Assuming 'main' is your entry point\n\n# explanation_order, external_dependencies = resolve_dependencies(call_graph, start_points)\n# print(\"Explanation Order:\", explanation_order)\n# print(\"External Dependencies:\", external_dependencies)\n\n\ndef get_called_function_name(node: ast.AST):\n        \"\"\"\n        Extract the function name from a call node.\n        \"\"\"\n        if isinstance(node, ast.Name):\n            return node.id\n        elif isinstance(node, ast.Attribute):\n            # If it's an attribute, return the attribute name\n            # (e.g., 'method_name' for 'obj.method_name()')\n            return node.attr\n        # Handle more cases if necessary\n        return None\n\ndef get_full_function_name(node: ast.AST):\n    \"\"\"\n    Recursively extract the full function name from an AST node.\n    \"\"\"\n    if isinstance(node, ast.Name):\n        return node.id\n    elif isinstance(node, ast.Attribute):\n        value = get_full_function_name(node.value)\n        return f\"{value}.{node.attr}\" if value else node.attr\n    raise ValueError(\"Node is not a function call, or unhandles case for: \" + str(node))"
        },
        {
          "type": "PythonEntity",
          "name": "entity.py",
          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/entity.py",
          "text": "",
          "uuid": "a835c436-f4c9-4cbd-897c-355bc5f9a8c4",
          "contents": [
            {
              "type": "PythonEntity",
              "name": "entity.py.Entity",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/entity.py.Entity",
              "text": "",
              "uuid": "e979ce63-6f69-4d30-b18b-5f482a43fc38",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "entity.py.Entity.__init__",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/entity.py.Entity.__init__",
                  "text": "",
                  "uuid": "5f90f767-1178-4778-b65c-c6ab45476ec9",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "entity.py.Entity.__init__.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/entity.py.Entity.__init__.top_level_function_definition_code",
                      "text": "",
                      "uuid": "103a71bc-ce27-4ff9-80be-86f578e499ae",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "5f90f767-1178-4778-b65c-c6ab45476ec9",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "self.name = os.path.basename(absolute_path)\n\nself.absolute_path = absolute_path\n\nself.parent = parent\n\nself.text = \"\"\n\nself.uuid = uuid.uuid4()\n\n# self.is_expanded = False\n\nself.contents = []\n\nself.explanation: Explanation = None\n\nself.preliminary_context = \"\"\n\nself.metadata = {}\n\nself.dependencies = []\n\nself.expanded_state = \"unexpanded\"\n\n# self.explained_state = \"unexplained\"\n\n# self.explained_state_lock = threading.Lock()\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae49a90>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae49b10>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "e979ce63-6f69-4d30-b18b-5f482a43fc38",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def __init__(self, absolute_path, parent):\n        self.name = os.path.basename(absolute_path)\n        self.absolute_path = absolute_path\n        self.parent = parent\n        self.text = \"\"\n        self.uuid = uuid.uuid4()\n        # self.is_expanded = False\n        self.contents = []\n        self.explanation: Explanation = None\n        self.preliminary_context = \"\"\n        self.metadata = {}\n        self.dependencies = []\n        self.expanded_state = \"unexpanded\"\n\n        # self.explained_state = \"unexplained\"\n        # self.explained_state_lock = threading.Lock()"
                },
                {
                  "type": "PythonEntity",
                  "name": "entity.py.Entity.expand",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/entity.py.Entity.expand",
                  "text": "",
                  "uuid": "0616d167-ca17-401f-bbdc-2dc2dd6a7064",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "entity.py.Entity.expand.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/entity.py.Entity.expand.top_level_function_definition_code",
                      "text": "",
                      "uuid": "782a8457-607b-4edb-adfe-1d3d45be0fba",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "0616d167-ca17-401f-bbdc-2dc2dd6a7064",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "raise NotImplementedError(\"Expand method should be implemented in subclasses\")\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae468d0>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "e979ce63-6f69-4d30-b18b-5f482a43fc38",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def expand(self):\n        raise NotImplementedError(\"Expand method should be implemented in subclasses\")"
                },
                {
                  "type": "PythonEntity",
                  "name": "entity.py.Entity.expand_concurrent",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/entity.py.Entity.expand_concurrent",
                  "text": "",
                  "uuid": "b4eb1966-d3c5-41ce-89f1-d08044b55a2c",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "entity.py.Entity.expand_concurrent.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/entity.py.Entity.expand_concurrent.top_level_function_definition_code",
                      "text": "",
                      "uuid": "0572ccb3-e676-4015-843b-502cdca77192",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "b4eb1966-d3c5-41ce-89f1-d08044b55a2c",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "raise NotImplementedError(\"Expand method should be implemented in subclasses\")\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae46fd0>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "e979ce63-6f69-4d30-b18b-5f482a43fc38",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def expand_concurrent(self, executor):\n        raise NotImplementedError(\"Expand method should be implemented in subclasses\")"
                },
                {
                  "type": "PythonEntity",
                  "name": "entity.py.Entity.explain",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/entity.py.Entity.explain",
                  "text": "",
                  "uuid": "84a569cb-2830-47f8-9819-cc639dabb2cc",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "entity.py.Entity.explain.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/entity.py.Entity.explain.top_level_function_definition_code",
                      "text": "",
                      "uuid": "a08ab6c2-1e70-4721-9b13-0e0e8d14ea9d",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "84a569cb-2830-47f8-9819-cc639dabb2cc",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "raise NotImplementedError(\"Explain method should be implemented in subclasses\")\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae473d0>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "e979ce63-6f69-4d30-b18b-5f482a43fc38",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def explain(self):\n        raise NotImplementedError(\"Explain method should be implemented in subclasses\")"
                },
                {
                  "type": "PythonEntity",
                  "name": "entity.py.Entity.explain_concurrent",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/entity.py.Entity.explain_concurrent",
                  "text": "",
                  "uuid": "ba1ac880-968e-4f68-b1a9-17804948cf55",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "entity.py.Entity.explain_concurrent.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/entity.py.Entity.explain_concurrent.top_level_function_definition_code",
                      "text": "",
                      "uuid": "b2a7242d-c5e6-4346-9c2d-c7413512ec3f",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "ba1ac880-968e-4f68-b1a9-17804948cf55",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "raise NotImplementedError(\"Explain method should be implemented in subclasses\")\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae47d50>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "e979ce63-6f69-4d30-b18b-5f482a43fc38",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def explain_concurrent(self, executor):\n        raise NotImplementedError(\"Explain method should be implemented in subclasses\")"
                },
                {
                  "type": "PythonEntity",
                  "name": "entity.py.Entity.get_root",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/entity.py.Entity.get_root",
                  "text": "",
                  "uuid": "f8c1cf62-2da9-429a-9331-3bdd79f9e6dd",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "entity.py.Entity.get_root.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/entity.py.Entity.get_root.top_level_function_definition_code",
                      "text": "",
                      "uuid": "807563bf-41e5-4271-a65b-d5d8f2842dd8",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "f8c1cf62-2da9-429a-9331-3bdd79f9e6dd",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "if self.parent is None:\n            return self\n        else:\n            return self.parent.get_root()\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae49d50>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "e979ce63-6f69-4d30-b18b-5f482a43fc38",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def get_root(self): \n        if self.parent is None:\n            return self\n        else:\n            return self.parent.get_root()"
                },
                {
                  "type": "PythonEntity",
                  "name": "entity.py.Entity.get_relative_path",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/entity.py.Entity.get_relative_path",
                  "text": "",
                  "uuid": "8e0b7b01-5a8b-4cd5-93b5-b8a38a86356b",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "entity.py.Entity.get_relative_path.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/entity.py.Entity.get_relative_path.top_level_function_definition_code",
                      "text": "",
                      "uuid": "ccd58448-f95e-4034-83b8-0d49b0fa901b",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "8e0b7b01-5a8b-4cd5-93b5-b8a38a86356b",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "root = self.get_root()\n\nrelative_path = os.path.relpath(self.absolute_path, start=root.absolute_path)\n\n# Prepend the root directory name\n\nrelative_path_with_root = os.path.join(root.directory_name, relative_path)\n\nreturn relative_path_with_root\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae4b850>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae4b8d0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae4b990>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "e979ce63-6f69-4d30-b18b-5f482a43fc38",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def get_relative_path(self):\n        root = self.get_root()\n        relative_path = os.path.relpath(self.absolute_path, start=root.absolute_path)\n\n        # Prepend the root directory name\n        relative_path_with_root = os.path.join(root.directory_name, relative_path)\n        \n        return relative_path_with_root"
                },
                {
                  "type": "PythonEntity",
                  "name": "entity.py.Entity.get_absolute_path",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/entity.py.Entity.get_absolute_path",
                  "text": "",
                  "uuid": "748c2ffc-3fb6-44df-bf0c-1955a52416c7",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "entity.py.Entity.get_absolute_path.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/entity.py.Entity.get_absolute_path.top_level_function_definition_code",
                      "text": "",
                      "uuid": "f1fb0791-e060-47fb-9906-f8d212b153f4",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "748c2ffc-3fb6-44df-bf0c-1955a52416c7",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "return self.absolute_path\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "e979ce63-6f69-4d30-b18b-5f482a43fc38",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def get_absolute_path(self):\n        return self.absolute_path"
                },
                {
                  "type": "PythonEntity",
                  "name": "entity.py.Entity.get_type",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/entity.py.Entity.get_type",
                  "text": "",
                  "uuid": "32855204-a84e-4154-99de-5e4fe879074e",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "entity.py.Entity.get_type.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/entity.py.Entity.get_type.top_level_function_definition_code",
                      "text": "",
                      "uuid": "d3fc0474-8ba3-4d13-ab63-29801c2cee32",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "32855204-a84e-4154-99de-5e4fe879074e",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "return self.__class__.__name__\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "e979ce63-6f69-4d30-b18b-5f482a43fc38",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def get_type(self):\n        return self.__class__.__name__"
                },
                {
                  "type": "PythonEntity",
                  "name": "entity.py.Entity.top_level_class_definition_code",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/entity.py.Entity.top_level_class_definition_code",
                  "text": "",
                  "uuid": "8a0c19aa-47ab-4074-83f8-d088724f5e75",
                  "contents": [],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "e979ce63-6f69-4d30-b18b-5f482a43fc38",
                  "node_type": "top_level_code",
                  "decorator": null,
                  "imports": [],
                  "source": "# def _explain_content_concurrent(self, executor):\n\n#     entities_to_explain = self.contents\n\n#     entities_to_explain.extend(self.dependencies)\n\n#     futures_to_entities = {}\n\n#     while entities_to_explain:\n\n#         for entity in entities_to_explain:\n\n#             if entity.explained_state == 'explained':\n\n#                 entities_to_explain.remove(entity)\n\n#                 continue\n\n#             if entity.explained_state_lock.acquire(blocking=False):\n\n#                 try:\n\n#                     if entity.explained_state == 'unexplained':\n\n#                         # Submit the explain task to the executor\n\n#                         future = executor.submit(entity.explain)\n\n#                         futures_to_entities[future] = entity\n\n#                 finally:\n\n#                     entity.explained_state_lock.release()\n\n#         # Wait for the completion of at least one of the submitted tasks\n\n#         for future in as_completed(futures_to_entities):\n\n#             entity = futures_to_entities[future]\n\n#             entities_to_explain.remove(entity)\n\n#             entity.explained_state = 'explained'\n\n"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "a835c436-f4c9-4cbd-897c-355bc5f9a8c4",
              "node_type": "class_definition",
              "decorator": null,
              "imports": [],
              "source": "class Entity:\n    def __init__(self, absolute_path, parent):\n        self.name = os.path.basename(absolute_path)\n        self.absolute_path = absolute_path\n        self.parent = parent\n        self.text = \"\"\n        self.uuid = uuid.uuid4()\n        # self.is_expanded = False\n        self.contents = []\n        self.explanation: Explanation = None\n        self.preliminary_context = \"\"\n        self.metadata = {}\n        self.dependencies = []\n        self.expanded_state = \"unexpanded\"\n\n        # self.explained_state = \"unexplained\"\n        # self.explained_state_lock = threading.Lock()\n\n    def expand(self):\n        raise NotImplementedError(\"Expand method should be implemented in subclasses\")\n    \n    def expand_concurrent(self, executor):\n        raise NotImplementedError(\"Expand method should be implemented in subclasses\")\n\n    def explain(self):\n        raise NotImplementedError(\"Explain method should be implemented in subclasses\")\n    \n    def explain_concurrent(self, executor):\n        raise NotImplementedError(\"Explain method should be implemented in subclasses\")\n    \n    # def _explain_content_concurrent(self, executor):\n    #     entities_to_explain = self.contents\n    #     entities_to_explain.extend(self.dependencies)\n    #     futures_to_entities = {}\n\n    #     while entities_to_explain:\n    #         for entity in entities_to_explain:\n    #             if entity.explained_state == 'explained':\n    #                 entities_to_explain.remove(entity)\n    #                 continue\n\n    #             if entity.explained_state_lock.acquire(blocking=False):\n    #                 try:\n    #                     if entity.explained_state == 'unexplained':\n    #                         # Submit the explain task to the executor\n    #                         future = executor.submit(entity.explain)\n    #                         futures_to_entities[future] = entity\n    #                 finally:\n    #                     entity.explained_state_lock.release()\n\n    #         # Wait for the completion of at least one of the submitted tasks\n    #         for future in as_completed(futures_to_entities):\n    #             entity = futures_to_entities[future]\n    #             entities_to_explain.remove(entity)\n    #             entity.explained_state = 'explained'\n        \n    def get_root(self): \n        if self.parent is None:\n            return self\n        else:\n            return self.parent.get_root()\n    \n    def get_relative_path(self):\n        root = self.get_root()\n        relative_path = os.path.relpath(self.absolute_path, start=root.absolute_path)\n\n        # Prepend the root directory name\n        relative_path_with_root = os.path.join(root.directory_name, relative_path)\n        \n        return relative_path_with_root\n    \n    def get_absolute_path(self):\n        return self.absolute_path\n    \n    def get_type(self):\n        return self.__class__.__name__"
            },
            {
              "type": "PythonEntity",
              "name": "entity.py.Explainer",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/entity.py.Explainer",
              "text": "",
              "uuid": "6836eed9-1aec-4e8b-a100-c9471c9a5e7f",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "entity.py.Explainer.__init__",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/entity.py.Explainer.__init__",
                  "text": "",
                  "uuid": "679611c1-4392-4df4-8e35-9e6a14f285ec",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "entity.py.Explainer.__init__.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/entity.py.Explainer.__init__.top_level_function_definition_code",
                      "text": "",
                      "uuid": "b62470b5-6325-4293-af8b-edc0947853d9",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "679611c1-4392-4df4-8e35-9e6a14f285ec",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "self.entity = entity\n\nself.prelimary_context = entity.get_root().preliminary_context\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae50810>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "6836eed9-1aec-4e8b-a100-c9471c9a5e7f",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def __init__(self, entity: Entity):\n        self.entity = entity\n        self.prelimary_context = entity.get_root().preliminary_context"
                },
                {
                  "type": "PythonEntity",
                  "name": "entity.py.Explainer.explain",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/entity.py.Explainer.explain",
                  "text": "",
                  "uuid": "7287bcb3-b38e-473a-9b13-cb44f2cda389",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "entity.py.Explainer.explain.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/entity.py.Explainer.explain.top_level_function_definition_code",
                      "text": "",
                      "uuid": "8678a7c5-30aa-480f-81ab-7f2f11313e02",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "7287bcb3-b38e-473a-9b13-cb44f2cda389",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "raise NotImplementedError\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "6836eed9-1aec-4e8b-a100-c9471c9a5e7f",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def explain(self):\n        raise NotImplementedError"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "a835c436-f4c9-4cbd-897c-355bc5f9a8c4",
              "node_type": "class_definition",
              "decorator": null,
              "imports": [],
              "source": "class Explainer:\n    def __init__(self, entity: Entity):\n        self.entity = entity\n        self.prelimary_context = entity.get_root().preliminary_context\n\n    def explain(self):\n        raise NotImplementedError"
            },
            {
              "type": "PythonEntity",
              "name": "entity.py.GeneralExplainer",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/entity.py.GeneralExplainer",
              "text": "",
              "uuid": "93242b0b-0e71-40bc-960a-82956bd68b67",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "entity.py.GeneralExplainer.explain",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/entity.py.GeneralExplainer.explain",
                  "text": "",
                  "uuid": "81f0d919-146f-465e-87a7-3ef21734e4fe",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "entity.py.GeneralExplainer.explain.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/entity.py.GeneralExplainer.explain.top_level_function_definition_code",
                      "text": "",
                      "uuid": "3342039c-0fef-44b4-92a2-01f659d1a8ff",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "81f0d919-146f-465e-87a7-3ef21734e4fe",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "raise NotImplementedError\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "93242b0b-0e71-40bc-960a-82956bd68b67",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def explain(self):\n        raise NotImplementedError"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "a835c436-f4c9-4cbd-897c-355bc5f9a8c4",
              "node_type": "class_definition",
              "decorator": null,
              "imports": [],
              "source": "class GeneralExplainer(Explainer):\n    def explain(self):\n        raise NotImplementedError"
            },
            {
              "type": "PythonEntity",
              "name": "entity.py.top_level_module_code",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/entity.py.top_level_module_code",
              "text": "",
              "uuid": "51668e06-e8c4-47e1-b01c-8e8062d96239",
              "contents": [],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "a835c436-f4c9-4cbd-897c-355bc5f9a8c4",
              "node_type": "top_level_code",
              "decorator": null,
              "imports": [],
              "source": "# from conversational_codebase.knowledge.models.entities import Content\n\nfrom concurrent.futures import wait, as_completed\n\nimport threading\n\nfrom copy import deepcopy\n\nfrom typing import List\n\nimport uuid\n\n# from conversational_codebase.knowledge.models.entities.python import PyFile\n\n# from conversational_codebase.knowledge.models.entities import Directory, File\n\nfrom conversational_codebase.explanation import Explanation\n\nimport os\n\n"
            }
          ],
          "explanation": null,
          "preliminary_context": "",
          "metadata": {},
          "dependencies": [],
          "expanded_state": "unexpanded",
          "parent_uuid": "a419ab9a-2bad-475a-9cd6-ca0fe7ae3dde",
          "node_type": "module",
          "decorator": null,
          "imports": [
            "<Node type=module, start_point=(0, 0), end_point=(105, 0)>",
            "<Node type=module, start_point=(0, 0), end_point=(105, 0)>",
            "<Node type=module, start_point=(0, 0), end_point=(105, 0)>",
            "<Node type=module, start_point=(0, 0), end_point=(105, 0)>",
            "<Node type=module, start_point=(0, 0), end_point=(105, 0)>",
            "<Node type=module, start_point=(0, 0), end_point=(105, 0)>",
            "<Node type=module, start_point=(0, 0), end_point=(105, 0)>"
          ],
          "source": "# from conversational_codebase.knowledge.models.entities import Content\nfrom concurrent.futures import wait, as_completed\nimport threading\n\nfrom copy import deepcopy\nfrom typing import List\nimport uuid\n# from conversational_codebase.knowledge.models.entities.python import PyFile\n# from conversational_codebase.knowledge.models.entities import Directory, File\nfrom conversational_codebase.explanation import Explanation\nimport os\n\n\nclass Entity:\n    def __init__(self, absolute_path, parent):\n        self.name = os.path.basename(absolute_path)\n        self.absolute_path = absolute_path\n        self.parent = parent\n        self.text = \"\"\n        self.uuid = uuid.uuid4()\n        # self.is_expanded = False\n        self.contents = []\n        self.explanation: Explanation = None\n        self.preliminary_context = \"\"\n        self.metadata = {}\n        self.dependencies = []\n        self.expanded_state = \"unexpanded\"\n\n        # self.explained_state = \"unexplained\"\n        # self.explained_state_lock = threading.Lock()\n\n    def expand(self):\n        raise NotImplementedError(\"Expand method should be implemented in subclasses\")\n    \n    def expand_concurrent(self, executor):\n        raise NotImplementedError(\"Expand method should be implemented in subclasses\")\n\n    def explain(self):\n        raise NotImplementedError(\"Explain method should be implemented in subclasses\")\n    \n    def explain_concurrent(self, executor):\n        raise NotImplementedError(\"Explain method should be implemented in subclasses\")\n    \n    # def _explain_content_concurrent(self, executor):\n    #     entities_to_explain = self.contents\n    #     entities_to_explain.extend(self.dependencies)\n    #     futures_to_entities = {}\n\n    #     while entities_to_explain:\n    #         for entity in entities_to_explain:\n    #             if entity.explained_state == 'explained':\n    #                 entities_to_explain.remove(entity)\n    #                 continue\n\n    #             if entity.explained_state_lock.acquire(blocking=False):\n    #                 try:\n    #                     if entity.explained_state == 'unexplained':\n    #                         # Submit the explain task to the executor\n    #                         future = executor.submit(entity.explain)\n    #                         futures_to_entities[future] = entity\n    #                 finally:\n    #                     entity.explained_state_lock.release()\n\n    #         # Wait for the completion of at least one of the submitted tasks\n    #         for future in as_completed(futures_to_entities):\n    #             entity = futures_to_entities[future]\n    #             entities_to_explain.remove(entity)\n    #             entity.explained_state = 'explained'\n        \n    def get_root(self): \n        if self.parent is None:\n            return self\n        else:\n            return self.parent.get_root()\n    \n    def get_relative_path(self):\n        root = self.get_root()\n        relative_path = os.path.relpath(self.absolute_path, start=root.absolute_path)\n\n        # Prepend the root directory name\n        relative_path_with_root = os.path.join(root.directory_name, relative_path)\n        \n        return relative_path_with_root\n    \n    def get_absolute_path(self):\n        return self.absolute_path\n    \n    def get_type(self):\n        return self.__class__.__name__\n    \nclass Explainer:\n    def __init__(self, entity: Entity):\n        self.entity = entity\n        self.prelimary_context = entity.get_root().preliminary_context\n\n    def explain(self):\n        raise NotImplementedError\n    \nclass GeneralExplainer(Explainer):\n    def explain(self):\n        raise NotImplementedError\n\n        \n\n\n"
        },
        {
          "type": "PythonEntity",
          "name": "directory.py",
          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/directory.py",
          "text": "",
          "uuid": "ec2a621c-73bb-4c60-8f5d-9fb069c55135",
          "contents": [
            {
              "type": "PythonEntity",
              "name": "directory.py.Directory",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/directory.py.Directory",
              "text": "",
              "uuid": "679000ad-20c3-4750-95dd-369f8b877027",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "directory.py.Directory.__init__",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/directory.py.Directory.__init__",
                  "text": "",
                  "uuid": "ae3b78e3-62a3-47b0-82f9-3cc54ccc9273",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "directory.py.Directory.__init__.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/directory.py.Directory.__init__.top_level_function_definition_code",
                      "text": "",
                      "uuid": "73920656-2e09-492a-b8d4-e8e7265569b6",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "ae3b78e3-62a3-47b0-82f9-3cc54ccc9273",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "super().__init__(absolute_path, parent)\n\nself.text = display_tree(absolute_path, string_rep=True, show_hidden=True, max_depth=1)\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae583d0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae58450>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae58510>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "679000ad-20c3-4750-95dd-369f8b877027",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def __init__(self, absolute_path, parent):\n        super().__init__(absolute_path, parent)\n        self.text = display_tree(absolute_path, string_rep=True, show_hidden=True, max_depth=1)"
                },
                {
                  "type": "PythonEntity",
                  "name": "directory.py.Directory.expand",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/directory.py.Directory.expand",
                  "text": "",
                  "uuid": "86d8281f-8b70-4713-ab84-be3986cc62a4",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "directory.py.Directory.expand.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/directory.py.Directory.expand.top_level_function_definition_code",
                      "text": "",
                      "uuid": "a9206352-9754-4a60-9ce6-ab5f6228710c",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "86d8281f-8b70-4713-ab84-be3986cc62a4",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "self.expanded_state = \"expanding\"\n\nself.contents = []\n\nfor item_name in os.listdir(self.absolute_path):\n            item_absolute_path = os.path.join(self.absolute_path, item_name)\n            if item_absolute_path in self.get_root().ignored_directories:\n                continue\n            if os.path.isdir(item_absolute_path):\n                sub_entity = Directory(item_absolute_path, self)\n                self.metadata[\"num_folders\"] = self.metadata.get(\"num_folders\", 0) + 1\n            else:\n                sub_entity = file_factory(item_absolute_path, self)\n                self.metadata[\"num_files\"] = self.metadata.get(\"num_files\", 0) + 1\n            \n            self.contents.append(sub_entity)\n            sub_entity.expand()\n            self.expanded_state = \"expanded\"\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae63610>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae63690>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae63750>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae63810>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae638d0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae639d0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae63a90>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae63b50>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae63c10>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae63990>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "679000ad-20c3-4750-95dd-369f8b877027",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def expand(self):\n        self.expanded_state = \"expanding\"\n        self.contents = []\n        for item_name in os.listdir(self.absolute_path):\n            item_absolute_path = os.path.join(self.absolute_path, item_name)\n            if item_absolute_path in self.get_root().ignored_directories:\n                continue\n            if os.path.isdir(item_absolute_path):\n                sub_entity = Directory(item_absolute_path, self)\n                self.metadata[\"num_folders\"] = self.metadata.get(\"num_folders\", 0) + 1\n            else:\n                sub_entity = file_factory(item_absolute_path, self)\n                self.metadata[\"num_files\"] = self.metadata.get(\"num_files\", 0) + 1\n            \n            self.contents.append(sub_entity)\n            sub_entity.expand()\n            self.expanded_state = \"expanded\""
                },
                {
                  "type": "PythonEntity",
                  "name": "directory.py.Directory.explain",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/directory.py.Directory.explain",
                  "text": "",
                  "uuid": "aa285942-e641-40e5-990f-b44700448373",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "directory.py.Directory.explain.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/directory.py.Directory.explain.top_level_function_definition_code",
                      "text": "",
                      "uuid": "92a8fc1a-9029-42f5-a4f9-8e072ace0a6d",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "aa285942-e641-40e5-990f-b44700448373",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "if self.expanded_state != \"expanded\":\n            raise ValueError(\"Directory must be expanded before it can be explained\")\n\n# ensure all contents are explained\n\nfor content in self.contents:\n            content.explain()\n            # TODO: explain dependencies\n\nself.explaination = DirectoryExplainer(self).explain()\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae5b610>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae5b290>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae5b410>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae5a790>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "679000ad-20c3-4750-95dd-369f8b877027",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def explain(self):\n        if self.expanded_state != \"expanded\":\n            raise ValueError(\"Directory must be expanded before it can be explained\")\n        \n        # ensure all contents are explained\n        for content in self.contents:\n            content.explain()\n            # TODO: explain dependencies\n\n        self.explaination = DirectoryExplainer(self).explain()"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "ec2a621c-73bb-4c60-8f5d-9fb069c55135",
              "node_type": "class_definition",
              "decorator": null,
              "imports": [],
              "source": "class Directory(Entity):\n    def __init__(self, absolute_path, parent):\n        super().__init__(absolute_path, parent)\n        self.text = display_tree(absolute_path, string_rep=True, show_hidden=True, max_depth=1)\n\n    def expand(self):\n        self.expanded_state = \"expanding\"\n        self.contents = []\n        for item_name in os.listdir(self.absolute_path):\n            item_absolute_path = os.path.join(self.absolute_path, item_name)\n            if item_absolute_path in self.get_root().ignored_directories:\n                continue\n            if os.path.isdir(item_absolute_path):\n                sub_entity = Directory(item_absolute_path, self)\n                self.metadata[\"num_folders\"] = self.metadata.get(\"num_folders\", 0) + 1\n            else:\n                sub_entity = file_factory(item_absolute_path, self)\n                self.metadata[\"num_files\"] = self.metadata.get(\"num_files\", 0) + 1\n            \n            self.contents.append(sub_entity)\n            sub_entity.expand()\n            self.expanded_state = \"expanded\"\n\n    def explain(self):\n        if self.expanded_state != \"expanded\":\n            raise ValueError(\"Directory must be expanded before it can be explained\")\n        \n        # ensure all contents are explained\n        for content in self.contents:\n            content.explain()\n            # TODO: explain dependencies\n\n        self.explaination = DirectoryExplainer(self).explain()"
            },
            {
              "type": "PythonEntity",
              "name": "directory.py.RootDirectory",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/directory.py.RootDirectory",
              "text": "",
              "uuid": "979b3a9a-9fce-4a90-9e27-91146929d852",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "directory.py.RootDirectory.__init__",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/directory.py.RootDirectory.__init__",
                  "text": "",
                  "uuid": "531d4283-73ee-4476-9229-e66c01aba584",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "directory.py.RootDirectory.__init__.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/directory.py.RootDirectory.__init__.top_level_function_definition_code",
                      "text": "",
                      "uuid": "1c0d9236-7adc-4ac5-83f9-a77e1f03799e",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "531d4283-73ee-4476-9229-e66c01aba584",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "super().__init__(absolute_path, parent=None)\n\nself.ignored_directories = ignored_directories\n\n# figure out a way to some prelimary context but for now it is passed in.\n\nself.preliminary_context = preliminary_context\n\nself.directory_name = os.path.basename(absolute_path)\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae63f50>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae63fd0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae680d0>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "979b3a9a-9fce-4a90-9e27-91146929d852",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def __init__(self, preliminary_context, absolute_path, ignored_directories=None):\n        super().__init__(absolute_path, parent=None)\n        self.ignored_directories = ignored_directories\n        # figure out a way to some prelimary context but for now it is passed in.\n        self.preliminary_context = preliminary_context\n        self.directory_name = os.path.basename(absolute_path)"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "ec2a621c-73bb-4c60-8f5d-9fb069c55135",
              "node_type": "class_definition",
              "decorator": null,
              "imports": [],
              "source": "class RootDirectory(Directory):\n    def __init__(self, preliminary_context, absolute_path, ignored_directories=None):\n        super().__init__(absolute_path, parent=None)\n        self.ignored_directories = ignored_directories\n        # figure out a way to some prelimary context but for now it is passed in.\n        self.preliminary_context = preliminary_context\n        self.directory_name = os.path.basename(absolute_path)"
            },
            {
              "type": "PythonEntity",
              "name": "directory.py.DirectoryExplainer",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/directory.py.DirectoryExplainer",
              "text": "",
              "uuid": "f1885fc2-4746-47ef-a963-ca3a138a1ddb",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "directory.py.DirectoryExplainer.__init__",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/directory.py.DirectoryExplainer.__init__",
                  "text": "",
                  "uuid": "be6d851b-74a0-4180-ac06-fe85876b3ebe",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "directory.py.DirectoryExplainer.__init__.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/directory.py.DirectoryExplainer.__init__.top_level_function_definition_code",
                      "text": "",
                      "uuid": "55a2654d-5ae0-4686-8793-efca5556eb63",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "be6d851b-74a0-4180-ac06-fe85876b3ebe",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "super().__init__(entity)\n\nself.prompt = \"As an AI assistant, your task is to analyze and explain a directory based it's contents in paragraph form. Explain the purpose, category, and organizational structure of the directory, and how each file contributes to the overall theme or function.\"\n\nself.explanation_tok_length = 150\n\n# Increased token length for more detailed explanations\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae68b50>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae68bd0>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "f1885fc2-4746-47ef-a963-ca3a138a1ddb",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def __init__(self, entity: Entity):\n        super().__init__(entity)\n        self.prompt = \"As an AI assistant, your task is to analyze and explain a directory based it's contents in paragraph form. Explain the purpose, category, and organizational structure of the directory, and how each file contributes to the overall theme or function.\"\n\n        self.explanation_tok_length = 150  # Increased token length for more detailed explanations"
                },
                {
                  "type": "PythonEntity",
                  "name": "directory.py.DirectoryExplainer.explain",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/directory.py.DirectoryExplainer.explain",
                  "text": "",
                  "uuid": "73113bc4-69e5-4af0-ad45-a96308a8a40c",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "directory.py.DirectoryExplainer.explain.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/directory.py.DirectoryExplainer.explain.top_level_function_definition_code",
                      "text": "",
                      "uuid": "b9419f0a-ad48-436d-9043-dcbd4edd3eaf",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "73113bc4-69e5-4af0-ad45-a96308a8a40c",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "\"\"\"Does not handle context length\"\"\"\n\nexplanations = []\n\nfor content in self.entity.contents:\n            explanation = content.explanation\n            metadata_info = \", \".join([f\"{key}: {value}\" for key, value in self.entity.metadata.items()])\n            explanations.append(f\"- {content.name}: {explanation}. Metadata: {metadata_info}\")\n\nreturn LLM(f\"{self.prompt}\\n\\nDirectory Contents:\\n\" + \"\\n\".join(explanations), \"gpt-3.5-turbo-1106\", self.explanation_tok_length)\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae6d6d0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae6d750>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae6d810>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae6d8d0>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae6d990>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "f1885fc2-4746-47ef-a963-ca3a138a1ddb",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def explain(self) -> Explanation:\n        \"\"\"Does not handle context length\"\"\"\n        explanations = []\n        for content in self.entity.contents:\n            explanation = content.explanation\n            metadata_info = \", \".join([f\"{key}: {value}\" for key, value in self.entity.metadata.items()])\n            explanations.append(f\"- {content.name}: {explanation}. Metadata: {metadata_info}\")\n        return LLM(f\"{self.prompt}\\n\\nDirectory Contents:\\n\" + \"\\n\".join(explanations), \"gpt-3.5-turbo-1106\", self.explanation_tok_length)"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "ec2a621c-73bb-4c60-8f5d-9fb069c55135",
              "node_type": "class_definition",
              "decorator": null,
              "imports": [],
              "source": "class DirectoryExplainer(Explainer):\n    def __init__(self, entity: Entity):\n        super().__init__(entity)\n        self.prompt = \"As an AI assistant, your task is to analyze and explain a directory based it's contents in paragraph form. Explain the purpose, category, and organizational structure of the directory, and how each file contributes to the overall theme or function.\"\n\n        self.explanation_tok_length = 150  # Increased token length for more detailed explanations\n\n    def explain(self) -> Explanation:\n        \"\"\"Does not handle context length\"\"\"\n        explanations = []\n        for content in self.entity.contents:\n            explanation = content.explanation\n            metadata_info = \", \".join([f\"{key}: {value}\" for key, value in self.entity.metadata.items()])\n            explanations.append(f\"- {content.name}: {explanation}. Metadata: {metadata_info}\")\n        return LLM(f\"{self.prompt}\\n\\nDirectory Contents:\\n\" + \"\\n\".join(explanations), \"gpt-3.5-turbo-1106\", self.explanation_tok_length)"
            },
            {
              "type": "PythonEntity",
              "name": "directory.py.file_factory",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/directory.py.file_factory",
              "text": "",
              "uuid": "faeb29f2-f4cf-4d7a-8761-80a4772ff23e",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "directory.py.file_factory.func",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/directory.py.file_factory.func",
                  "text": "",
                  "uuid": "8dea38e6-3b61-457e-8d45-c5683e3d5c4c",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "directory.py.file_factory.func.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/directory.py.file_factory.func.top_level_function_definition_code",
                      "text": "",
                      "uuid": "6147ec57-e270-43c1-b544-36b8d37614d6",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "8dea38e6-3b61-457e-8d45-c5683e3d5c4c",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "return \"sda\"\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "faeb29f2-f4cf-4d7a-8761-80a4772ff23e",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def func(file_path, parent):\n        return \"sda\""
                },
                {
                  "type": "PythonEntity",
                  "name": "directory.py.file_factory.top_level_function_definition_code",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/directory.py.file_factory.top_level_function_definition_code",
                  "text": "",
                  "uuid": "c5f36cdf-c663-41ef-89d9-f9cc96a069f2",
                  "contents": [],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "faeb29f2-f4cf-4d7a-8761-80a4772ff23e",
                  "node_type": "top_level_code",
                  "decorator": null,
                  "imports": [],
                  "source": "extension = os.path.splitext(file_path)[1]\n\nif extension == '.py':\n        file_name = os.path.basename(file_path)\n        parser = Parser()\n        parser.set_language(PY_LANGUAGE)\n        \n        with open(file_path, 'r') as file:\n            source_code = file.read()\n\n        tree = parser.parse(bytes(source_code, \"utf8\"))\n\n        return PythonEntity(file_name, parent, tree.root_node, \"module\")\n    # Add more conditions for different file types\n    else:\n        return UnsupportedFile(file_path, parent)\n\n"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae75b50>",
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae75bd0>",
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae75c90>",
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae75d50>",
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae75e10>",
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae75f10>",
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae75fd0>",
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae76090>",
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae76150>",
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae75ed0>"
              ],
              "expanded_state": "unexpanded",
              "parent_uuid": "ec2a621c-73bb-4c60-8f5d-9fb069c55135",
              "node_type": "function_definition",
              "decorator": null,
              "imports": [],
              "source": "def file_factory(file_path, parent):\n    def func(file_path, parent):\n        return \"sda\"\n    extension = os.path.splitext(file_path)[1]\n    if extension == '.py':\n        file_name = os.path.basename(file_path)\n        parser = Parser()\n        parser.set_language(PY_LANGUAGE)\n        \n        with open(file_path, 'r') as file:\n            source_code = file.read()\n\n        tree = parser.parse(bytes(source_code, \"utf8\"))\n\n        return PythonEntity(file_name, parent, tree.root_node, \"module\")\n    # Add more conditions for different file types\n    else:\n        return UnsupportedFile(file_path, parent)"
            },
            {
              "type": "PythonEntity",
              "name": "directory.py.top_level_module_code",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/entities/directory.py.top_level_module_code",
              "text": "",
              "uuid": "c29f93ab-0fe5-4eb8-8fb4-648c8cbd516a",
              "contents": [],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "ec2a621c-73bb-4c60-8f5d-9fb069c55135",
              "node_type": "top_level_code",
              "decorator": null,
              "imports": [],
              "source": "import os\n\nfrom .file import UnsupportedFile\n\nfrom .python import PythonEntity\n\nfrom conversational_codebase.explanation import LLM, Explanation\n\n# at the bottom to prevent circular imports\n\nfrom .entity import Entity, Explainer\n\nfrom directory_tree import display_tree\n\nfrom tree_sitter import Parser, Node, Language\n\nfrom conversational_codebase.parser import PY_LANGUAGE\n\n# same as above but parent is None\n\n# File factory function\n\n"
            }
          ],
          "explanation": null,
          "preliminary_context": "",
          "metadata": {},
          "dependencies": [],
          "expanded_state": "unexpanded",
          "parent_uuid": "a419ab9a-2bad-475a-9cd6-ca0fe7ae3dde",
          "node_type": "module",
          "decorator": null,
          "imports": [
            "<Node type=module, start_point=(2, 0), end_point=(92, 0)>",
            "<Node type=module, start_point=(2, 0), end_point=(92, 0)>",
            "<Node type=module, start_point=(2, 0), end_point=(92, 0)>",
            "<Node type=module, start_point=(2, 0), end_point=(92, 0)>",
            "<Node type=module, start_point=(2, 0), end_point=(92, 0)>",
            "<Node type=module, start_point=(2, 0), end_point=(92, 0)>",
            "<Node type=module, start_point=(2, 0), end_point=(92, 0)>",
            "<Node type=module, start_point=(2, 0), end_point=(92, 0)>"
          ],
          "source": "import os\n\nfrom .file import UnsupportedFile\nfrom .python import PythonEntity\nfrom conversational_codebase.explanation import LLM, Explanation\n# at the bottom to prevent circular imports\nfrom .entity import Entity, Explainer\nfrom directory_tree import display_tree\nfrom tree_sitter import Parser, Node, Language\nfrom conversational_codebase.parser import PY_LANGUAGE\n\nclass Directory(Entity):\n    def __init__(self, absolute_path, parent):\n        super().__init__(absolute_path, parent)\n        self.text = display_tree(absolute_path, string_rep=True, show_hidden=True, max_depth=1)\n\n    def expand(self):\n        self.expanded_state = \"expanding\"\n        self.contents = []\n        for item_name in os.listdir(self.absolute_path):\n            item_absolute_path = os.path.join(self.absolute_path, item_name)\n            if item_absolute_path in self.get_root().ignored_directories:\n                continue\n            if os.path.isdir(item_absolute_path):\n                sub_entity = Directory(item_absolute_path, self)\n                self.metadata[\"num_folders\"] = self.metadata.get(\"num_folders\", 0) + 1\n            else:\n                sub_entity = file_factory(item_absolute_path, self)\n                self.metadata[\"num_files\"] = self.metadata.get(\"num_files\", 0) + 1\n            \n            self.contents.append(sub_entity)\n            sub_entity.expand()\n            self.expanded_state = \"expanded\"\n\n    def explain(self):\n        if self.expanded_state != \"expanded\":\n            raise ValueError(\"Directory must be expanded before it can be explained\")\n        \n        # ensure all contents are explained\n        for content in self.contents:\n            content.explain()\n            # TODO: explain dependencies\n\n        self.explaination = DirectoryExplainer(self).explain()\n\n\n# same as above but parent is None\nclass RootDirectory(Directory):\n    def __init__(self, preliminary_context, absolute_path, ignored_directories=None):\n        super().__init__(absolute_path, parent=None)\n        self.ignored_directories = ignored_directories\n        # figure out a way to some prelimary context but for now it is passed in.\n        self.preliminary_context = preliminary_context\n        self.directory_name = os.path.basename(absolute_path)\n\nclass DirectoryExplainer(Explainer):\n    def __init__(self, entity: Entity):\n        super().__init__(entity)\n        self.prompt = \"As an AI assistant, your task is to analyze and explain a directory based it's contents in paragraph form. Explain the purpose, category, and organizational structure of the directory, and how each file contributes to the overall theme or function.\"\n\n        self.explanation_tok_length = 150  # Increased token length for more detailed explanations\n\n    def explain(self) -> Explanation:\n        \"\"\"Does not handle context length\"\"\"\n        explanations = []\n        for content in self.entity.contents:\n            explanation = content.explanation\n            metadata_info = \", \".join([f\"{key}: {value}\" for key, value in self.entity.metadata.items()])\n            explanations.append(f\"- {content.name}: {explanation}. Metadata: {metadata_info}\")\n        return LLM(f\"{self.prompt}\\n\\nDirectory Contents:\\n\" + \"\\n\".join(explanations), \"gpt-3.5-turbo-1106\", self.explanation_tok_length)\n\n# File factory function\ndef file_factory(file_path, parent):\n    def func(file_path, parent):\n        return \"sda\"\n    extension = os.path.splitext(file_path)[1]\n    if extension == '.py':\n        file_name = os.path.basename(file_path)\n        parser = Parser()\n        parser.set_language(PY_LANGUAGE)\n        \n        with open(file_path, 'r') as file:\n            source_code = file.read()\n\n        tree = parser.parse(bytes(source_code, \"utf8\"))\n\n        return PythonEntity(file_name, parent, tree.root_node, \"module\")\n    # Add more conditions for different file types\n    else:\n        return UnsupportedFile(file_path, parent)\n"
        }
      ],
      "explanation": null,
      "preliminary_context": "",
      "metadata": {
        "num_files": 7,
        "num_folders": 1
      },
      "dependencies": [],
      "expanded_state": "expanded",
      "parent_uuid": "50206252-a034-45ed-944d-480be9d60b30"
    },
    {
      "type": "UnsupportedFile",
      "name": "temp_plot.html",
      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/temp_plot.html",
      "text": "",
      "uuid": "a0a29035-3699-426b-afc2-473a06b8f307",
      "contents": [],
      "explanation": null,
      "preliminary_context": "",
      "metadata": {
        "file_size": 3605958
      },
      "dependencies": [],
      "expanded_state": "unexpanded",
      "parent_uuid": "50206252-a034-45ed-944d-480be9d60b30"
    },
    {
      "type": "PythonEntity",
      "name": "nested.py",
      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/nested.py",
      "text": "",
      "uuid": "91705039-1fdd-4e34-81f8-66ad7385310a",
      "contents": [
        {
          "type": "PythonEntity",
          "name": "nested.py.Library",
          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/nested.py.Library",
          "text": "",
          "uuid": "0fe5481d-e8c3-4160-9f14-39c8550f6a94",
          "contents": [
            {
              "type": "PythonEntity",
              "name": "nested.py.Library.LibraryItem",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/nested.py.Library.LibraryItem",
              "text": "",
              "uuid": "0f3a14f2-74ee-4c7b-a5d0-0cfe630a6bc8",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "nested.py.Library.LibraryItem.__init__",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/nested.py.Library.LibraryItem.__init__",
                  "text": "",
                  "uuid": "6beb3f0e-fa62-4ab9-9df2-64af38f32326",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "nested.py.Library.LibraryItem.__init__.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/nested.py.Library.LibraryItem.__init__.top_level_function_definition_code",
                      "text": "",
                      "uuid": "3ac1716e-0720-48ab-9f6e-1c68056711e2",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "6beb3f0e-fa62-4ab9-9df2-64af38f32326",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "self.title = title\n\nself.is_loaned = False\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "0f3a14f2-74ee-4c7b-a5d0-0cfe630a6bc8",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def __init__(self, title):\n            self.title = title\n            self.is_loaned = False"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "0fe5481d-e8c3-4160-9f14-39c8550f6a94",
              "node_type": "class_definition",
              "decorator": null,
              "imports": [],
              "source": "class LibraryItem:\n        def __init__(self, title):\n            self.title = title\n            self.is_loaned = False"
            },
            {
              "type": "PythonEntity",
              "name": "nested.py.Library.Book",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/nested.py.Library.Book",
              "text": "",
              "uuid": "e624f5d9-ef8a-4e74-8628-95cdf5df2484",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "nested.py.Library.Book.__init__",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/nested.py.Library.Book.__init__",
                  "text": "",
                  "uuid": "8ec076e7-2e0e-4879-8b29-7f16b9c300b4",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "nested.py.Library.Book.__init__.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/nested.py.Library.Book.__init__.top_level_function_definition_code",
                      "text": "",
                      "uuid": "89c71927-368f-4e3f-94e2-ae3bb0adcf71",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "8ec076e7-2e0e-4879-8b29-7f16b9c300b4",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "super().__init__(title)\n\nself.author = author\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae78f50>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae78fd0>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "e624f5d9-ef8a-4e74-8628-95cdf5df2484",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def __init__(self, title, author):\n            super().__init__(title)\n            self.author = author"
                },
                {
                  "type": "PythonEntity",
                  "name": "nested.py.Library.Book.__str__",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/nested.py.Library.Book.__str__",
                  "text": "",
                  "uuid": "59009759-ab19-4279-8741-d4dc081f5eed",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "nested.py.Library.Book.__str__.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/nested.py.Library.Book.__str__.top_level_function_definition_code",
                      "text": "",
                      "uuid": "70b9bfd3-860b-4874-ae76-7e9a07875956",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "59009759-ab19-4279-8741-d4dc081f5eed",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "return f\"'{self.title}' by {self.author}\"\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "e624f5d9-ef8a-4e74-8628-95cdf5df2484",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def __str__(self):\n            return f\"'{self.title}' by {self.author}\""
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "0fe5481d-e8c3-4160-9f14-39c8550f6a94",
              "node_type": "class_definition",
              "decorator": null,
              "imports": [],
              "source": "class Book(LibraryItem):\n        def __init__(self, title, author):\n            super().__init__(title)\n            self.author = author\n\n        def __str__(self):\n            return f\"'{self.title}' by {self.author}\""
            },
            {
              "type": "PythonEntity",
              "name": "nested.py.Library.Member",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/nested.py.Library.Member",
              "text": "",
              "uuid": "5088150b-b692-4455-b4c3-04fbb8b84d52",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "nested.py.Library.Member.__init__",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/nested.py.Library.Member.__init__",
                  "text": "",
                  "uuid": "4c6bc71d-212c-4c42-a7f4-7532f939cdec",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "nested.py.Library.Member.__init__.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/nested.py.Library.Member.__init__.top_level_function_definition_code",
                      "text": "",
                      "uuid": "3bf13fff-6188-4b20-953a-b1390a6ff012",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "4c6bc71d-212c-4c42-a7f4-7532f939cdec",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "self.name = name\n\nself.loans = []\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "5088150b-b692-4455-b4c3-04fbb8b84d52",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def __init__(self, name):\n            self.name = name\n            self.loans = []"
                },
                {
                  "type": "PythonEntity",
                  "name": "nested.py.Library.Member.borrow_book",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/nested.py.Library.Member.borrow_book",
                  "text": "",
                  "uuid": "3eb92945-e923-44e9-92d1-53b2627b1869",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "nested.py.Library.Member.borrow_book.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/nested.py.Library.Member.borrow_book.top_level_function_definition_code",
                      "text": "",
                      "uuid": "030f6d69-8b40-414a-b2e8-e8adac997a5a",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "3eb92945-e923-44e9-92d1-53b2627b1869",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "if not book.is_loaned:\n                book.is_loaned = True\n                self.loans.append(book)\n                return f\"{self.name} has borrowed {book}\"\n            else:\n                return f\"{book} is currently not available.\"\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae7b790>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "5088150b-b692-4455-b4c3-04fbb8b84d52",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def borrow_book(self, book):\n            if not book.is_loaned:\n                book.is_loaned = True\n                self.loans.append(book)\n                return f\"{self.name} has borrowed {book}\"\n            else:\n                return f\"{book} is currently not available.\""
                },
                {
                  "type": "PythonEntity",
                  "name": "nested.py.Library.Member.return_book",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/nested.py.Library.Member.return_book",
                  "text": "",
                  "uuid": "47458e40-c866-4762-909b-7cadd37c6150",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "nested.py.Library.Member.return_book.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/nested.py.Library.Member.return_book.top_level_function_definition_code",
                      "text": "",
                      "uuid": "32b15b35-4d19-480a-9e55-a46544ce5657",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "47458e40-c866-4762-909b-7cadd37c6150",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "if book in self.loans:\n                book.is_loaned = False\n                self.loans.remove(book)\n                return f\"{self.name} has returned {book}\"\n            else:\n                return f\"{self.name} did not borrow {book}\"\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae7c5d0>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "5088150b-b692-4455-b4c3-04fbb8b84d52",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def return_book(self, book):\n            if book in self.loans:\n                book.is_loaned = False\n                self.loans.remove(book)\n                return f\"{self.name} has returned {book}\"\n            else:\n                return f\"{self.name} did not borrow {book}\""
                },
                {
                  "type": "PythonEntity",
                  "name": "nested.py.Library.Member.list_borrowed_books",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/nested.py.Library.Member.list_borrowed_books",
                  "text": "",
                  "uuid": "69d9ce8a-7261-43fd-a0ed-77ab2cbf0a50",
                  "contents": [
                    {
                      "type": "PythonEntity",
                      "name": "nested.py.Library.Member.list_borrowed_books.top_level_function_definition_code",
                      "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/nested.py.Library.Member.list_borrowed_books.top_level_function_definition_code",
                      "text": "",
                      "uuid": "79d7b81a-8569-4897-b422-d852834395be",
                      "contents": [],
                      "explanation": null,
                      "preliminary_context": "",
                      "metadata": {},
                      "dependencies": [],
                      "expanded_state": "unexpanded",
                      "parent_uuid": "69d9ce8a-7261-43fd-a0ed-77ab2cbf0a50",
                      "node_type": "top_level_code",
                      "decorator": null,
                      "imports": [],
                      "source": "return \", \".join(str(book) for book in self.loans) if self.loans else \"No books borrowed.\"\n\n"
                    }
                  ],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae7a710>",
                    "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae7c2d0>"
                  ],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "5088150b-b692-4455-b4c3-04fbb8b84d52",
                  "node_type": "function_definition",
                  "decorator": null,
                  "imports": [],
                  "source": "def list_borrowed_books(self):\n            return \", \".join(str(book) for book in self.loans) if self.loans else \"No books borrowed.\""
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "0fe5481d-e8c3-4160-9f14-39c8550f6a94",
              "node_type": "class_definition",
              "decorator": null,
              "imports": [],
              "source": "class Member:\n        def __init__(self, name):\n            self.name = name\n            self.loans = []\n\n        def borrow_book(self, book):\n            if not book.is_loaned:\n                book.is_loaned = True\n                self.loans.append(book)\n                return f\"{self.name} has borrowed {book}\"\n            else:\n                return f\"{book} is currently not available.\"\n\n        def return_book(self, book):\n            if book in self.loans:\n                book.is_loaned = False\n                self.loans.remove(book)\n                return f\"{self.name} has returned {book}\"\n            else:\n                return f\"{self.name} did not borrow {book}\"\n\n        def list_borrowed_books(self):\n            return \", \".join(str(book) for book in self.loans) if self.loans else \"No books borrowed.\""
            },
            {
              "type": "PythonEntity",
              "name": "nested.py.Library.__init__",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/nested.py.Library.__init__",
              "text": "",
              "uuid": "4e6b87a3-81d8-4966-8eb1-49ba56431f71",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "nested.py.Library.__init__.top_level_function_definition_code",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/nested.py.Library.__init__.top_level_function_definition_code",
                  "text": "",
                  "uuid": "abe1a48f-2590-4d85-8635-8a5c349045c8",
                  "contents": [],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "4e6b87a3-81d8-4966-8eb1-49ba56431f71",
                  "node_type": "top_level_code",
                  "decorator": null,
                  "imports": [],
                  "source": "self.items = []\n\n# Now a general list for library items\n\nself.members = []\n\n"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "0fe5481d-e8c3-4160-9f14-39c8550f6a94",
              "node_type": "function_definition",
              "decorator": null,
              "imports": [],
              "source": "def __init__(self):\n        self.items = []  # Now a general list for library items\n        self.members = []"
            },
            {
              "type": "PythonEntity",
              "name": "nested.py.Library.add_book",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/nested.py.Library.add_book",
              "text": "",
              "uuid": "27768255-c834-4677-87ef-210d2593c503",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "nested.py.Library.add_book.top_level_function_definition_code",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/nested.py.Library.add_book.top_level_function_definition_code",
                  "text": "",
                  "uuid": "8a6f75be-6a83-42a1-8542-6fa62bd3fb2e",
                  "contents": [],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "27768255-c834-4677-87ef-210d2593c503",
                  "node_type": "top_level_code",
                  "decorator": null,
                  "imports": [],
                  "source": "new_book = self.Book(title, author)\n\nself.items.append(new_book)\n\nreturn f\"Added {new_book}\"\n\n"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae7d410>",
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae7d490>"
              ],
              "expanded_state": "unexpanded",
              "parent_uuid": "0fe5481d-e8c3-4160-9f14-39c8550f6a94",
              "node_type": "function_definition",
              "decorator": null,
              "imports": [],
              "source": "def add_book(self, title, author):\n        new_book = self.Book(title, author)\n        self.items.append(new_book)\n        return f\"Added {new_book}\""
            },
            {
              "type": "PythonEntity",
              "name": "nested.py.Library.register_member",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/nested.py.Library.register_member",
              "text": "",
              "uuid": "b90e9b77-808e-4e1e-8719-ed5a11c35040",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "nested.py.Library.register_member.top_level_function_definition_code",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/nested.py.Library.register_member.top_level_function_definition_code",
                  "text": "",
                  "uuid": "1064b512-084b-476e-843b-3c24362e6dfd",
                  "contents": [],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "b90e9b77-808e-4e1e-8719-ed5a11c35040",
                  "node_type": "top_level_code",
                  "decorator": null,
                  "imports": [],
                  "source": "new_member = self.Member(name)\n\nself.members.append(new_member)\n\nreturn f\"Registered {new_member.name} as a member.\"\n\n"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae7e5d0>",
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae7e650>"
              ],
              "expanded_state": "unexpanded",
              "parent_uuid": "0fe5481d-e8c3-4160-9f14-39c8550f6a94",
              "node_type": "function_definition",
              "decorator": null,
              "imports": [],
              "source": "def register_member(self, name):\n        new_member = self.Member(name)\n        self.members.append(new_member)\n        return f\"Registered {new_member.name} as a member.\""
            },
            {
              "type": "PythonEntity",
              "name": "nested.py.Library.find_item",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/nested.py.Library.find_item",
              "text": "",
              "uuid": "17106e44-c963-41eb-a385-e93138137db5",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "nested.py.Library.find_item.top_level_function_definition_code",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/nested.py.Library.find_item.top_level_function_definition_code",
                  "text": "",
                  "uuid": "80353846-3694-47ad-87c3-e6edbe2d7ddb",
                  "contents": [],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "17106e44-c963-41eb-a385-e93138137db5",
                  "node_type": "top_level_code",
                  "decorator": null,
                  "imports": [],
                  "source": "if items is None:\n            items = self.items\n\nfor item in items:\n            if isinstance(item, self.Book) and (item.title == title_or_author or item.author == title_or_author):\n                return item\n            # Recursive call could be here if we had nested structures like book categories\n\nreturn None\n\n"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [
                "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae84250>"
              ],
              "expanded_state": "unexpanded",
              "parent_uuid": "0fe5481d-e8c3-4160-9f14-39c8550f6a94",
              "node_type": "function_definition",
              "decorator": null,
              "imports": [],
              "source": "def find_item(self, title_or_author, items=None):\n        if items is None:\n            items = self.items\n        for item in items:\n            if isinstance(item, self.Book) and (item.title == title_or_author or item.author == title_or_author):\n                return item\n            # Recursive call could be here if we had nested structures like book categories\n        return None"
            },
            {
              "type": "PythonEntity",
              "name": "nested.py.Library.find_member",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/nested.py.Library.find_member",
              "text": "",
              "uuid": "f12bfa27-b6e1-49ec-a5b4-6b4665b57138",
              "contents": [
                {
                  "type": "PythonEntity",
                  "name": "nested.py.Library.find_member.top_level_function_definition_code",
                  "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/nested.py.Library.find_member.top_level_function_definition_code",
                  "text": "",
                  "uuid": "5fb0b30a-d3f8-446b-9cff-bce8faf2063e",
                  "contents": [],
                  "explanation": null,
                  "preliminary_context": "",
                  "metadata": {},
                  "dependencies": [],
                  "expanded_state": "unexpanded",
                  "parent_uuid": "f12bfa27-b6e1-49ec-a5b4-6b4665b57138",
                  "node_type": "top_level_code",
                  "decorator": null,
                  "imports": [],
                  "source": "for member in self.members:\n            if member.name == name:\n                return member\n\nreturn None\n\n"
                }
              ],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "0fe5481d-e8c3-4160-9f14-39c8550f6a94",
              "node_type": "function_definition",
              "decorator": null,
              "imports": [],
              "source": "def find_member(self, name):\n        for member in self.members:\n            if member.name == name:\n                return member\n        return None"
            }
          ],
          "explanation": null,
          "preliminary_context": "",
          "metadata": {},
          "dependencies": [],
          "expanded_state": "unexpanded",
          "parent_uuid": "91705039-1fdd-4e34-81f8-66ad7385310a",
          "node_type": "class_definition",
          "decorator": null,
          "imports": [],
          "source": "class Library:\n    class LibraryItem:\n        def __init__(self, title):\n            self.title = title\n            self.is_loaned = False\n\n    class Book(LibraryItem):\n        def __init__(self, title, author):\n            super().__init__(title)\n            self.author = author\n\n        def __str__(self):\n            return f\"'{self.title}' by {self.author}\"\n\n    class Member:\n        def __init__(self, name):\n            self.name = name\n            self.loans = []\n\n        def borrow_book(self, book):\n            if not book.is_loaned:\n                book.is_loaned = True\n                self.loans.append(book)\n                return f\"{self.name} has borrowed {book}\"\n            else:\n                return f\"{book} is currently not available.\"\n\n        def return_book(self, book):\n            if book in self.loans:\n                book.is_loaned = False\n                self.loans.remove(book)\n                return f\"{self.name} has returned {book}\"\n            else:\n                return f\"{self.name} did not borrow {book}\"\n\n        def list_borrowed_books(self):\n            return \", \".join(str(book) for book in self.loans) if self.loans else \"No books borrowed.\"\n\n    def __init__(self):\n        self.items = []  # Now a general list for library items\n        self.members = []\n\n    def add_book(self, title, author):\n        new_book = self.Book(title, author)\n        self.items.append(new_book)\n        return f\"Added {new_book}\"\n\n    def register_member(self, name):\n        new_member = self.Member(name)\n        self.members.append(new_member)\n        return f\"Registered {new_member.name} as a member.\"\n\n    def find_item(self, title_or_author, items=None):\n        if items is None:\n            items = self.items\n        for item in items:\n            if isinstance(item, self.Book) and (item.title == title_or_author or item.author == title_or_author):\n                return item\n            # Recursive call could be here if we had nested structures like book categories\n        return None\n\n    def find_member(self, name):\n        for member in self.members:\n            if member.name == name:\n                return member\n        return None"
        },
        {
          "type": "PythonEntity",
          "name": "nested.py.func",
          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/nested.py.func",
          "text": "",
          "uuid": "14db7c65-2849-47ec-935a-058d38b725ff",
          "contents": [
            {
              "type": "PythonEntity",
              "name": "nested.py.func.top_level_function_definition_code",
              "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/nested.py.func.top_level_function_definition_code",
              "text": "",
              "uuid": "330b23bd-bbf0-408f-bdf3-10f52121ca11",
              "contents": [],
              "explanation": null,
              "preliminary_context": "",
              "metadata": {},
              "dependencies": [],
              "expanded_state": "unexpanded",
              "parent_uuid": "14db7c65-2849-47ec-935a-058d38b725ff",
              "node_type": "top_level_code",
              "decorator": null,
              "imports": [],
              "source": "return a\n\n"
            }
          ],
          "explanation": null,
          "preliminary_context": "",
          "metadata": {},
          "dependencies": [],
          "expanded_state": "unexpanded",
          "parent_uuid": "91705039-1fdd-4e34-81f8-66ad7385310a",
          "node_type": "function_definition",
          "decorator": null,
          "imports": [],
          "source": "def func(a: str):\n    return a"
        },
        {
          "type": "PythonEntity",
          "name": "nested.py.top_level_module_code",
          "absolute_path": "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/nested.py.top_level_module_code",
          "text": "",
          "uuid": "666c31cb-cbdb-40be-ba4e-a5f82e5c03a4",
          "contents": [],
          "explanation": null,
          "preliminary_context": "",
          "metadata": {},
          "dependencies": [],
          "expanded_state": "unexpanded",
          "parent_uuid": "91705039-1fdd-4e34-81f8-66ad7385310a",
          "node_type": "top_level_code",
          "decorator": null,
          "imports": [],
          "source": "# Example usage\n\nlibrary = Library()\n\nprint(library.add_book(\"1984\", \"George Orwell\"))\n\nprint(library.register_member(\"Alice\"))\n\nbook = library.find_item(\"1984\")\n\nmember = library.find_member(\"Alice\")\n\nprint(member.borrow_book(book))\n\nprint(member.list_borrowed_books())\n\nprint(member.return_book(book))\n\nprint(member.list_borrowed_books())\n\n"
        }
      ],
      "explanation": null,
      "preliminary_context": "",
      "metadata": {},
      "dependencies": [
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae87310>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae87390>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae87450>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae87510>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae875d0>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae876d0>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae87790>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae87850>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae87910>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae87690>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae87a50>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae87b10>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae87bd0>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae87c90>",
        "<conversational_codebase.entities.python.PythonCallDependency object at 0x29ae87d50>"
      ],
      "expanded_state": "unexpanded",
      "parent_uuid": "50206252-a034-45ed-944d-480be9d60b30",
      "node_type": "module",
      "decorator": null,
      "imports": [],
      "source": "class Library:\n    class LibraryItem:\n        def __init__(self, title):\n            self.title = title\n            self.is_loaned = False\n\n    class Book(LibraryItem):\n        def __init__(self, title, author):\n            super().__init__(title)\n            self.author = author\n\n        def __str__(self):\n            return f\"'{self.title}' by {self.author}\"\n\n    class Member:\n        def __init__(self, name):\n            self.name = name\n            self.loans = []\n\n        def borrow_book(self, book):\n            if not book.is_loaned:\n                book.is_loaned = True\n                self.loans.append(book)\n                return f\"{self.name} has borrowed {book}\"\n            else:\n                return f\"{book} is currently not available.\"\n\n        def return_book(self, book):\n            if book in self.loans:\n                book.is_loaned = False\n                self.loans.remove(book)\n                return f\"{self.name} has returned {book}\"\n            else:\n                return f\"{self.name} did not borrow {book}\"\n\n        def list_borrowed_books(self):\n            return \", \".join(str(book) for book in self.loans) if self.loans else \"No books borrowed.\"\n\n    def __init__(self):\n        self.items = []  # Now a general list for library items\n        self.members = []\n\n    def add_book(self, title, author):\n        new_book = self.Book(title, author)\n        self.items.append(new_book)\n        return f\"Added {new_book}\"\n\n    def register_member(self, name):\n        new_member = self.Member(name)\n        self.members.append(new_member)\n        return f\"Registered {new_member.name} as a member.\"\n\n    def find_item(self, title_or_author, items=None):\n        if items is None:\n            items = self.items\n        for item in items:\n            if isinstance(item, self.Book) and (item.title == title_or_author or item.author == title_or_author):\n                return item\n            # Recursive call could be here if we had nested structures like book categories\n        return None\n\n    def find_member(self, name):\n        for member in self.members:\n            if member.name == name:\n                return member\n        return None\n    \ndef func(a: str):\n    return a\n\n# Example usage\nlibrary = Library()\nprint(library.add_book(\"1984\", \"George Orwell\"))\nprint(library.register_member(\"Alice\"))\n\nbook = library.find_item(\"1984\")\nmember = library.find_member(\"Alice\")\nprint(member.borrow_book(book))\nprint(member.list_borrowed_books())\nprint(member.return_book(book))\nprint(member.list_borrowed_books())\n"
    }
  ],
  "explanation": null,
  "preliminary_context": "This is a preliminary context",
  "metadata": {
    "num_folders": 6,
    "num_files": 10
  },
  "dependencies": [],
  "expanded_state": "expanded",
  "parent_uuid": null,
  "ignored_directories": [
    "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/parser/build",
    "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/parser/conversational_codebase",
    "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/parser/tree-sitter",
    "/Users/jamescourson/Documents/conversational-coding/conversational_codebase/parser/vendor"
  ],
  "directory_name": "conversational_codebase"
}